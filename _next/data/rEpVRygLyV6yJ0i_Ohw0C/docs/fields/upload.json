{"pageProps":{"frontMatter":{"title":"Upload Field","label":"Upload","order":210,"desc":"Upload fields will allow a file to be uploaded, only from a collection supporting Uploads. Learn how to use Upload fields, see examples and options.","keywords":"upload, images media, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, nextjs"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    pre: \"pre\",\n    strong: \"strong\",\n    h2: \"h2\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    em: \"em\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components), {LightDarkImage, Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  if (!LightDarkImage) _missingMdxReference(\"LightDarkImage\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"The Upload Field allows for the selection of a Document from a Collection supporting \", _jsx(_components.a, {\n        href: \"../upload/overview\",\n        children: \"Uploads\"\n      }), \", and\\nformats the selection as a thumbnail in the Admin Panel.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Upload fields are useful for a variety of use cases, such as:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"To provide a \", _jsx(_components.code, {\n          children: \"Page\"\n        }), \" with a featured image\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"To allow for a \", _jsx(_components.code, {\n          children: \"Product\"\n        }), \" to deliver a downloadable asset like PDF or MP3\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"To give a layout building block the ability to feature a background image\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(LightDarkImage, {\n      srcLight: \"https://payloadcms.com/images/docs/fields/upload.png\",\n      srcDark: \"https://payloadcms.com/images/docs/fields/upload-dark.png\",\n      alt: \"Shows an upload field in the Payload Admin Panel\",\n      caption: \"Admin Panel screenshot of an Upload field\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To create an Upload Field, set the \", _jsx(_components.code, {\n        children: \"type\"\n      }), \" to \", _jsx(_components.code, {\n        children: \"upload\"\n      }), \" in your \", _jsx(_components.a, {\n        href: \"./overview\",\n        children: \"Field Config\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { Field } from 'payload'\\n\\nexport const MyUploadField: Field = {\\n  // ...\\n  // highlight-start\\n  type: 'upload',\\n  relationTo: 'media',\\n  // highlight-end\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Important:\"\n        }), \" To use the Upload Field, you must have a\\n\", _jsx(_components.a, {\n          href: \"../configuration/collections\",\n          children: \"Collection\"\n        }), \" configured to allow\\n\", _jsx(_components.a, {\n          href: \"../upload/overview\",\n          children: \"Uploads\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Config Options\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"name\"\n              })\n            }), \" *\"]\n          }), _jsxs(_components.td, {\n            children: [\"To be used as the property name when stored and retrieved from the database. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-names\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"relationTo\"\n              })\n            }), \" *\"]\n          }), _jsxs(_components.td, {\n            children: [\"Provide a single collection \", _jsx(_components.code, {\n              children: \"slug\"\n            }), \" to allow this field to accept a relation to. \", _jsx(_components.strong, {\n              children: \"Note: the related collection must be configured to support Uploads.\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"filterOptions\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"A query to filter which options appear in the UI and validate against. \", _jsx(_components.a, {\n              href: \"#filtering-upload-options\",\n              children: \"More\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hasMany\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Boolean which, if set to true, allows this field to have many relations instead of only one.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"minRows\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"A number for the fewest allowed items during validation when a value is present. Used with hasMany.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"maxRows\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"A number for the most allowed items during validation when a value is present. Used with hasMany.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"maxDepth\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Sets a number limit on iterations of related documents to populate when queried. \", _jsx(_components.a, {\n              href: \"../queries/depth\",\n              children: \"Depth\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"label\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Text used as a field label in the Admin Panel or an object with keys for each language.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"unique\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Enforce that each entry in the Collection has a unique value for this field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"validate\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide a custom validation function that will be executed on both the Admin Panel and the backend. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#validation\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"index\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Build an \", _jsx(_components.a, {\n              href: \"/docs/database/overview\",\n              children: \"index\"\n            }), \" for this field to produce faster queries. Set this field to \", _jsx(_components.code, {\n              children: \"true\"\n            }), \" if your users will perform queries on this field's data often.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"saveToJWT\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"If this field is top-level and nested in a config supporting \", _jsx(_components.a, {\n              href: \"/docs/authentication/overview\",\n              children: \"Authentication\"\n            }), \", include its data in the user JWT.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hooks\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide Field Hooks to control logic for this field. \", _jsx(_components.a, {\n              href: \"../hooks/fields\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"access\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide Field Access Control to denote what users can see and do with this field's data. \", _jsx(_components.a, {\n              href: \"../access-control/fields\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hidden\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin Panel.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"defaultValue\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide data to be used for this field's default value. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#default-values\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"displayPreview\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Enable displaying preview of the uploaded file. Overrides related Collection's \", _jsx(_components.code, {\n              children: \"displayPreview\"\n            }), \" option. \", _jsx(_components.a, {\n              href: \"/docs/upload/overview#collection-upload-options\",\n              children: \"More\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"localized\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Enable localization for this field. Requires \", _jsx(_components.a, {\n              href: \"/docs/configuration/localization\",\n              children: \"localization to be enabled\"\n            }), \" in the Base config.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"required\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Require this field to have a value.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"admin\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Admin-specific configuration. \", _jsx(_components.a, {\n              href: \"./overview#admin-options\",\n              children: \"Admin Options\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"custom\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Extension point for adding custom data (e.g. for plugins)\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"typescriptSchema\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Override field type generation with providing a JSON schema\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"virtual\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide \", _jsx(_components.code, {\n              children: \"true\"\n            }), \" to disable field in the database. See \", _jsx(_components.a, {\n              href: \"https://payloadcms.com/blog/learn-how-virtual-fields-can-help-solve-common-cms-challenges\",\n              children: \"Virtual Fields\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"graphQL\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Custom graphQL configuration for the field. \", _jsx(_components.a, {\n              href: \"/docs/graphql/overview#field-complexity\",\n              children: \"More details\"\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"* An asterisk denotes that a property is required.\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Example\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"collections/ExampleCollection.ts\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { CollectionConfig } from 'payload'\\n\\nexport const ExampleCollection: CollectionConfig = {\\n  slug: 'example-collection',\\n  fields: [\\n    {\\n      name: 'backgroundImage', // required\\n      type: 'upload', // required\\n      relationTo: 'media', // required\\n      required: true,\\n    },\\n  ],\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Filtering upload options\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Options can be dynamically limited by supplying a \", _jsx(_components.a, {\n        href: \"/docs/queries/overview\",\n        children: \"query constraint\"\n      }), \", which will be used both\\nfor validating input and filtering available uploads in the UI.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"filterOptions\"\n      }), \" property can either be a \", _jsx(_components.code, {\n        children: \"Where\"\n      }), \" query, or a function returning \", _jsx(_components.code, {\n        children: \"true\"\n      }), \" to not filter, \", _jsx(_components.code, {\n        children: \"false\"\n      }), \" to\\nprevent all, or a \", _jsx(_components.code, {\n        children: \"Where\"\n      }), \" query. When using a function, it will be\\ncalled with an argument object with the following properties:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Property\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"relationTo\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The collection \", _jsx(_components.code, {\n              children: \"slug\"\n            }), \" to filter against, limited to this field's \", _jsx(_components.code, {\n              children: \"relationTo\"\n            }), \" property\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"data\"\n            })\n          }), _jsx(_components.td, {\n            children: \"An object containing the full collection or global document currently being edited\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"siblingData\"\n            })\n          }), _jsx(_components.td, {\n            children: \"An object containing document data that is scoped to only fields within the same parent of this field\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"id\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The \", _jsx(_components.code, {\n              children: \"id\"\n            }), \" of the current document being edited. \", _jsx(_components.code, {\n              children: \"id\"\n            }), \" is \", _jsx(_components.code, {\n              children: \"undefined\"\n            }), \" during the \", _jsx(_components.code, {\n              children: \"create\"\n            }), \" operation\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"user\"\n            })\n          }), _jsx(_components.td, {\n            children: \"An object containing the currently authenticated user\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"req\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The Payload Request, which contains references to \", _jsx(_components.code, {\n              children: \"payload\"\n            }), \", \", _jsx(_components.code, {\n              children: \"user\"\n            }), \", \", _jsx(_components.code, {\n              children: \"locale\"\n            }), \", and more.\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Example#filter-options-example\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const uploadField = {\\n  name: 'image',\\n  type: 'upload',\\n  relationTo: 'media',\\n  filterOptions: {\\n    mimeType: { contains: 'image' },\\n  },\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can learn more about writing queries \", _jsx(_components.a, {\n        href: \"/docs/queries/overview\",\n        children: \"here\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(Banner, {\n      type: \"warning\",\n      children: [_jsx(_components.p, {\n        children: _jsx(_components.strong, {\n          children: \"Note:\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"When an upload field has both \", _jsx(_components.strong, {\n          children: \"filterOptions\"\n        }), \" and a custom\\n\", _jsx(_components.strong, {\n          children: \"validate\"\n        }), \" function, the api will not validate \", _jsx(_components.strong, {\n          children: \"filterOptions\"\n        }), \"\\nunless you call the default upload field validation function imported from\\n\", _jsx(_components.strong, {\n          children: \"payload/shared\"\n        }), \" in your validate function.\"]\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Bi-directional relationships\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"upload\"\n      }), \" field on its own is used to reference documents in an upload collection. This can be considered a \\\"one-way\\\"\\nrelationship. If you wish to allow an editor to visit the upload document and see where it is being used, you may use\\nthe \", _jsx(_components.code, {\n        children: \"join\"\n      }), \" field in the upload enabled collection. Read more about bi-directional relationships using\\nthe \", _jsx(_components.a, {\n        href: \"./join\",\n        children: \"Join field\"\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}},"__N_SSG":true}