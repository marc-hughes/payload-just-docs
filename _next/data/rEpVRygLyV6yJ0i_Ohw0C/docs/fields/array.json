{"pageProps":{"frontMatter":{"title":"Array Field","label":"Array","order":20,"desc":"Array Fields are intended for sets of repeating fields, that you define. Learn how to use Array Fields, see examples and options.","keywords":"array, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, nextjs"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    pre: \"pre\",\n    h2: \"h2\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    strong: \"strong\",\n    em: \"em\",\n    h3: \"h3\",\n    h4: \"h4\"\n  }, _provideComponents(), props.components), {LightDarkImage} = _components;\n  if (!LightDarkImage) _missingMdxReference(\"LightDarkImage\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"The Array Field is used when you need to have a set of \\\"repeating\\\" \", _jsx(_components.a, {\n        href: \"./overview\",\n        children: \"Fields\"\n      }), \". It stores an array of objects containing fields that you define. These fields can be of any type, including other arrays, to achieve infinitely nested data structures.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Arrays are useful for many different types of content from simple to complex, such as:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"A \\\"slider\\\" with an image (\", _jsx(_components.a, {\n          href: \"/docs/fields/upload\",\n          children: \"upload field\"\n        }), \") and a caption (\", _jsx(_components.a, {\n          href: \"/docs/fields/text\",\n          children: \"text field\"\n        }), \")\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Navigational structures where editors can specify nav items containing pages (\", _jsx(_components.a, {\n          href: \"/docs/fields/relationship\",\n          children: \"relationship field\"\n        }), \"), an \\\"open in new tab\\\" \", _jsx(_components.a, {\n          href: \"/docs/fields/checkbox\",\n          children: \"checkbox field\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Event agenda \\\"timeslots\\\" where you need to specify start & end time (\", _jsx(_components.a, {\n          href: \"/docs/fields/date\",\n          children: \"date field\"\n        }), \"), label (\", _jsx(_components.a, {\n          href: \"/docs/fields/text\",\n          children: \"text field\"\n        }), \"), and Learn More page \", _jsx(_components.a, {\n          href: \"/docs/fields/relationship\",\n          children: \"relationship\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(LightDarkImage, {\n      srcLight: \"https://payloadcms.com/images/docs/fields/array.png\",\n      srcDark: \"https://payloadcms.com/images/docs/fields/array-dark.png\",\n      alt: \"Array field with two Rows in Payload Admin Panel\",\n      caption: \"Admin Panel screenshot of an Array field with two Rows\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To create an Array Field, set the \", _jsx(_components.code, {\n        children: \"type\"\n      }), \" to \", _jsx(_components.code, {\n        children: \"array\"\n      }), \" in your \", _jsx(_components.a, {\n        href: \"./overview\",\n        children: \"Field Config\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { Field } from 'payload'\\n\\nexport const MyArrayField: Field = {\\n  // ...\\n  // highlight-start\\n  type: 'array',\\n  fields: [\\n    // ...\\n  ],\\n  // highlight-end\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Config Options\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"name\"\n              })\n            }), \" *\"]\n          }), _jsxs(_components.td, {\n            children: [\"To be used as the property name when stored and retrieved from the database. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-names\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"label\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Text used as the heading in the \", _jsx(_components.a, {\n              href: \"../admin/overview\",\n              children: \"Admin Panel\"\n            }), \" or an object with keys for each language. Auto-generated from name if not defined.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"fields\"\n              })\n            }), \" *\"]\n          }), _jsx(_components.td, {\n            children: \"Array of field types to correspond to each row of the Array.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"validate\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide a custom validation function that will be executed on both the \", _jsx(_components.a, {\n              href: \"../admin/overview\",\n              children: \"Admin Panel\"\n            }), \" and the backend. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#validation\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"minRows\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"A number for the fewest allowed items during validation when a value is present.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"maxRows\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"A number for the most allowed items during validation when a value is present.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"saveToJWT\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"If this field is top-level and nested in a config supporting \", _jsx(_components.a, {\n              href: \"/docs/authentication/overview\",\n              children: \"Authentication\"\n            }), \", include its data in the user JWT.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hooks\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide Field Hooks to control logic for this field. \", _jsx(_components.a, {\n              href: \"../hooks/fields\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"access\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide Field Access Control to denote what users can see and do with this field's data. \", _jsx(_components.a, {\n              href: \"../access-control/fields\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hidden\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin Panel.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"defaultValue\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide an array of row data to be used for this field's default value. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#default-values\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"localized\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Enable localization for this field. Requires \", _jsx(_components.a, {\n              href: \"/docs/configuration/localization\",\n              children: \"localization to be enabled\"\n            }), \" in the Base config. If enabled, a separate, localized set of all data within this Array will be kept, so there is no need to specify each nested field as \", _jsx(_components.code, {\n              children: \"localized\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"required\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Require this field to have a value.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"labels\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Customize the row labels appearing in the Admin dashboard.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"admin\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Admin-specific configuration. \", _jsx(_components.a, {\n              href: \"#admin-options\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"custom\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Extension point for adding custom data (e.g. for plugins)\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"interfaceName\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Create a top level, reusable \", _jsx(_components.a, {\n              href: \"/docs/typescript/generating-types#custom-field-interfaces\",\n              children: \"Typescript interface\"\n            }), \" & \", _jsx(_components.a, {\n              href: \"/docs/graphql/graphql-schema#custom-field-schemas\",\n              children: \"GraphQL type\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"dbName\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Custom table name for the field when using SQL Database Adapter (\", _jsx(_components.a, {\n              href: \"/docs/database/postgres\",\n              children: \"Postgres\"\n            }), \"). Auto-generated from name if not defined.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"typescriptSchema\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Override field type generation with providing a JSON schema\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"virtual\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide \", _jsx(_components.code, {\n              children: \"true\"\n            }), \" to disable field in the database. See \", _jsx(_components.a, {\n              href: \"https://payloadcms.com/blog/learn-how-virtual-fields-can-help-solve-common-cms-challenges\",\n              children: \"Virtual Fields\"\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"* An asterisk denotes that a property is required.\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Admin Options\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To customize the appearance and behavior of the Array Field in the \", _jsx(_components.a, {\n        href: \"../admin/overview\",\n        children: \"Admin Panel\"\n      }), \", you can use the \", _jsx(_components.code, {\n        children: \"admin\"\n      }), \" option:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { Field } from 'payload'\\n\\nexport const MyArrayField: Field = {\\n  // ...\\n  admin: {\\n    // highlight-line\\n    // ...\\n  },\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The Array Field inherits all of the default options from the base \", _jsx(_components.a, {\n        href: \"./overview#admin-options\",\n        children: \"Field Admin Config\"\n      }), \", plus the following additional options:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"initCollapsed\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Set the initial collapsed state\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"components.RowLabel\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"React component to be rendered as the label on the array row. \", _jsx(_components.a, {\n              href: \"#row-label\",\n              children: \"Example\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"isSortable\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Disable order sorting by setting this value to \", _jsx(_components.code, {\n              children: \"false\"\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Example\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In this example, we have an Array Field called \", _jsx(_components.code, {\n        children: \"slider\"\n      }), \" that contains a set of fields for a simple image slider. Each row in the array has a \", _jsx(_components.code, {\n        children: \"title\"\n      }), \", \", _jsx(_components.code, {\n        children: \"image\"\n      }), \", and \", _jsx(_components.code, {\n        children: \"caption\"\n      }), \". We also customize the row label to display the title if it exists, or a default label if it doesn't.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { CollectionConfig } from 'payload'\\n\\nexport const ExampleCollection: CollectionConfig = {\\n  slug: 'example-collection',\\n  fields: [\\n    {\\n      name: 'slider', // required\\n      type: 'array', // required\\n      label: 'Image Slider',\\n      minRows: 2,\\n      maxRows: 10,\\n      interfaceName: 'CardSlider', // optional\\n      labels: {\\n        singular: 'Slide',\\n        plural: 'Slides',\\n      },\\n      fields: [\\n        // required\\n        {\\n          name: 'title',\\n          type: 'text',\\n        },\\n        {\\n          name: 'image',\\n          type: 'upload',\\n          relationTo: 'media',\\n          required: true,\\n        },\\n        {\\n          name: 'caption',\\n          type: 'text',\\n        },\\n      ],\\n    },\\n  ],\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Custom Components\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Field\"\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Server Component\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import type React from 'react'\\nimport { ArrayField } from '@payloadcms/ui'\\nimport type { ArrayFieldServerComponent } from 'payload'\\n\\nexport const CustomArrayFieldServer: ArrayFieldServerComponent = ({\\n  clientField,\\n  path,\\n  schemaPath,\\n  permissions,\\n}) => {\\n  return (\\n    <ArrayField\\n      field={clientField}\\n      path={path}\\n      schemaPath={schemaPath}\\n      permissions={permissions}\\n    />\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Client Component\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"'use client'\\nimport React from 'react'\\nimport { ArrayField } from '@payloadcms/ui'\\nimport type { ArrayFieldClientComponent } from 'payload'\\n\\nexport const CustomArrayFieldClient: ArrayFieldClientComponent = (props) => {\\n  return <ArrayField {...props} />\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Label\"\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Server Component\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import React from 'react'\\nimport { FieldLabel } from '@payloadcms/ui'\\nimport type { ArrayFieldLabelServerComponent } from 'payload'\\n\\nexport const CustomArrayFieldLabelServer: ArrayFieldLabelServerComponent = ({\\n  clientField,\\n  path,\\n}) => {\\n  return (\\n    <FieldLabel\\n      label={clientField?.label || clientField?.name}\\n      path={path}\\n      required={clientField?.required}\\n    />\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Client Component\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"'use client'\\nimport type { ArrayFieldLabelClientComponent } from 'payload'\\n\\nimport { FieldLabel } from '@payloadcms/ui'\\nimport React from 'react'\\n\\nexport const CustomArrayFieldLabelClient: ArrayFieldLabelClientComponent = ({\\n  field,\\n  path,\\n}) => {\\n  return (\\n    <FieldLabel\\n      label={field?.label || field?.name}\\n      path={path}\\n      required={field?.required}\\n    />\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Row Label\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"'use client'\\n\\nimport { useRowLabel } from '@payloadcms/ui'\\n\\nexport const ArrayRowLabel = () => {\\n  const { data, rowNumber } = useRowLabel<{ title?: string }>()\\n\\n  const customLabel = `${data.title || 'Slide'} ${String(rowNumber).padStart(2, '0')} `\\n\\n  return <div>Custom Label: {customLabel}</div>\\n}\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}},"__N_SSG":true}