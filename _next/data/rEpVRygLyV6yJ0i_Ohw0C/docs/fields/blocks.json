{"pageProps":{"frontMatter":{"title":"Blocks Field","label":"Blocks","order":30,"desc":"The Blocks Field is a great layout build and can be used to construct any flexible content model. Learn how to use Block Fields, see examples and options.","keywords":"blocks, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, nextjs"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    a: \"a\",\n    pre: \"pre\",\n    h2: \"h2\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    em: \"em\",\n    h4: \"h4\",\n    h3: \"h3\",\n    ol: \"ol\"\n  }, _provideComponents(), props.components), {LightDarkImage, Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  if (!LightDarkImage) _missingMdxReference(\"LightDarkImage\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"The Blocks Field is \", _jsx(_components.strong, {\n        children: \"incredibly powerful\"\n      }), \", storing an array of objects based on the fields that you define, where each item in the array is a \\\"block\\\" with its own unique schema.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Blocks are a great way to create a flexible content model that can be used to build a wide variety of content types, including:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"A layout builder tool that grants editors to design highly customizable page or post layouts. Blocks could include configs such as \", _jsx(_components.code, {\n          children: \"Quote\"\n        }), \", \", _jsx(_components.code, {\n          children: \"CallToAction\"\n        }), \", \", _jsx(_components.code, {\n          children: \"Slider\"\n        }), \", \", _jsx(_components.code, {\n          children: \"Content\"\n        }), \", \", _jsx(_components.code, {\n          children: \"Gallery\"\n        }), \", or others.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"A form builder tool where available block configs might be \", _jsx(_components.code, {\n          children: \"Text\"\n        }), \", \", _jsx(_components.code, {\n          children: \"Select\"\n        }), \", or \", _jsx(_components.code, {\n          children: \"Checkbox\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Virtual event agenda \\\"timeslots\\\" where a timeslot could either be a \", _jsx(_components.code, {\n          children: \"Break\"\n        }), \", a \", _jsx(_components.code, {\n          children: \"Presentation\"\n        }), \", or a \", _jsx(_components.code, {\n          children: \"BreakoutSession\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(LightDarkImage, {\n      srcLight: \"https://payloadcms.com/images/docs/fields/blocks.png\",\n      srcDark: \"https://payloadcms.com/images/docs/fields/blocks-dark.png\",\n      alt: \"Admin Panel screenshot of add Blocks drawer view\",\n      caption: \"Admin Panel screenshot of add Blocks drawer view\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To add a Blocks Field, set the \", _jsx(_components.code, {\n        children: \"type\"\n      }), \" to \", _jsx(_components.code, {\n        children: \"blocks\"\n      }), \" in your \", _jsx(_components.a, {\n        href: \"./overview\",\n        children: \"Field Config\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { Field } from 'payload'\\n\\nexport const MyBlocksField: Field = {\\n  // ...\\n  // highlight-start\\n  type: 'blocks',\\n  blocks: [\\n    // ...\\n  ],\\n  // highlight-end\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Config Options\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"name\"\n              })\n            }), \" *\"]\n          }), _jsxs(_components.td, {\n            children: [\"To be used as the property name when stored and retrieved from the database. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-names\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"label\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Text used as the heading in the Admin Panel or an object with keys for each language. Auto-generated from name if not defined.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"blocks\"\n              })\n            }), \" *\"]\n          }), _jsxs(_components.td, {\n            children: [\"Array of \", _jsx(_components.a, {\n              href: \"/docs/fields/blocks#block-configs\",\n              children: \"block configs\"\n            }), \" to be made available to this field.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"validate\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide a custom validation function that will be executed on both the Admin Panel and the backend. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#validation\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"minRows\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"A number for the fewest allowed items during validation when a value is present.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"maxRows\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"A number for the most allowed items during validation when a value is present.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"saveToJWT\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"If this field is top-level and nested in a config supporting \", _jsx(_components.a, {\n              href: \"/docs/authentication/overview\",\n              children: \"Authentication\"\n            }), \", include its data in the user JWT.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hooks\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide Field Hooks to control logic for this field. \", _jsx(_components.a, {\n              href: \"../hooks/fields\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"access\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide Field Access Control to denote what users can see and do with this field's data. \", _jsx(_components.a, {\n              href: \"../access-control/fields\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hidden\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API response or the Admin Panel.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"defaultValue\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide an array of block data to be used for this field's default value. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#default-values\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"localized\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Enable localization for this field. Requires \", _jsx(_components.a, {\n              href: \"/docs/configuration/localization\",\n              children: \"localization to be enabled\"\n            }), \" in the Base config. If enabled, a separate, localized set of all data within this field will be kept, so there is no need to specify each nested field as \", _jsx(_components.code, {\n              children: \"localized\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"unique\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Enforce that each entry in the Collection has a unique value for this field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"labels\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Customize the block row labels appearing in the Admin dashboard.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"admin\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Admin-specific configuration. \", _jsx(_components.a, {\n              href: \"#admin-options\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"custom\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Extension point for adding custom data (e.g. for plugins)\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"typescriptSchema\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Override field type generation with providing a JSON schema\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"virtual\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide \", _jsx(_components.code, {\n              children: \"true\"\n            }), \" to disable field in the database. See \", _jsx(_components.a, {\n              href: \"https://payloadcms.com/blog/learn-how-virtual-fields-can-help-solve-common-cms-challenges\",\n              children: \"Virtual Fields\"\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"* An asterisk denotes that a property is required.\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Admin Options\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To customize the appearance and behavior of the Blocks Field in the \", _jsx(_components.a, {\n        href: \"../admin/overview\",\n        children: \"Admin Panel\"\n      }), \", you can use the \", _jsx(_components.code, {\n        children: \"admin\"\n      }), \" option:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { Field } from 'payload'\\n\\nexport const MyBlocksField: Field = {\\n  // ...\\n  admin: {\\n    // highlight-line\\n    // ...\\n  },\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The Blocks Field inherits all of the default options from the base \", _jsx(_components.a, {\n        href: \"./overview#admin-options\",\n        children: \"Field Admin Config\"\n      }), \", plus the following additional options:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"group\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Text or localization object used to group this Block in the Blocks Drawer.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"initCollapsed\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Set the initial collapsed state\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"isSortable\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Disable order sorting by setting this value to \", _jsx(_components.code, {\n              children: \"false\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"disableBlockName\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Hide the blockName field by setting this value to \", _jsx(_components.code, {\n              children: \"true\"\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Customizing the way your block is rendered in Lexical\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you're using this block within the \", _jsx(_components.a, {\n        href: \"/docs/rich-text/overview\",\n        children: \"Lexical editor\"\n      }), \", you can also customize how the block is rendered in the Lexical editor itself by specifying custom components.\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"admin.components.Label\"\n        }), \" - pass a custom React component here to customize the way that the label is rendered for this block\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"admin.components.Block\"\n        }), \" - pass a component here to completely override the way the block is rendered in Lexical with your own component\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This is super handy if you'd like to present your editors with a very deliberate and nicely designed block \\\"preview\\\" right in your rich text.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For example, if you have a \", _jsx(_components.code, {\n        children: \"gallery\"\n      }), \" block, you might want to actually render the gallery of images directly in your Lexical block. With the \", _jsx(_components.code, {\n        children: \"admin.components.Block\"\n      }), \" property, you can do exactly that!\"]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"success\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Tip:\"\n        }), \" If you customize the way your block is rendered in Lexical, you can\\nimport utility components to easily edit / remove your block - so that you\\ndon't have to build all of this yourself.\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To import these utility components for one of your custom blocks, you can import the following:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import {\\n  // Edit block buttons (choose the one that corresponds to your usage)\\n  // When clicked, this will open a drawer with your block's fields\\n  // so your editors can edit them\\n  InlineBlockEditButton,\\n  BlockEditButton,\\n\\n  // Buttons that will remove this block from Lexical\\n  // (choose the one that corresponds to your usage)\\n  InlineBlockRemoveButton,\\n  BlockRemoveButton,\\n\\n  // The label that should be rendered for an inline block\\n  InlineBlockLabel,\\n\\n  // The default \\\"container\\\" that is rendered for an inline block\\n  // if you want to re-use it\\n  InlineBlockContainer,\\n\\n  // The default \\\"collapsible\\\" UI that is rendered for a regular block\\n  // if you want to re-use it\\n  BlockCollapsible,\\n} from '@payloadcms/richtext-lexical/client'\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Block Configs\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Blocks are defined as separate configs of their own.\"\n    }), \"\\n\", _jsx(Banner, {\n      type: \"success\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Tip:\"\n        }), \" Best practice is to define each block config in its own file, and\\nthen import them into your Blocks field as necessary. This way each block\\nconfig can be easily shared between fields. For instance, using the \\\"layout\\nbuilder\\\" example, you might want to feature a few of the same blocks in a Post\\ncollection as well as a Page collection. Abstracting into their own files\\ntrivializes their reusability.\"]\n      })\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"slug\"\n              })\n            }), \" *\"]\n          }), _jsxs(_components.td, {\n            children: [\"Identifier for this block type. Will be saved on each block as the \", _jsx(_components.code, {\n              children: \"blockType\"\n            }), \" property.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"fields\"\n              })\n            }), \" *\"]\n          }), _jsx(_components.td, {\n            children: \"Array of fields to be stored in this block.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"labels\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Customize the block labels that appear in the Admin dashboard. Auto-generated from slug if not defined.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"imageURL\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Provide a custom image thumbnail to help editors identify this block in the Admin UI.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"imageAltText\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Customize this block's image thumbnail alt text.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"interfaceName\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Create a top level, reusable \", _jsx(_components.a, {\n              href: \"/docs/typescript/generating-types#custom-field-interfaces\",\n              children: \"Typescript interface\"\n            }), \" & \", _jsx(_components.a, {\n              href: \"/docs/graphql/graphql-schema#custom-field-schemas\",\n              children: \"GraphQL type\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"graphQL.singularName\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Text to use for the GraphQL schema name. Auto-generated from slug if not defined. NOTE: this is set for deprecation, prefer \", _jsx(_components.code, {\n              children: \"interfaceName\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"dbName\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Custom table name for this block type when using SQL Database Adapter (\", _jsx(_components.a, {\n              href: \"/docs/database/postgres\",\n              children: \"Postgres\"\n            }), \"). Auto-generated from slug if not defined.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"custom\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Extension point for adding custom data (e.g. for plugins)\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Auto-generated data per block\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In addition to the field data that you define on each block, Payload will store two additional properties on each block:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"blockType\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"blockType\"\n      }), \" is saved as the slug of the block that has been selected.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"blockName\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The Admin Panel provides each block with a \", _jsx(_components.code, {\n        children: \"blockName\"\n      }), \" field which optionally allows editors to label their blocks for better editability and readability. This can be visually hidden via \", _jsx(_components.code, {\n        children: \"admin.disableBlockName\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Example\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"collections/ExampleCollection.js\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { Block, CollectionConfig } from 'payload'\\n\\nconst QuoteBlock: Block = {\\n  slug: 'Quote', // required\\n  imageURL: 'https://google.com/path/to/image.jpg',\\n  imageAltText: 'A nice thumbnail image to show what this block looks like',\\n  interfaceName: 'QuoteBlock', // optional\\n  fields: [\\n    // required\\n    {\\n      name: 'quoteHeader',\\n      type: 'text',\\n      required: true,\\n    },\\n    {\\n      name: 'quoteText',\\n      type: 'text',\\n    },\\n  ],\\n}\\n\\nexport const ExampleCollection: CollectionConfig = {\\n  slug: 'example-collection',\\n  fields: [\\n    {\\n      name: 'layout', // required\\n      type: 'blocks', // required\\n      minRows: 1,\\n      maxRows: 20,\\n      blocks: [\\n        // required\\n        QuoteBlock,\\n      ],\\n    },\\n  ],\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Custom Components\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Field\"\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Server Component\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import type React from 'react'\\nimport { BlocksField } from '@payloadcms/ui'\\nimport type { BlocksFieldServerComponent } from 'payload'\\n\\nexport const CustomBlocksFieldServer: BlocksFieldServerComponent = ({\\n  clientField,\\n  path,\\n  schemaPath,\\n  permissions,\\n}) => {\\n  return (\\n    <BlocksField\\n      field={clientField}\\n      path={path}\\n      schemaPath={schemaPath}\\n      permissions={permissions}\\n    />\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Client Component\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"'use client'\\nimport React from 'react'\\nimport { BlocksField } from '@payloadcms/ui'\\nimport type { BlocksFieldClientComponent } from 'payload'\\n\\nexport const CustomBlocksFieldClient: BlocksFieldClientComponent = (props) => {\\n  return <BlocksField {...props} />\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Label\"\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Server Component\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import React from 'react'\\nimport { FieldLabel } from '@payloadcms/ui'\\nimport type { BlocksFieldLabelServerComponent } from 'payload'\\n\\nexport const CustomBlocksFieldLabelServer: BlocksFieldLabelServerComponent = ({\\n  clientField,\\n  path,\\n}) => {\\n  return (\\n    <FieldLabel\\n      label={clientField?.label || clientField?.name}\\n      path={path}\\n      required={clientField?.required}\\n    />\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Client Component\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"'use client'\\nimport React from 'react'\\nimport { FieldLabel } from '@payloadcms/ui'\\nimport type { BlocksFieldLabelClientComponent } from 'payload'\\n\\nexport const CustomBlocksFieldLabelClient: BlocksFieldLabelClientComponent = ({\\n  label,\\n  path,\\n  required,\\n}) => {\\n  return (\\n    <FieldLabel\\n      label={field?.label || field?.name}\\n      path={path}\\n      required={field?.required}\\n    />\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Row Label\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"'use client'\\n\\nimport { useRowLabel } from '@payloadcms/ui'\\n\\nexport const BlockRowLabel = () => {\\n  const { data, rowNumber } = useRowLabel<{ title?: string }>()\\n\\n  const customLabel = `${data.type} ${String(rowNumber).padStart(2, '0')} `\\n\\n  return <div>Custom Label: {customLabel}</div>\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Block References\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you have multiple blocks used in multiple places, your Payload Config can grow in size, potentially sending more data to the client and requiring more processing on the server. However, you can optimize performance by defining each block \", _jsx(_components.strong, {\n        children: \"once\"\n      }), \" in your Payload Config and then referencing its slug wherever it's used instead of passing the entire block config.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To do this, define the block in the \", _jsx(_components.code, {\n        children: \"blocks\"\n      }), \" array of the Payload Config. Then, in the Blocks Field, pass the block slug to the \", _jsx(_components.code, {\n        children: \"blockReferences\"\n      }), \" array - leaving the \", _jsx(_components.code, {\n        children: \"blocks\"\n      }), \" array empty for compatibility reasons.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { buildConfig } from 'payload'\\nimport { lexicalEditor, BlocksFeature } from '@payloadcms/richtext-lexical'\\n\\n// Payload Config\\nconst config = buildConfig({\\n  // Define the block once\\n  blocks: [\\n    {\\n      slug: 'TextBlock',\\n      fields: [\\n        {\\n          name: 'text',\\n          type: 'text',\\n        },\\n      ],\\n    },\\n  ],\\n  collections: [\\n    {\\n      slug: 'collection1',\\n      fields: [\\n        {\\n          name: 'content',\\n          type: 'blocks',\\n          // Reference the block by slug\\n          blockReferences: ['TextBlock'],\\n          blocks: [], // Required to be empty, for compatibility reasons\\n        },\\n      ],\\n    },\\n     {\\n      slug: 'collection2',\\n      fields: [\\n        {\\n          name: 'editor',\\n          type: 'richText',\\n          editor: lexicalEditor({\\n            BlocksFeature({\\n              // Same reference can be reused anywhere, even in the lexical editor, without incurred performance hit\\n              blocks: ['TextBlock'],\\n            })\\n          })\\n        },\\n      ],\\n    },\\n  ],\\n})\\n\"\n      })\n    }), \"\\n\", _jsxs(Banner, {\n      type: \"warning\",\n      children: [_jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Reminder:\"\n        }), \"\\nBlocks referenced in the \", _jsx(_components.code, {\n          children: \"blockReferences\"\n        }), \" array are treated as isolated from the collection / global config. This has the following implications:\"]\n      }), _jsxs(_components.ol, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"The block config cannot be modified or extended in the collection config. It will be identical everywhere it's referenced.\"\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"Access control for blocks referenced in the \", _jsx(_components.code, {\n            children: \"blockReferences\"\n          }), \" are run only once - data from the collection will not be available in the block's access control.\"]\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"TypeScript\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"As you build your own Block configs, you might want to store them in separate files but retain typing accordingly. To do so, you can import and use Payload's \", _jsx(_components.code, {\n        children: \"Block\"\n      }), \" type:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { Block } from 'payload'\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}},"__N_SSG":true}