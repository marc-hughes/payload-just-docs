{"pageProps":{"frontMatter":{"description":"Fields are the building blocks of Payload, find out how to add or remove a field, change field type, add hooks, define Access Control and Validation.","keywords":"overview, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, nextjs","label":"Overview","order":10,"title":"Fields Overview"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    code: \"code\",\n    pre: \"pre\",\n    h2: \"h2\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\",\n    h3: \"h3\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    h4: \"h4\",\n    em: \"em\",\n    h5: \"h5\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"Fields are the building blocks of Payload. They define the schema of the Documents that will be stored in the \", _jsx(_components.a, {\n        href: \"../database/overview\",\n        children: \"Database\"\n      }), \", as well as automatically generate the corresponding UI within the \", _jsx(_components.a, {\n        href: \"../admin/overview\",\n        children: \"Admin Panel\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"There are many \", _jsx(_components.a, {\n        href: \"#field-types\",\n        children: \"Field Types\"\n      }), \" to choose from, ranging anywhere from simple text strings to nested arrays and blocks. Most fields save data to the database, while others are strictly presentational. Fields can have \", _jsx(_components.a, {\n        href: \"#validation\",\n        children: \"Custom Validations\"\n      }), \", \", _jsx(_components.a, {\n        href: \"./overview#conditional-logic\",\n        children: \"Conditional Logic\"\n      }), \", \", _jsx(_components.a, {\n        href: \"#field-level-access-control\",\n        children: \"Access Control\"\n      }), \", \", _jsx(_components.a, {\n        href: \"#field-level-hooks\",\n        children: \"Hooks\"\n      }), \", and so much more.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Fields can be endlessly customized in their appearance and behavior without affecting their underlying data structure. Fields are designed to withstand heavy modification or even complete replacement through the use of \", _jsx(_components.a, {\n        href: \"#custom-components\",\n        children: \"Custom Field Components\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To configure fields, use the \", _jsx(_components.code, {\n        children: \"fields\"\n      }), \" property in your \", _jsx(_components.a, {\n        href: \"../configuration/collections\",\n        children: \"Collection\"\n      }), \" or \", _jsx(_components.a, {\n        href: \"../configuration/globals\",\n        children: \"Global\"\n      }), \" config:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { CollectionConfig } from 'payload'\\n\\nexport const Page: CollectionConfig = {\\n  // ...\\n  fields: [\\n    // highlight-line\\n    // ...\\n  ],\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Field Types\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Payload provides a wide variety of built-in Field Types, each with its own unique properties and behaviors that determine which values it can accept, how it is presented in the API, and how it will be rendered in the \", _jsx(_components.a, {\n        href: \"../admin/overview\",\n        children: \"Admin Panel\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To configure fields, use the \", _jsx(_components.code, {\n        children: \"fields\"\n      }), \" property in your \", _jsx(_components.a, {\n        href: \"../configuration/collections\",\n        children: \"Collection\"\n      }), \" or \", _jsx(_components.a, {\n        href: \"../configuration/globals\",\n        children: \"Global\"\n      }), \" config:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { CollectionConfig } from 'payload'\\n\\nexport const Page: CollectionConfig = {\\n  slug: 'pages',\\n  // highlight-start\\n  fields: [\\n    {\\n      name: 'field',\\n      type: 'text',\\n    },\\n  ],\\n  // highlight-end\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Reminder:\"\n        }), \" Each field is an object with at least the \", _jsx(_components.code, {\n          children: \"type\"\n        }), \" property. This\\nmatches the field to its corresponding Field Type. \", _jsx(_components.a, {\n          href: \"#field-options\",\n          children: \"More\\ndetails\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"There are three main categories of fields in Payload:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#data-fields\",\n          children: \"Data Fields\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#presentational-fields\",\n          children: \"Presentational Fields\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#virtual-fields\",\n          children: \"Virtual Fields\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To begin writing fields, first determine which \", _jsx(_components.a, {\n        href: \"#field-types\",\n        children: \"Field Type\"\n      }), \" best supports your application. Then author your field accordingly using the \", _jsx(_components.a, {\n        href: \"#field-options\",\n        children: \"Field Options\"\n      }), \" for your chosen field type.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Data Fields\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Data Fields are used to store data in the \", _jsx(_components.a, {\n        href: \"../database/overview\",\n        children: \"Database\"\n      }), \". All Data Fields have a \", _jsx(_components.code, {\n        children: \"name\"\n      }), \" property. This is the key that will be used to store the field's value.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here are the available Data Fields:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"./array\",\n          children: \"Array\"\n        }), \" - for repeating content, supports nested fields\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"./blocks\",\n          children: \"Blocks\"\n        }), \" - for block-based content, supports nested fields\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"./checkbox\",\n          children: \"Checkbox\"\n        }), \" - saves boolean true / false values\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"./code\",\n          children: \"Code\"\n        }), \" - renders a code editor interface that saves a string\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"./date\",\n          children: \"Date\"\n        }), \" - renders a date picker and saves a timestamp\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"./email\",\n          children: \"Email\"\n        }), \" - ensures the value is a properly formatted email address\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"./group\",\n          children: \"Group\"\n        }), \" - nests fields within a keyed object\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"./json\",\n          children: \"JSON\"\n        }), \" - renders a JSON editor interface that saves a JSON object\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"./number\",\n          children: \"Number\"\n        }), \" - saves numeric values\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"./point\",\n          children: \"Point\"\n        }), \" - for location data, saves geometric coordinates\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"./radio\",\n          children: \"Radio\"\n        }), \" - renders a radio button group that allows only one value to be selected\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"./relationship\",\n          children: \"Relationship\"\n        }), \" - assign relationships to other collections\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"./rich-text\",\n          children: \"Rich Text\"\n        }), \" - renders a fully extensible rich text editor\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"./select\",\n          children: \"Select\"\n        }), \" - renders a dropdown / picklist style value selector\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"./tabs\",\n          children: \"Tabs (Named)\"\n        }), \" - similar to group, but renders nested fields within a tabbed layout\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"./text\",\n          children: \"Text\"\n        }), \" - simple text input that saves a string\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"./textarea\",\n          children: \"Textarea\"\n        }), \" - similar to text, but allows for multi-line input\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"./upload\",\n          children: \"Upload\"\n        }), \" - allows local file and image upload\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Presentational Fields\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Presentational Fields do not store data in the database. Instead, they are used to organize and present other fields in the \", _jsx(_components.a, {\n        href: \"../admin/overview\",\n        children: \"Admin Panel\"\n      }), \", or to add custom UI components.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here are the available Presentational Fields:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"../fields/collapsible\",\n          children: \"Collapsible\"\n        }), \" - nests fields within a collapsible component\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"../fields/row\",\n          children: \"Row\"\n        }), \" - aligns fields horizontally\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"../fields/tabs\",\n          children: \"Tabs (Unnamed)\"\n        }), \" - nests fields within a tabbed layout\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"../fields/ui\",\n          children: \"UI\"\n        }), \" - blank field for custom UI components\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Virtual Fields\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Virtual fields are used to display data that is not stored in the database. They are useful for displaying computed values that populate within the APi response through hooks, etc.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here are the available Virtual Fields:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"../fields/join\",\n          children: \"Join\"\n        }), \" - achieves two-way data binding between fields\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"success\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Tip:\"\n        }), \" Don't see a built-in field type that you need? Build it! Using a\\ncombination of \", _jsx(_components.a, {\n          href: \"#validation\",\n          children: \"Field Validations\"\n        }), \" and \", _jsx(_components.a, {\n          href: \"../custom-components/overview\",\n          children: \"Custom\\nComponents\"\n        }), \", you can override the entirety of\\nhow a component functions within the \", _jsx(_components.a, {\n          href: \"../admin/overview\",\n          children: \"Admin Panel\"\n        }), \" to\\neffectively create your own field type.\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Field Options\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"All fields require at least the \", _jsx(_components.code, {\n        children: \"type\"\n      }), \" property. This matches the field to its corresponding \", _jsx(_components.a, {\n        href: \"#field-types\",\n        children: \"Field Type\"\n      }), \" to determine its appearance and behavior within the \", _jsx(_components.a, {\n        href: \"../admin/overview\",\n        children: \"Admin Panel\"\n      }), \". Each Field Type has its own unique set of options based on its own type.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To set a field's type, use the \", _jsx(_components.code, {\n        children: \"type\"\n      }), \" property in your Field Config:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { Field } from 'payload'\\n\\nexport const MyField: Field = {\\n  type: 'text', // highlight-line\\n  name: 'myField',\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [\"For a full list of configuration options, see the documentation for each\\n\", _jsx(_components.a, {\n          href: \"#field-types\",\n          children: \"Field Type\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Field Names\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"All \", _jsx(_components.a, {\n        href: \"#data-fields\",\n        children: \"Data Fields\"\n      }), \" require a \", _jsx(_components.code, {\n        children: \"name\"\n      }), \" property. This is the key that will be used to store and retrieve the field's value in the database. This property must be unique amongst this field's siblings.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To set a field's name, use the \", _jsx(_components.code, {\n        children: \"name\"\n      }), \" property in your Field Config:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { Field } from 'payload'\\n\\nexport const MyField: Field = {\\n  type: 'text',\\n  name: 'myField', // highlight-line\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Payload reserves various field names for internal use. Using reserved field names will result in your field being sanitized from the config.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The following field names are forbidden and cannot be used:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"__v\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"salt\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"hash\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"file\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Field-level Hooks\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In addition to being able to define \", _jsx(_components.a, {\n        href: \"../hooks/overview\",\n        children: \"Hooks\"\n      }), \" on a document-level, you can define extremely granular logic field-by-field.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To define Field-level Hooks, use the \", _jsx(_components.code, {\n        children: \"hooks\"\n      }), \" property in your Field Config:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { Field } from 'payload'\\n\\nexport const MyField: Field = {\\n  type: 'text',\\n  name: 'myField',\\n  // highlight-start\\n  hooks: {\\n    // ...\\n  },\\n  // highlight-end\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For full details on Field-level Hooks, see the \", _jsx(_components.a, {\n        href: \"../hooks/fields\",\n        children: \"Field Hooks\"\n      }), \" documentation.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Field-level Access Control\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In addition to being able to define \", _jsx(_components.a, {\n        href: \"../access-control/overview\",\n        children: \"Access Control\"\n      }), \" on a document-level, you can define extremely granular permissions field-by-field.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To define Field-level Access Control, use the \", _jsx(_components.code, {\n        children: \"access\"\n      }), \" property in your Field Config:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { Field } from 'payload'\\n\\nexport const MyField: Field = {\\n  type: 'text',\\n  name: 'myField',\\n  // highlight-start\\n  access: {\\n    // ...\\n  },\\n  // highlight-end\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For full details on Field-level Access Control, see the \", _jsx(_components.a, {\n        href: \"../access-control/fields\",\n        children: \"Field Access Control\"\n      }), \" documentation.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Default Values\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Fields can be optionally prefilled with initial values. This is used in both the \", _jsx(_components.a, {\n        href: \"../admin/overview\",\n        children: \"Admin Panel\"\n      }), \" as well as API requests to populate missing or undefined field values during the \", _jsx(_components.code, {\n        children: \"create\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"update\"\n      }), \" operations.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To set a field's default value, use the \", _jsx(_components.code, {\n        children: \"defaultValue\"\n      }), \" property in your Field Config:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { Field } from 'payload'\\n\\nexport const MyField: Field = {\\n  type: 'text',\\n  name: 'myField',\\n  defaultValue: 'Hello, World!', // highlight-line\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Default values can be defined as a static value or a function that returns a value. When a \", _jsx(_components.code, {\n        children: \"defaultValue\"\n      }), \" is defined statically, Payload's \", _jsx(_components.a, {\n        href: \"../database/overview\",\n        children: \"Database Adapters\"\n      }), \" will apply it to the database schema or models.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Functions can be written to make use of the following argument properties:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"user\"\n        }), \" - the authenticated user object\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"locale\"\n        }), \" - the currently selected locale string\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"req\"\n        }), \" - the \", _jsx(_components.code, {\n          children: \"PayloadRequest\"\n        }), \" object\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here is an example of a \", _jsx(_components.code, {\n        children: \"defaultValue\"\n      }), \" function:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { Field } from 'payload'\\n\\nconst translation: {\\n  en: 'Written by'\\n  es: 'Escrito por'\\n}\\n\\nexport const myField: Field = {\\n  name: 'attribution',\\n  type: 'text',\\n  // highlight-start\\n  defaultValue: ({ user, locale, req }) =>\\n    `${translation[locale]} ${user.name}`,\\n  // highlight-end\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"success\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Tip:\"\n        }), \" You can use async \", _jsx(_components.code, {\n          children: \"defaultValue\"\n        }), \" functions to fill fields with data\\nfrom API requests or Local API using \", _jsx(_components.code, {\n          children: \"req.payload\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Validation\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Fields are automatically validated based on their \", _jsx(_components.a, {\n        href: \"#field-types\",\n        children: \"Field Type\"\n      }), \" and other \", _jsx(_components.a, {\n        href: \"#field-options\",\n        children: \"Field Options\"\n      }), \" such as \", _jsx(_components.code, {\n        children: \"required\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"min\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"max\"\n      }), \" value constraints. If needed, however, field validations can be customized or entirely replaced by providing your own custom validation functions.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To set a custom field validation function, use the \", _jsx(_components.code, {\n        children: \"validate\"\n      }), \" property in your Field Config:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { Field } from 'payload'\\n\\nexport const MyField: Field = {\\n  type: 'text',\\n  name: 'myField',\\n  validate: (value) => Boolean(value) || 'This field is required', // highlight-line\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Custom validation functions should return either \", _jsx(_components.code, {\n        children: \"true\"\n      }), \" or a \", _jsx(_components.code, {\n        children: \"string\"\n      }), \" representing the error message to display in API responses.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The following arguments are provided to the \", _jsx(_components.code, {\n        children: \"validate\"\n      }), \" function:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Argument\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"value\"\n            })\n          }), _jsx(_components.td, {\n            children: \"The value of the field being validated.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"ctx\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"An object with additional data and context. \", _jsx(_components.a, {\n              href: \"#validation-context\",\n              children: \"More details\"\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Validation Context\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"ctx\"\n      }), \" argument contains full document data, sibling field data, the current operation, and other useful information such as currently authenticated user:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { Field } from 'payload'\\n\\nexport const MyField: Field = {\\n  type: 'text',\\n  name: 'myField',\\n  // highlight-start\\n  validate: (val, { user }) =>\\n    Boolean(user) || 'You must be logged in to save this field',\\n  // highlight-end\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The following additional properties are provided in the \", _jsx(_components.code, {\n        children: \"ctx\"\n      }), \" object:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Property\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"data\"\n            })\n          }), _jsx(_components.td, {\n            children: \"An object containing the full collection or global document currently being edited.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"siblingData\"\n            })\n          }), _jsx(_components.td, {\n            children: \"An object containing document data that is scoped to only fields within the same parent of this field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"operation\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Will be \", _jsx(_components.code, {\n              children: \"create\"\n            }), \" or \", _jsx(_components.code, {\n              children: \"update\"\n            }), \" depending on the UI action or API call.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"path\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The full path to the field in the schema, represented as an array of string segments, including array indexes. I.e \", _jsx(_components.code, {\n              children: \"['group', 'myArray', '1', 'textField']\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"id\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The \", _jsx(_components.code, {\n              children: \"id\"\n            }), \" of the current document being edited. \", _jsx(_components.code, {\n              children: \"id\"\n            }), \" is \", _jsx(_components.code, {\n              children: \"undefined\"\n            }), \" during the \", _jsx(_components.code, {\n              children: \"create\"\n            }), \" operation.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"req\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The current HTTP request object. Contains \", _jsx(_components.code, {\n              children: \"payload\"\n            }), \", \", _jsx(_components.code, {\n              children: \"user\"\n            }), \", etc.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"event\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Either \", _jsx(_components.code, {\n              children: \"onChange\"\n            }), \" or \", _jsx(_components.code, {\n              children: \"submit\"\n            }), \" depending on the current action. Used as a performance opt-in. \", _jsx(_components.a, {\n              href: \"#async-field-validations\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Reusing Default Field Validations\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When using custom validation functions, Payload will use yours in place of the default. However, you might want to simply augment the default validation with your own custom logic.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To reuse default field validations, call them from within your custom validation function:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { text } from 'payload/shared'\\n\\nconst field: Field = {\\n  name: 'notBad',\\n  type: 'text',\\n  validate: (val, args) => {\\n    if (val === 'bad') return 'This cannot be \\\"bad\\\"'\\n    return text(val, args) // highlight-line\\n  },\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here is a list of all default field validation functions:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import {\\n  array,\\n  blocks,\\n  checkbox,\\n  code,\\n  date,\\n  email,\\n  group,\\n  json,\\n  number,\\n  point,\\n  radio,\\n  relationship,\\n  richText,\\n  select,\\n  tabs,\\n  text,\\n  textarea,\\n  upload,\\n} from 'payload/shared'\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Async Field Validations\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Custom validation functions can also be asynchronous depending on your needs. This makes it possible to make requests to external services or perform other miscellaneous asynchronous logic.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When writing async validation functions, it is important to consider the performance implications. Validations are executed on every change to the field, so they should be as lightweight as possible. If you need to perform expensive validations, such as querying the database, consider using the \", _jsx(_components.code, {\n        children: \"event\"\n      }), \" property in the \", _jsx(_components.code, {\n        children: \"ctx\"\n      }), \" object to only run the validation on form submission.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To write asynchronous validation functions, use the \", _jsx(_components.code, {\n        children: \"async\"\n      }), \" keyword to define your function:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { CollectionConfig } from 'payload'\\n\\nexport const Orders: CollectionConfig = {\\n  slug: 'orders',\\n  fields: [\\n    {\\n      name: 'customerNumber',\\n      type: 'text',\\n      // highlight-start\\n      validate: async (val, { event }) => {\\n        if (event === 'onChange') {\\n          return true\\n        }\\n\\n        // only perform expensive validation when the form is submitted\\n        const response = await fetch(`https://your-api.com/customers/${val}`)\\n\\n        if (response.ok) {\\n          return true\\n        }\\n\\n        return 'The customer number provided does not match any customers within our records.'\\n      },\\n      // highlight-end\\n    },\\n  ],\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Custom ID Fields\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"All \", _jsx(_components.a, {\n        href: \"../configuration/collections\",\n        children: \"Collections\"\n      }), \" automatically generate their own ID field. If needed, you can override this behavior by providing an explicit ID field to your config. This field should either be required or have a hook to generate the ID dynamically.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To define a custom ID field, add a top-level field with the \", _jsx(_components.code, {\n        children: \"name\"\n      }), \" property set to \", _jsx(_components.code, {\n        children: \"id\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { CollectionConfig } from 'payload'\\n\\nexport const MyCollection: CollectionConfig = {\\n  // ...\\n  fields: [\\n    {\\n      name: 'id', // highlight-line\\n      required: true,\\n      type: 'number',\\n    },\\n  ],\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Reminder:\"\n        }), \" The Custom ID Fields can only be of type \", _jsx(_components.a, {\n          href: \"./number\",\n          children: _jsx(_components.code, {\n            children: \"Number\"\n          })\n        }), \" or\\n\", _jsx(_components.a, {\n          href: \"./text\",\n          children: _jsx(_components.code, {\n            children: \"Text\"\n          })\n        }), \". Custom ID fields with type \", _jsx(_components.code, {\n          children: \"text\"\n        }), \" must not contain \", _jsx(_components.code, {\n          children: \"/\"\n        }), \" or\\n\", _jsx(_components.code, {\n          children: \".\"\n        }), \" characters.\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Admin Options\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can customize the appearance and behavior of fields within the \", _jsx(_components.a, {\n        href: \"../admin/overview\",\n        children: \"Admin Panel\"\n      }), \" through the \", _jsx(_components.code, {\n        children: \"admin\"\n      }), \" property of any Field Config:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { CollectionConfig } from 'payload'\\n\\nexport const CollectionConfig: CollectionConfig = {\\n  // ...\\n  fields: [\\n    // ...\\n    {\\n      name: 'myField',\\n      type: 'text',\\n      admin: {\\n        // highlight-line\\n        // ...\\n      },\\n    },\\n  ],\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The following options are available:\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"condition\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Programmatically show / hide fields based on other fields. \", _jsx(_components.a, {\n              href: \"#conditional-logic\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"components\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"All Field Components can be swapped out for \", _jsx(_components.a, {\n              href: \"../custom-components/overview\",\n              children: \"Custom Components\"\n            }), \" that you define.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"description\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Helper text to display alongside the field to provide more information for the editor. \", _jsx(_components.a, {\n              href: \"#description\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"position\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Specify if the field should be rendered in the sidebar by defining \", _jsx(_components.code, {\n              children: \"position: 'sidebar'\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"width\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Restrict the width of a field. You can pass any string-based value here, be it pixels, percentages, etc. This property is especially useful when fields are nested within a \", _jsx(_components.code, {\n              children: \"Row\"\n            }), \" type where they can be organized horizontally.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"style\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.a, {\n              href: \"https://developer.mozilla.org/en-US/docs/Web/CSS\",\n              children: \"CSS Properties\"\n            }), \" to inject into the root element of the field.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"className\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Attach a \", _jsx(_components.a, {\n              href: \"https://developer.mozilla.org/en-US/docs/Web/CSS/Class_selectors\",\n              children: \"CSS class attribute\"\n            }), \" to the root DOM element of a field.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"readOnly\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Setting a field to \", _jsx(_components.code, {\n              children: \"readOnly\"\n            }), \" has no effect on the API whatsoever but disables the admin component's editability to prevent editors from modifying the field's value.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"disabled\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"If a field is \", _jsx(_components.code, {\n              children: \"disabled\"\n            }), \", it is completely omitted from the \", _jsx(_components.a, {\n              href: \"../admin/overview\",\n              children: \"Admin Panel\"\n            }), \" entirely.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"disableBulkEdit\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Set \", _jsx(_components.code, {\n              children: \"disableBulkEdit\"\n            }), \" to \", _jsx(_components.code, {\n              children: \"true\"\n            }), \" to prevent fields from appearing in the select options when making edits for multiple documents. Defaults to \", _jsx(_components.code, {\n              children: \"true\"\n            }), \" for UI fields.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"disableListColumn\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Set \", _jsx(_components.code, {\n              children: \"disableListColumn\"\n            }), \" to \", _jsx(_components.code, {\n              children: \"true\"\n            }), \" to prevent fields from appearing in the list view column selector.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"disableListFilter\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Set \", _jsx(_components.code, {\n              children: \"disableListFilter\"\n            }), \" to \", _jsx(_components.code, {\n              children: \"true\"\n            }), \" to prevent fields from appearing in the list view filter options.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hidden\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Will transform the field into a \", _jsx(_components.code, {\n              children: \"hidden\"\n            }), \" input type. Its value will still submit with requests in the Admin Panel, but the field itself will not be visible to editors.\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Field Descriptions\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Field Descriptions are used to provide additional information to the editor about a field, such as special instructions. Their placement varies from field to field, but typically are displayed with subtle style differences beneath the field inputs.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A description can be configured in three ways:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"As a string.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"As a function which returns a string. \", _jsx(_components.a, {\n          href: \"#description-functions\",\n          children: \"More details\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"As a React component. \", _jsx(_components.a, {\n          href: \"#description\",\n          children: \"More details\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To add a Custom Description to a field, use the \", _jsx(_components.code, {\n        children: \"admin.description\"\n      }), \" property in your Field Config:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { CollectionConfig } from 'payload'\\n\\nexport const MyCollectionConfig: CollectionConfig = {\\n  // ...\\n  fields: [\\n    // ...\\n    {\\n      name: 'myField',\\n      type: 'text',\\n      admin: {\\n        description: 'Hello, world!', // highlight-line\\n      },\\n    },\\n  ],\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Reminder:\"\n        }), \" To replace the Field Description with a \", _jsx(_components.a, {\n          href: \"../custom-components/overview\",\n          children: \"Custom\\nComponent\"\n        }), \", use the\\n\", _jsx(_components.code, {\n          children: \"admin.components.Description\"\n        }), \" property. \", _jsx(_components.a, {\n          href: \"#description\",\n          children: \"More details\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Description Functions\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Custom Descriptions can also be defined as a function. Description Functions are executed on the server and can be used to format simple descriptions based on the user's current \", _jsx(_components.a, {\n        href: \"../configuration/localization\",\n        children: \"Locale\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To add a Description Function to a field, set the \", _jsx(_components.code, {\n        children: \"admin.description\"\n      }), \" property to a \", _jsx(_components.em, {\n        children: \"function\"\n      }), \" in your Field Config:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { CollectionConfig } from 'payload'\\n\\nexport const MyCollectionConfig: CollectionConfig = {\\n  // ...\\n  fields: [\\n    // ...\\n    {\\n      name: 'myField',\\n      type: 'text',\\n      admin: {\\n        description: ({ t }) => `${t('Hello, world!')}`, // highlight-line\\n      },\\n    },\\n  ],\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"All Description Functions receive the following arguments:\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Argument\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsx(_components.tbody, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"t\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The \", _jsx(_components.code, {\n              children: \"t\"\n            }), \" function used to internationalize the Admin Panel. \", _jsx(_components.a, {\n              href: \"../configuration/i18n\",\n              children: \"More details\"\n            })]\n          })]\n        })\n      })]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"info\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Note:\"\n        }), \" If you need to subscribe to live updates within your form, use a\\nDescription Component instead. \", _jsx(_components.a, {\n          href: \"#description\",\n          children: \"More details\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Conditional Logic\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can show and hide fields based on what other fields are doing by utilizing conditional logic on a field by field basis. The \", _jsx(_components.code, {\n        children: \"condition\"\n      }), \" property on a field's admin config accepts a function which takes the following arguments:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Argument\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"data\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The entire document's data that is currently being edited.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"siblingData\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Only the fields that are direct siblings to the field with the condition.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"ctx\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"An object containing additional information about the field’s location and user.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"ctx\"\n      }), \" object:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Property\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"blockData\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The nearest parent block's data. If the field is not inside a block, this will be \", _jsx(_components.code, {\n              children: \"undefined\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"path\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The full path to the field in the schema, represented as an array of string segments, including array indexes. I.e \", _jsx(_components.code, {\n              children: \"['group', 'myArray', '1', 'textField']\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"user\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The currently authenticated user object.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"condition\"\n      }), \" function should return a boolean that will control if the field should be displayed or not.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"{\\n  fields: [\\n    {\\n      name: 'enableGreeting',\\n      type: 'checkbox',\\n      defaultValue: false,\\n    },\\n    {\\n      name: 'greeting',\\n      type: 'text',\\n      admin: {\\n        // highlight-start\\n        condition: (data, siblingData, { blockData, path, user }) => {\\n          if (data.enableGreeting) {\\n            return true\\n          } else {\\n            return false\\n          }\\n        },\\n        // highlight-end\\n      },\\n    },\\n  ]\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Custom Components\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Within the \", _jsx(_components.a, {\n        href: \"../admin/overview\",\n        children: \"Admin Panel\"\n      }), \", fields are represented in three distinct places:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"#field\",\n          children: \"Field\"\n        }), \" - The actual form field rendered in the Edit View.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"#cell\",\n          children: \"Cell\"\n        }), \" - The table cell component rendered in the List View.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"#filter\",\n          children: \"Filter\"\n        }), \" - The filter component rendered in the List View.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"#diff\",\n          children: \"Diff\"\n        }), \" - The Diff component rendered in the Version Diff View\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To swap in Field Components with your own, use the \", _jsx(_components.code, {\n        children: \"admin.components\"\n      }), \" property in your Field Config:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { CollectionConfig } from 'payload'\\n\\nexport const CollectionConfig: CollectionConfig = {\\n  // ...\\n  fields: [\\n    // ...\\n    {\\n      // ...\\n      admin: {\\n        components: {\\n          // highlight-line\\n          // ...\\n        },\\n      },\\n    },\\n  ],\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The following options are available:\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Component\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"Field\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The form field rendered of the Edit View. \", _jsx(_components.a, {\n              href: \"#field\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"Cell\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The table cell rendered of the List View. \", _jsx(_components.a, {\n              href: \"#cell\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"Filter\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The filter component rendered in the List View. \", _jsx(_components.a, {\n              href: \"#filter\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"Label\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Override the default Label of the Field Component. \", _jsx(_components.a, {\n              href: \"#label\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"Error\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Override the default Error of the Field Component. \", _jsx(_components.a, {\n              href: \"#error\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"Diff\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Override the default Diff component rendered in the Version Diff View. \", _jsx(_components.a, {\n              href: \"#diff\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"Description\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Override the default Description of the Field Component. \", _jsx(_components.a, {\n              href: \"#description\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"beforeInput\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"An array of elements that will be added before the input of the Field Component. \", _jsx(_components.a, {\n              href: \"#afterinput-and-beforeinput\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"afterInput\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"An array of elements that will be added after the input of the Field Component. \", _jsx(_components.a, {\n              href: \"#afterinput-and-beforeinput\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Field\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The Field Component is the actual form field rendered in the Edit View. This is the input that user's will interact with when editing a document.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To swap in your own Field Component, use the \", _jsx(_components.code, {\n        children: \"admin.components.Field\"\n      }), \" property in your Field Config:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { CollectionConfig } from 'payload'\\n\\nexport const CollectionConfig: CollectionConfig = {\\n  // ...\\n  fields: [\\n    // ...\\n    {\\n      // ...\\n      admin: {\\n        components: {\\n          Field: '/path/to/MyFieldComponent', // highlight-line\\n        },\\n      },\\n    },\\n  ],\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsxs(_components.em, {\n        children: [\"For details on how to build Custom Components, see \", _jsx(_components.a, {\n          href: \"../custom-components/overview#building-custom-components\",\n          children: \"Building Custom Components\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [\"Instead of replacing the entire Field Component, you can alternately replace\\nor slot-in only specific parts by using the \", _jsx(_components.a, {\n          href: \"#label\",\n          children: _jsx(_components.code, {\n            children: \"Label\"\n          })\n        }), \",\\n\", _jsx(_components.a, {\n          href: \"#error\",\n          children: _jsx(_components.code, {\n            children: \"Error\"\n          })\n        }), \", \", _jsx(_components.a, {\n          href: \"#afterinput-and-beforinput\",\n          children: _jsx(_components.code, {\n            children: \"beforeInput\"\n          })\n        }), \", and\\n\", _jsx(_components.a, {\n          href: \"#afterinput-and-beforinput\",\n          children: _jsx(_components.code, {\n            children: \"afterInput\"\n          })\n        }), \" properties.\"]\n      })\n    }), \"\\n\", _jsx(_components.h5, {\n      children: \"Default Props\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"All Field Components receive the following props by default:\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Property\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"docPreferences\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"An object that contains the \", _jsx(_components.a, {\n              href: \"../admin/preferences\",\n              children: \"Preferences\"\n            }), \" for the document.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"field\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"In Client Components, this is the sanitized Client Field Config. In Server Components, this is the original Field Config. Server Components will also receive the sanitized field config through the\", _jsx(_components.code, {\n              children: \"clientField\"\n            }), \" prop (see below).\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"locale\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The locale of the field. \", _jsx(_components.a, {\n              href: \"../configuration/localization\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"readOnly\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"A boolean value that represents if the field is read-only or not.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"user\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The currently authenticated user. \", _jsx(_components.a, {\n              href: \"../authentication/overview\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"validate\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"A function that can be used to validate the field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"path\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"A string representing the direct, dynamic path to the field at runtime, i.e. \", _jsx(_components.code, {\n              children: \"myGroup.myArray.0.myField\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"schemaPath\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"A string representing the direct, static path to the Field Config, i.e. \", _jsx(_components.code, {\n              children: \"posts.myGroup.myArray.myField\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"indexPath\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"A hyphen-notated string representing the path to the field \", _jsx(_components.em, {\n              children: \"within the nearest named ancestor field\"\n            }), \", i.e. \", _jsx(_components.code, {\n              children: \"0-0\"\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In addition to the above props, all Server Components will also receive the following props:\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Property\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"clientField\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The serializable Client Field Config.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"field\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The Field Config.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"data\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The current document being edited.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"i18n\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The \", _jsx(_components.a, {\n              href: \"../configuration/i18n\",\n              children: \"i18n\"\n            }), \" object.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"payload\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The \", _jsx(_components.a, {\n              href: \"../local-api/overview\",\n              children: \"Payload\"\n            }), \" class.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"permissions\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The field permissions based on the currently authenticated user.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"siblingData\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The data of the field's siblings.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"user\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The currently authenticated user. \", _jsx(_components.a, {\n              href: \"../authentication/overview\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"value\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The value of the field at render-time.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h5, {\n      children: \"Sending and receiving values from the form\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When swapping out the \", _jsx(_components.code, {\n        children: \"Field\"\n      }), \" component, you are responsible for sending and receiving the field's \", _jsx(_components.code, {\n        children: \"value\"\n      }), \" from the form itself.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To do so, import the \", _jsx(_components.a, {\n        href: \"../admin/react-hooks#usefield\",\n        children: _jsx(_components.code, {\n          children: \"useField\"\n        })\n      }), \" hook from \", _jsx(_components.code, {\n        children: \"@payloadcms/ui\"\n      }), \" and use it to manage the field's value:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"'use client'\\nimport { useField } from '@payloadcms/ui'\\n\\nexport const CustomTextField: React.FC = () => {\\n  const { value, setValue } = useField() // highlight-line\\n\\n  return <input onChange={(e) => setValue(e.target.value)} value={value} />\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"success\",\n      children: _jsxs(_components.p, {\n        children: [\"For a complete list of all available React hooks, see the \", _jsx(_components.a, {\n          href: \"../admin/react-hooks\",\n          children: \"Payload React\\nHooks\"\n        }), \" documentation. For additional help, see \", _jsx(_components.a, {\n          href: \"../custom-components/overview#building-custom-components\",\n          children: \"Building\\nCustom Components\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsx(_components.h5, {\n      children: \"TypeScript#field-component-types\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When building Custom Field Components, you can import the client field props to ensure type safety in your component. There is an explicit type for the Field Component, one for every Field Type and server/client environment. The convention is to prepend the field type onto the target type, i.e. \", _jsx(_components.code, {\n        children: \"TextFieldClientComponent\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import type {\\n  TextFieldClientComponent,\\n  TextFieldServerComponent,\\n  TextFieldClientProps,\\n  TextFieldServerProps,\\n  // ...and so on for each Field Type\\n} from 'payload'\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"See each individual Field Type for exact type imports.\"\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Cell\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The Cell Component is rendered in the table of the List View. It represents the value of the field when displayed in a table cell.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To swap in your own Cell Component, use the \", _jsx(_components.code, {\n        children: \"admin.components.Cell\"\n      }), \" property in your Field Config:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { Field } from 'payload'\\n\\nexport const myField: Field = {\\n  name: 'myField',\\n  type: 'text',\\n  admin: {\\n    components: {\\n      Cell: '/path/to/MyCustomCellComponent', // highlight-line\\n    },\\n  },\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"All Cell Components receive the same \", _jsx(_components.a, {\n        href: \"#field\",\n        children: \"Default Field Component Props\"\n      }), \", plus the following:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Property\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"link\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"A boolean representing whether this cell should be wrapped in a link.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"onClick\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"A function that is called when the cell is clicked.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For details on how to build Custom Components themselves, see \", _jsx(_components.a, {\n        href: \"../custom-components/overview#building-custom-components\",\n        children: \"Building Custom Components\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Filter\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The Filter Component is the actual input element rendered within the \\\"Filter By\\\" dropdown of the List View used to represent this field when building filters.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To swap in your own Filter Component, use the \", _jsx(_components.code, {\n        children: \"admin.components.Filter\"\n      }), \" property in your Field Config:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { Field } from 'payload'\\n\\nexport const myField: Field = {\\n  name: 'myField',\\n  type: 'text',\\n  admin: {\\n    components: {\\n      Filter: '/path/to/MyCustomFilterComponent', // highlight-line\\n    },\\n  },\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"All Custom Filter Components receive the same \", _jsx(_components.a, {\n        href: \"#field\",\n        children: \"Default Field Component Props\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For details on how to build Custom Components themselves, see \", _jsx(_components.a, {\n        href: \"../custom-components/overview#building-custom-components\",\n        children: \"Building Custom Components\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Label\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The Label Component is rendered anywhere a field needs to be represented by a label. This is typically used in the Edit View, but can also be used in the List View and elsewhere.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To swap in your own Label Component, use the \", _jsx(_components.code, {\n        children: \"admin.components.Label\"\n      }), \" property in your Field Config:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { Field } from 'payload'\\n\\nexport const myField: Field = {\\n  name: 'myField',\\n  type: 'text',\\n  admin: {\\n    components: {\\n      Label: '/path/to/MyCustomLabelComponent', // highlight-line\\n    },\\n  },\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"All Custom Label Components receive the same \", _jsx(_components.a, {\n        href: \"#field\",\n        children: \"Default Field Component Props\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For details on how to build Custom Components themselves, see \", _jsx(_components.a, {\n        href: \"../custom-components/overview#building-custom-components\",\n        children: \"Building Custom Components\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h5, {\n      children: \"TypeScript#label-component-types\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When building Custom Label Components, you can import the component types to ensure type safety in your component. There is an explicit type for the Label Component, one for every Field Type and server/client environment. The convention is to append \", _jsx(_components.code, {\n        children: \"LabelServerComponent\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"LabelClientComponent\"\n      }), \" to the type of field, i.e. \", _jsx(_components.code, {\n        children: \"TextFieldLabelClientComponent\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import type {\\n  TextFieldLabelServerComponent,\\n  TextFieldLabelClientComponent,\\n  // ...and so on for each Field Type\\n} from 'payload'\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Alternatively to the \", _jsx(_components.a, {\n        href: \"#field-descriptions\",\n        children: \"Description Property\"\n      }), \", you can also use a \", _jsx(_components.a, {\n        href: \"../custom-components/overview\",\n        children: \"Custom Component\"\n      }), \" as the Field Description. This can be useful when you need to provide more complex feedback to the user, such as rendering dynamic field values or other interactive elements.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To add a Description Component to a field, use the \", _jsx(_components.code, {\n        children: \"admin.components.Description\"\n      }), \" property in your Field Config:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { CollectionConfig } from 'payload'\\n\\nexport const MyCollectionConfig: CollectionConfig = {\\n  // ...\\n  fields: [\\n    // ...\\n    {\\n      name: 'myField',\\n      type: 'text',\\n      admin: {\\n        components: {\\n          Description: '/path/to/MyCustomDescriptionComponent', // highlight-line\\n        },\\n      },\\n    },\\n  ],\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"All Custom Description Components receive the same \", _jsx(_components.a, {\n        href: \"#field\",\n        children: \"Default Field Component Props\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For details on how to build a Custom Components themselves, see \", _jsx(_components.a, {\n        href: \"../custom-components/overview#building-custom-components\",\n        children: \"Building Custom Components\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h5, {\n      children: \"TypeScript#description-component-types\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When building Custom Description Components, you can import the component props to ensure type safety in your component. There is an explicit type for the Description Component, one for every Field Type and server/client environment. The convention is to append \", _jsx(_components.code, {\n        children: \"DescriptionServerComponent\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"DescriptionClientComponent\"\n      }), \" to the type of field, i.e. \", _jsx(_components.code, {\n        children: \"TextFieldDescriptionClientComponent\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import type {\\n  TextFieldDescriptionServerComponent,\\n  TextFieldDescriptionClientComponent,\\n  // And so on for each Field Type\\n} from 'payload'\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Error\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The Error Component is rendered when a field fails validation. It is typically displayed beneath the field input in a visually-compelling style.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To swap in your own Error Component, use the \", _jsx(_components.code, {\n        children: \"admin.components.Error\"\n      }), \" property in your Field Config:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { Field } from 'payload'\\n\\nexport const myField: Field = {\\n  name: 'myField',\\n  type: 'text',\\n  admin: {\\n    components: {\\n      Error: '/path/to/MyCustomErrorComponent', // highlight-line\\n    },\\n  },\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"All Error Components receive the \", _jsx(_components.a, {\n        href: \"#field\",\n        children: \"Default Field Component Props\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For details on how to build Custom Components themselves, see \", _jsx(_components.a, {\n        href: \"../custom-components/overview#building-custom-components\",\n        children: \"Building Custom Components\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h5, {\n      children: \"TypeScript#error-component-types\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When building Custom Error Components, you can import the component types to ensure type safety in your component. There is an explicit type for the Error Component, one for every Field Type and server/client environment. The convention is to append \", _jsx(_components.code, {\n        children: \"ErrorServerComponent\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"ErrorClientComponent\"\n      }), \" to the type of field, i.e. \", _jsx(_components.code, {\n        children: \"TextFieldErrorClientComponent\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import type {\\n  TextFieldErrorServerComponent,\\n  TextFieldErrorClientComponent,\\n  // And so on for each Field Type\\n} from 'payload'\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Diff\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The Diff Component is rendered in the Version Diff view. It will only be visible in entities with versioning enabled,\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To swap in your own Diff Component, use the \", _jsx(_components.code, {\n        children: \"admin.components.Diff\"\n      }), \" property in your Field Config:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { Field } from 'payload'\\n\\nexport const myField: Field = {\\n  name: 'myField',\\n  type: 'text',\\n  admin: {\\n    components: {\\n      Diff: '/path/to/MyCustomDiffComponent', // highlight-line\\n    },\\n  },\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"All Error Components receive the \", _jsx(_components.a, {\n        href: \"#field\",\n        children: \"Default Field Component Props\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For details on how to build Custom Components themselves, see \", _jsx(_components.a, {\n        href: \"../custom-components/overview#building-custom-components\",\n        children: \"Building Custom Components\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h5, {\n      children: \"TypeScript#diff-component-types\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When building Custom Diff Components, you can import the component types to ensure type safety in your component. There is an explicit type for the Diff Component, one for every Field Type and server/client environment. The convention is to append \", _jsx(_components.code, {\n        children: \"DiffServerComponent\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"DiffClientComponent\"\n      }), \" to the type of field, i.e. \", _jsx(_components.code, {\n        children: \"TextFieldDiffClientComponent\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import type {\\n  TextFieldDiffServerComponent,\\n  TextFieldDiffClientComponent,\\n  // And so on for each Field Type\\n} from 'payload'\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"afterInput and beforeInput\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"With these properties you can add multiple components \", _jsx(_components.em, {\n        children: \"before\"\n      }), \" and \", _jsx(_components.em, {\n        children: \"after\"\n      }), \" the input element, as their name suggests. This is useful when you need to render additional elements alongside the field without replacing the entire field component.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To add components before and after the input element, use the \", _jsx(_components.code, {\n        children: \"admin.components.beforeInput\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"admin.components.afterInput\"\n      }), \" properties in your Field Config:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { CollectionConfig } from 'payload'\\n\\nexport const MyCollectionConfig: CollectionConfig = {\\n  // ...\\n  fields: [\\n    // ...\\n    {\\n      name: 'myField',\\n      type: 'text',\\n      admin: {\\n        components: {\\n          // highlight-start\\n          beforeInput: ['/path/to/MyCustomComponent'],\\n          afterInput: ['/path/to/MyOtherCustomComponent'],\\n          // highlight-end\\n        },\\n      },\\n    },\\n  ],\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"All \", _jsx(_components.code, {\n        children: \"afterInput\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"beforeInput\"\n      }), \" Components receive the same \", _jsx(_components.a, {\n        href: \"#field\",\n        children: \"Default Field Component Props\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For details on how to build Custom Components, see \", _jsx(_components.a, {\n        href: \"../custom-components/overview#building-custom-components\",\n        children: \"Building Custom Components\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"TypeScript\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can import the Payload \", _jsx(_components.code, {\n        children: \"Field\"\n      }), \" type as well as other common types from the \", _jsx(_components.code, {\n        children: \"payload\"\n      }), \" package. \", _jsx(_components.a, {\n        href: \"../typescript/overview\",\n        children: \"More details\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { Field } from 'payload'\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}},"__N_SSG":true}