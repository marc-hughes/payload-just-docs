{"pageProps":{"frontMatter":{"title":"Postgres","label":"Postgres","order":50,"desc":"Payload supports Postgres through an officially supported Drizzle Database Adapter.","keywords":"Postgres, documentation, typescript, Content Management System, cms, headless, javascript, node, react, nextjs"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    h3: \"h3\",\n    pre: \"pre\",\n    strong: \"strong\",\n    a: \"a\",\n    h2: \"h2\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"To use Payload with Postgres, install the package \", _jsx(_components.code, {\n        children: \"@payloadcms/db-postgres\"\n      }), \". It leverages Drizzle ORM and \", _jsx(_components.code, {\n        children: \"node-postgres\"\n      }), \" to interact with a Postgres database that you provide.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Alternatively, the \", _jsx(_components.code, {\n        children: \"@payloadcms/db-vercel-postgres\"\n      }), \" package is also available and is optimized for use with Vercel.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"It automatically manages changes to your database for you in development mode, and exposes a full suite of migration controls for you to leverage in order to keep other database environments in sync with your schema. DDL transformations are automatically generated.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To configure Payload to use Postgres, pass the \", _jsx(_components.code, {\n        children: \"postgresAdapter\"\n      }), \" to your Payload Config as follows:\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Usage\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"@payloadcms/db-postgres\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { postgresAdapter } from '@payloadcms/db-postgres'\\n\\nexport default buildConfig({\\n  // Configure the Postgres adapter here\\n  db: postgresAdapter({\\n    // Postgres-specific arguments go here.\\n    // `pool` is required.\\n    pool: {\\n      connectionString: process.env.DATABASE_URI,\\n    },\\n  }),\\n})\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"@payloadcms/db-vercel-postgres\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { vercelPostgresAdapter } from '@payloadcms/db-vercel-postgres'\\n\\nexport default buildConfig({\\n  // Automatically uses proces.env.POSTGRES_URL if no options are provided.\\n  db: vercelPostgresAdapter(),\\n  // Optionally, can accept the same options as the @vercel/postgres package.\\n  db: vercelPostgresAdapter({\\n    pool: {\\n      connectionString: process.env.DATABASE_URL,\\n    },\\n  }),\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"info\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Note:\"\n        }), \" If you're using \", _jsx(_components.code, {\n          children: \"vercelPostgresAdapter\"\n        }), \" your\\n\", _jsx(_components.code, {\n          children: \"process.env.POSTGRES_URL\"\n        }), \" or \", _jsx(_components.code, {\n          children: \"pool.connectionString\"\n        }), \" points to a local\\ndatabase (e.g hostname has \", _jsx(_components.code, {\n          children: \"localhost\"\n        }), \" or \", _jsx(_components.code, {\n          children: \"127.0.0.1\"\n        }), \") we use the \", _jsx(_components.code, {\n          children: \"pg\"\n        }), \" module\\nfor pooling instead of \", _jsx(_components.code, {\n          children: \"@vercel/postgres\"\n        }), \". This is because \", _jsx(_components.code, {\n          children: \"@vercel/postgres\"\n        }), \"\\ndoesn't work with local databases, if you want to disable that behavior, you\\ncan pass \", _jsx(_components.code, {\n          children: \"forceUseVercelPostgres: true\"\n        }), \" to the adapter's args and follow\\n\", _jsx(_components.a, {\n          href: \"https://vercel.com/docs/storage/vercel-postgres/local-development#option-2:-local-postgres-instance-with-docker\",\n          children: \"Vercel\\nguide\"\n        }), \"\\nfor a Docker Neon DB setup.\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Options\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.code, {\n              children: \"pool\"\n            }), \" *\"]\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.a, {\n              href: \"https://orm.drizzle.team/docs/quick-postgresql/node-postgres\",\n              children: \"Pool connection options\"\n            }), \" that will be passed to Drizzle and \", _jsx(_components.code, {\n              children: \"node-postgres\"\n            }), \" or to \", _jsx(_components.code, {\n              children: \"@vercel/postgres\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"push\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Disable Drizzle's \", _jsx(_components.a, {\n              href: \"https://orm.drizzle.team/kit-docs/overview#prototyping-with-db-push\",\n              children: _jsx(_components.code, {\n                children: \"db push\"\n              })\n            }), \" in development mode. By default, \", _jsx(_components.code, {\n              children: \"push\"\n            }), \" is enabled for development mode only.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"migrationDir\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Customize the directory that migrations are stored.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.code, {\n              children: \"schemaName\"\n            }), \" (experimental)\"]\n          }), _jsx(_components.td, {\n            children: \"A string for the postgres schema to use, defaults to 'public'.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"idType\"\n            })\n          }), _jsx(_components.td, {\n            children: \"A string of 'serial', or 'uuid' that is used for the data type given to id columns.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"transactionOptions\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"A PgTransactionConfig object for transactions, or set to \", _jsx(_components.code, {\n              children: \"false\"\n            }), \" to disable using transactions. \", _jsx(_components.a, {\n              href: \"https://orm.drizzle.team/docs/transactions\",\n              children: \"More details\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"disableCreateDatabase\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Pass \", _jsx(_components.code, {\n              children: \"true\"\n            }), \" to disable auto database creation if it doesn't exist. Defaults to \", _jsx(_components.code, {\n              children: \"false\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"localesSuffix\"\n            })\n          }), _jsx(_components.td, {\n            children: \"A string appended to the end of table names for storing localized fields. Default is '_locales'.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"relationshipsSuffix\"\n            })\n          }), _jsx(_components.td, {\n            children: \"A string appended to the end of table names for storing relationships. Default is '_rels'.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"versionsSuffix\"\n            })\n          }), _jsx(_components.td, {\n            children: \"A string appended to the end of table names for storing versions. Defaults to '_v'.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"beforeSchemaInit\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Drizzle schema hook. Runs before the schema is built. \", _jsx(_components.a, {\n              href: \"#beforeschemainit\",\n              children: \"More Details\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"afterSchemaInit\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Drizzle schema hook. Runs after the schema is built. \", _jsx(_components.a, {\n              href: \"#afterschemainit\",\n              children: \"More Details\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"generateSchemaOutputFile\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Override generated schema from \", _jsx(_components.code, {\n              children: \"payload generate:db-schema\"\n            }), \" file path. Defaults to \", _jsx(_components.code, {\n              children: \"{CWD}/src/payload-generated.schema.ts\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"allowIDOnCreate\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Set to \", _jsx(_components.code, {\n              children: \"true\"\n            }), \" to use the \", _jsx(_components.code, {\n              children: \"id\"\n            }), \" passed in data on the create API operations without using a custom ID field.\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Access to Drizzle\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"After Payload is initialized, this adapter will expose the full power of Drizzle to you for use if you need it.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To ensure type-safety, you need to generate Drizzle schema first with:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-sh\",\n        children: \"npx payload generate:db-schema\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Then, you can access Drizzle as follows:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { posts } from './payload-generated-schema'\\n// To avoid installing Drizzle, you can import everything that drizzle has from our re-export path.\\nimport { eq, sql, and } from '@payloadcms/db-postgres/drizzle'\\n\\n// Drizzle's Querying API: https://orm.drizzle.team/docs/rqb\\nconst posts = await payload.db.drizzle.query.posts.findMany()\\n// Drizzle's Select API https://orm.drizzle.team/docs/select\\nconst result = await payload.db.drizzle\\n  .select()\\n  .from(posts)\\n  .where(\\n    and(eq(posts.id, 50), sql`lower(${posts.title}) = 'example post title'`),\\n  )\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Tables, relations, and enums\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In addition to exposing Drizzle directly, all of the tables, Drizzle relations, and enum configs are exposed for you via the \", _jsx(_components.code, {\n        children: \"payload.db\"\n      }), \" property as well.\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Tables - \", _jsx(_components.code, {\n          children: \"payload.db.tables\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Enums - \", _jsx(_components.code, {\n          children: \"payload.db.enums\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Relations - \", _jsx(_components.code, {\n          children: \"payload.db.relations\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Prototyping in development mode\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Drizzle exposes two ways to work locally in development mode.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The first is \", _jsx(_components.a, {\n        href: \"https://orm.drizzle.team/kit-docs/overview#prototyping-with-db-push\",\n        children: _jsx(_components.code, {\n          children: \"db push\"\n        })\n      }), \", which automatically pushes changes you make to your Payload Config (and therefore, Drizzle schema) to your database so you don't have to manually migrate every time you change your Payload Config. This only works in development mode, and should not be mixed with manually running \", _jsx(_components.a, {\n        href: \"/docs/database/migrations\",\n        children: _jsx(_components.code, {\n          children: \"migrate\"\n        })\n      }), \" commands.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You will be warned if any changes that you make will entail data loss while in development mode. Push is enabled by default, but you can opt out if you'd like.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Alternatively, you can disable \", _jsx(_components.code, {\n        children: \"push\"\n      }), \" and rely solely on migrations to keep your local database in sync with your Payload Config.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Migration workflows\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In Postgres, migrations are a fundamental aspect of working with Payload and you should become familiar with how they work.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For more information about migrations, \", _jsx(_components.a, {\n        href: \"./migrations#when-to-run-migrations\",\n        children: \"click here\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Drizzle schema hooks\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"beforeSchemaInit\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Runs before the schema is built. You can use this hook to extend your database structure with tables that won't be managed by Payload.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { postgresAdapter } from '@payloadcms/db-postgres'\\nimport {\\n  integer,\\n  pgTable,\\n  serial,\\n} from '@payloadcms/db-postgres/drizzle/pg-core'\\n\\npostgresAdapter({\\n  beforeSchemaInit: [\\n    ({ schema, adapter }) => {\\n      return {\\n        ...schema,\\n        tables: {\\n          ...schema.tables,\\n          addedTable: pgTable('added_table', {\\n            id: serial('id').notNull(),\\n          }),\\n        },\\n      }\\n    },\\n  ],\\n})\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"One use case is preserving your existing database structure when migrating to Payload. By default, Payload drops the current database schema, which may not be desirable in this scenario.\\nTo quickly generate the Drizzle schema from your database you can use \", _jsx(_components.a, {\n        href: \"https://orm.drizzle.team/kit-docs/commands#introspect--pull\",\n        children: \"Drizzle Introspection\"\n      }), \"\\nYou should get the \", _jsx(_components.code, {\n        children: \"schema.ts\"\n      }), \" file which may look like this:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import {\\n  pgTable,\\n  uniqueIndex,\\n  serial,\\n  varchar,\\n  text,\\n} from 'drizzle-orm/pg-core'\\n\\nexport const users = pgTable('users', {\\n  id: serial('id').primaryKey(),\\n  fullName: text('full_name'),\\n  phone: varchar('phone', { length: 256 }),\\n})\\n\\nexport const countries = pgTable(\\n  'countries',\\n  {\\n    id: serial('id').primaryKey(),\\n    name: varchar('name', { length: 256 }),\\n  },\\n  (countries) => {\\n    return {\\n      nameIndex: uniqueIndex('name_idx').on(countries.name),\\n    }\\n  },\\n)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can import them into your config and append to the schema with the \", _jsx(_components.code, {\n        children: \"beforeSchemaInit\"\n      }), \" hook like this:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { postgresAdapter } from '@payloadcms/db-postgres'\\nimport { users, countries } from '../drizzle/schema'\\n\\npostgresAdapter({\\n  beforeSchemaInit: [\\n    ({ schema, adapter }) => {\\n      return {\\n        ...schema,\\n        tables: {\\n          ...schema.tables,\\n          users,\\n          countries,\\n        },\\n      }\\n    },\\n  ],\\n})\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Make sure Payload doesn't overlap table names with its collections. For example, if you already have a collection with slug \\\"users\\\", you should either change the slug or \", _jsx(_components.code, {\n        children: \"dbName\"\n      }), \" to change the table name for this collection.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"afterSchemaInit\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Runs after the Drizzle schema is built. You can use this hook to modify the schema with features that aren't supported by Payload, or if you want to add a column that you don't want to be in the Payload config.\\nTo extend a table, Payload exposes \", _jsx(_components.code, {\n        children: \"extendTable\"\n      }), \" utillity to the args. You can refer to the \", _jsx(_components.a, {\n        href: \"https://orm.drizzle.team/docs/sql-schema-declaration\",\n        children: \"Drizzle documentation\"\n      }), \".\\nThe following example adds the \", _jsx(_components.code, {\n        children: \"extra_integer_column\"\n      }), \" column and a composite index on \", _jsx(_components.code, {\n        children: \"country\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"city\"\n      }), \" columns.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { postgresAdapter } from '@payloadcms/db-postgres'\\nimport { index, integer } from '@payloadcms/db-postgres/drizzle/pg-core'\\nimport { buildConfig } from 'payload'\\n\\nexport default buildConfig({\\n  collections: [\\n    {\\n      slug: 'places',\\n      fields: [\\n        {\\n          name: 'country',\\n          type: 'text',\\n        },\\n        {\\n          name: 'city',\\n          type: 'text',\\n        },\\n      ],\\n    },\\n  ],\\n  db: postgresAdapter({\\n    afterSchemaInit: [\\n      ({ schema, extendTable, adapter }) => {\\n        extendTable({\\n          table: schema.tables.places,\\n          columns: {\\n            extraIntegerColumn: integer('extra_integer_column'),\\n          },\\n          extraConfig: (table) => ({\\n            country_city_composite_index: index(\\n              'country_city_composite_index',\\n            ).on(table.country, table.city),\\n          }),\\n        })\\n\\n        return schema\\n      },\\n    ],\\n  }),\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Note for generated schema:\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Columns and tables, added in schema hooks won't be added to the generated via \", _jsx(_components.code, {\n        children: \"payload generate:db-schema\"\n      }), \" Drizzle schema.\\nIf you want them to be there, you either have to edit this file manually or mutate the internal Payload \\\"raw\\\" SQL schema in the \", _jsx(_components.code, {\n        children: \"beforeSchemaInit\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { postgresAdapter } from '@payloadcms/db-postgres'\\n\\npostgresAdapter({\\n  beforeSchemaInit: [\\n    ({ schema, adapter }) => {\\n      // Add a new table\\n      adapter.rawTables.myTable = {\\n        name: 'my_table',\\n        columns: {\\n          my_id: {\\n            name: 'my_id',\\n            type: 'serial',\\n            primaryKey: true,\\n          },\\n        },\\n      }\\n\\n      // Add a new column to generated by Payload table:\\n      adapter.rawTables.posts.columns.customColumn = {\\n        name: 'custom_column',\\n        // Note that Payload SQL doesn't support everything that Drizzle does.\\n        type: 'integer',\\n        notNull: true,\\n      }\\n      // Add a new index to generated by Payload table:\\n      adapter.rawTables.posts.indexes.customColumnIdx = {\\n        name: 'custom_column_idx',\\n        unique: true,\\n        on: ['custom_column'],\\n      }\\n\\n      return schema\\n    },\\n  ],\\n})\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}},"__N_SSG":true}