{"pageProps":{"frontMatter":{"title":"Global Hooks","label":"Globals","order":30,"desc":"Hooks can be added to any Global and allow you to validate data, flatten locales, hide protected fields, remove fields and more.","keywords":"hooks, globals, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, nextjs"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    code: \"code\",\n    pre: \"pre\",\n    strong: \"strong\",\n    h2: \"h2\",\n    h3: \"h3\",\n    ol: \"ol\",\n    li: \"li\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"Global Hooks are \", _jsx(_components.a, {\n        href: \"./overview\",\n        children: \"Hooks\"\n      }), \" that run on \", _jsx(_components.a, {\n        href: \"../configuration/globals\",\n        children: \"Global\"\n      }), \" Documents. They allow you to execute your own logic during specific events of the Document lifecycle.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To add Hooks to a Global, use the \", _jsx(_components.code, {\n        children: \"hooks\"\n      }), \" property in your \", _jsx(_components.a, {\n        href: \"../configuration/globals\",\n        children: \"Global Config\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { GlobalConfig } from 'payload'\\n\\nexport const GlobalWithHooks: GlobalConfig = {\\n  // ...\\n  hooks: {\\n    // highlight-line\\n    // ...\\n  },\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"info\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Tip:\"\n        }), \" You can also set hooks on the field-level to isolate hook logic to\\nspecific fields. \", _jsx(_components.a, {\n          href: \"./fields\",\n          children: \"More details\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Config Options\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"All Global Hooks accept an array of \", _jsx(_components.a, {\n        href: \"./overview#async-vs-synchronous\",\n        children: \"synchronous or asynchronous functions\"\n      }), \". Each Global Hook receives specific arguments based on its own type, and has the ability to modify specific outputs.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { GlobalConfig } from 'payload';\\n\\nconst GlobalWithHooks: GlobalConfig = {\\n  // ...\\n  // highlight-start\\n  hooks: {\\n    beforeValidate: [(args) => {...}],\\n    beforeChange: [(args) => {...}],\\n    beforeRead: [(args) => {...}],\\n    afterChange: [(args) => {...}],\\n    afterRead: [(args) => {...}],\\n  }\\n  // highlight-end\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"beforeValidate\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Runs during the \", _jsx(_components.code, {\n        children: \"update\"\n      }), \" operation. This hook allows you to add or format data before the incoming data is validated server-side.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Please do note that this does not run before client-side validation. If you render a custom field component in your front-end and provide it with a \", _jsx(_components.code, {\n        children: \"validate\"\n      }), \" function, the order that validations will run in is:\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"validate\"\n        }), \" runs on the client\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"if successful, \", _jsx(_components.code, {\n          children: \"beforeValidate\"\n        }), \" runs on the server\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"validate\"\n        }), \" runs on the server\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { GlobalBeforeValidateHook } from 'payload'\\n\\nconst beforeValidateHook: GlobalBeforeValidateHook = async ({\\n  data,\\n  req,\\n  originalDoc,\\n}) => {\\n  return data\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The following arguments are provided to the \", _jsx(_components.code, {\n        children: \"beforeValidate\"\n      }), \" hook:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"global\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The \", _jsx(_components.a, {\n              href: \"../configuration/globals\",\n              children: \"Global\"\n            }), \" in which this Hook is running against.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"context\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Custom context passed between Hooks. \", _jsx(_components.a, {\n              href: \"./context\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"data\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The incoming data passed through the operation.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"originalDoc\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The Document before changes are applied.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"req\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The \", _jsx(_components.a, {\n              href: \"https://developer.mozilla.org/en-US/docs/Web/API/Request\",\n              children: \"Web Request\"\n            }), \" object. This is mocked for \", _jsx(_components.a, {\n              href: \"../local-api/overview\",\n              children: \"Local API\"\n            }), \" operations.\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"beforeChange\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Immediately following validation, \", _jsx(_components.code, {\n        children: \"beforeChange\"\n      }), \" hooks will run within the \", _jsx(_components.code, {\n        children: \"update\"\n      }), \" operation. At this stage, you can be confident that the data that will be saved to the document is valid in accordance to your field validations. You can optionally modify the shape of data to be saved.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { GlobalBeforeChangeHook } from 'payload'\\n\\nconst beforeChangeHook: GlobalBeforeChangeHook = async ({\\n  data,\\n  req,\\n  originalDoc,\\n}) => {\\n  return data\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The following arguments are provided to the \", _jsx(_components.code, {\n        children: \"beforeChange\"\n      }), \" hook:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"global\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The \", _jsx(_components.a, {\n              href: \"../configuration/globals\",\n              children: \"Global\"\n            }), \" in which this Hook is running against.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"context\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Custom context passed between hooks. \", _jsx(_components.a, {\n              href: \"./context\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"data\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The incoming data passed through the operation.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"originalDoc\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The Document before changes are applied.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"req\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The \", _jsx(_components.a, {\n              href: \"https://developer.mozilla.org/en-US/docs/Web/API/Request\",\n              children: \"Web Request\"\n            }), \" object. This is mocked for \", _jsx(_components.a, {\n              href: \"../local-api/overview\",\n              children: \"Local API\"\n            }), \" operations.\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"afterChange\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"After a global is updated, the \", _jsx(_components.code, {\n        children: \"afterChange\"\n      }), \" hook runs. Use this hook to purge caches of your applications, sync site data to CRMs, and more.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { GlobalAfterChangeHook } from 'payload'\\n\\nconst afterChangeHook: GlobalAfterChangeHook = async ({\\n  doc,\\n  previousDoc,\\n  req,\\n}) => {\\n  return data\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The following arguments are provided to the \", _jsx(_components.code, {\n        children: \"afterChange\"\n      }), \" hook:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"global\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The \", _jsx(_components.a, {\n              href: \"../configuration/globals\",\n              children: \"Global\"\n            }), \" in which this Hook is running against.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"context\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Custom context passed between hooks. \", _jsx(_components.a, {\n              href: \"./context\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"doc\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The resulting Document after changes are applied.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"previousDoc\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The Document before changes were applied.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"req\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The \", _jsx(_components.a, {\n              href: \"https://developer.mozilla.org/en-US/docs/Web/API/Request\",\n              children: \"Web Request\"\n            }), \" object. This is mocked for \", _jsx(_components.a, {\n              href: \"../local-api/overview\",\n              children: \"Local API\"\n            }), \" operations.\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"beforeRead\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Runs before \", _jsx(_components.code, {\n        children: \"findOne\"\n      }), \" global operation is transformed for output by \", _jsx(_components.code, {\n        children: \"afterRead\"\n      }), \". This hook fires before hidden fields are removed and before localized fields are flattened into the requested locale. Using this Hook will provide you with all locales and all hidden fields via the \", _jsx(_components.code, {\n        children: \"doc\"\n      }), \" argument.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { GlobalBeforeReadHook } from 'payload'\\n\\nconst beforeReadHook: GlobalBeforeReadHook = async ({\\n  doc,\\n  req,\\n}) => {...}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The following arguments are provided to the \", _jsx(_components.code, {\n        children: \"beforeRead\"\n      }), \" hook:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"global\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The \", _jsx(_components.a, {\n              href: \"../configuration/globals\",\n              children: \"Global\"\n            }), \" in which this Hook is running against.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"context\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Custom context passed between hooks. \", _jsx(_components.a, {\n              href: \"./context\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"doc\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The resulting Document after changes are applied.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"req\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The \", _jsx(_components.a, {\n              href: \"https://developer.mozilla.org/en-US/docs/Web/API/Request\",\n              children: \"Web Request\"\n            }), \" object. This is mocked for \", _jsx(_components.a, {\n              href: \"../local-api/overview\",\n              children: \"Local API\"\n            }), \" operations.\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"afterRead\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Runs as the last step before a global is returned. Flattens locales, hides protected fields, and removes fields that users do not have access to.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { GlobalAfterReadHook } from 'payload'\\n\\nconst afterReadHook: GlobalAfterReadHook = async ({\\n  doc,\\n  req,\\n  findMany,\\n}) => {...}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The following arguments are provided to the \", _jsx(_components.code, {\n        children: \"beforeRead\"\n      }), \" hook:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"global\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The \", _jsx(_components.a, {\n              href: \"../configuration/globals\",\n              children: \"Global\"\n            }), \" in which this Hook is running against.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"context\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Custom context passed between hooks. \", _jsx(_components.a, {\n              href: \"./context\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"findMany\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Boolean to denote if this hook is running against finding one, or finding many (useful in versions).\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"doc\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The resulting Document after changes are applied.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"query\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The \", _jsx(_components.a, {\n              href: \"../queries/overview\",\n              children: \"Query\"\n            }), \" of the request.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"req\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The \", _jsx(_components.a, {\n              href: \"https://developer.mozilla.org/en-US/docs/Web/API/Request\",\n              children: \"Web Request\"\n            }), \" object. This is mocked for \", _jsx(_components.a, {\n              href: \"../local-api/overview\",\n              children: \"Local API\"\n            }), \" operations.\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"TypeScript\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Payload exports a type for each Global hook which can be accessed as follows:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type {\\n  GlobalBeforeValidateHook,\\n  GlobalBeforeChangeHook,\\n  GlobalAfterChangeHook,\\n  GlobalBeforeReadHook,\\n  GlobalAfterReadHook,\\n} from 'payload'\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}},"__N_SSG":true}