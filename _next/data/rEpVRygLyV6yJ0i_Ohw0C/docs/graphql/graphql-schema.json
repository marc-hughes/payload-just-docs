{"pageProps":{"frontMatter":{"title":"GraphQL Schema","label":"GraphQL Schema","order":30,"desc":"Output your own GraphQL schema based on your collections and globals to a file.","keywords":"headless cms, typescript, documentation, Content Management System, cms, headless, javascript, node, react, nextjs"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    code: \"code\",\n    pre: \"pre\",\n    h3: \"h3\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"In Payload the schema is controlled by your collections and globals. All you need to do is run the generate command and the entire schema will be created for you.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Schema generation script\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Install \", _jsx(_components.code, {\n        children: \"@payloadcms/graphql\"\n      }), \" as a dev dependency:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"pnpm add @payloadcms/graphql -D\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Run the following command to generate the schema:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"pnpm payload-graphql generate:schema\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Custom Field Schemas\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For \", _jsx(_components.code, {\n        children: \"array\"\n      }), \", \", _jsx(_components.code, {\n        children: \"block\"\n      }), \", \", _jsx(_components.code, {\n        children: \"group\"\n      }), \" and named \", _jsx(_components.code, {\n        children: \"tab\"\n      }), \" fields, you can generate top level reusable interfaces. The following group field config:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"{\\n  type: 'group',\\n  name: 'meta',\\n  interfaceName: 'SharedMeta', // highlight-line\\n  fields: [\\n    {\\n      name: 'title',\\n      type: 'text',\\n    },\\n    {\\n      name: 'description',\\n      type: 'text',\\n    },\\n  ],\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"will generate:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"// A top level reusable type will be generated\\ntype SharedMeta {\\n  title: String\\n  description: String\\n}\\n\\n// And will be referenced inside the generated schema\\ntype Collection1 {\\n  // ...other fields\\n  meta: SharedMeta\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The above example outputs all your definitions to a file relative from your Payload config as \", _jsx(_components.code, {\n        children: \"./graphql/schema.graphql\"\n      }), \". By default, the file will be output to your current working directory as \", _jsx(_components.code, {\n        children: \"schema.graphql\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Adding an npm script\"\n    }), \"\\n\", _jsxs(Banner, {\n      type: \"warning\",\n      children: [_jsx(_components.p, {\n        children: _jsx(_components.strong, {\n          children: \"Important\"\n        })\n      }), _jsx(_components.p, {\n        children: \"Payload needs to be able to find your config to generate your GraphQL schema.\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Payload will automatically try and locate your config, but might not always be able to find it. For example, if you are working in a \", _jsx(_components.code, {\n        children: \"/src\"\n      }), \" directory or similar, you need to tell Payload where to find your config manually by using an environment variable.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If this applies to you, create an npm script to make generating types easier:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-json\",\n        children: \"// package.json\\n\\n{\\n  \\\"scripts\\\": {\\n    \\\"generate:graphQLSchema\\\": \\\"cross-env PAYLOAD_CONFIG_PATH=src/payload.config.ts payload-graphql generate:schema\\\"\\n  }\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Now you can run \", _jsx(_components.code, {\n        children: \"pnpm generate:graphQLSchema\"\n      }), \" to easily generate your schema.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}},"__N_SSG":true}