{"pageProps":{"frontMatter":{"title":"Preview","label":"Preview","order":30,"desc":"Enable links to your front-end to preview published or draft content.","keywords":"admin, components, preview, documentation, Content Management System, cms, headless, javascript, node, react, nextjs"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    strong: \"strong\",\n    code: \"code\",\n    pre: \"pre\",\n    h2: \"h2\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    h3: \"h3\",\n    h4: \"h4\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"Preview is a feature that allows you to generate a direct link to your front-end application. When enabled, a \\\"preview\\\" button will appear on the Edit View within the \", _jsx(_components.a, {\n        href: \"./overview\",\n        children: \"Admin Panel\"\n      }), \" with an href pointing to the URL you provide. This will provide your editors with a quick way of navigating to the front-end application where that Document's data is represented. Otherwise, they'd have to determine that URL themselves which is not always straightforward especially in complex apps.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The Preview feature can also be used to achieve something known as \\\"Draft Preview\\\". With Draft Preview, you can navigate to your front-end application and enter \\\"draft mode\\\", where your queries are modified to fetch draft content instead of published content. This is useful for seeing how your content will look before being published. \", _jsx(_components.a, {\n        href: \"#draft-preview\",\n        children: \"More details\"\n      }), \".\"]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Note:\"\n        }), \" Preview is different than \", _jsx(_components.a, {\n          href: \"../live-preview/overview\",\n          children: \"Live Preview\"\n        }), \".\\nLive Preview loads your app within an iframe and renders it in the Admin Panel\\nallowing you to see changes in real-time. Preview, on the other hand, allows\\nyou to generate a direct link to your front-end application.\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To add Preview, pass a function to the \", _jsx(_components.code, {\n        children: \"admin.preview\"\n      }), \" property in any \", _jsx(_components.a, {\n        href: \"../configuration/collections#admin-options\",\n        children: \"Collection Config\"\n      }), \" or \", _jsx(_components.a, {\n        href: \"../configuration/globals#admin-options\",\n        children: \"Global Config\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { CollectionConfig } from 'payload'\\n\\nexport const Pages: CollectionConfig = {\\n  slug: 'pages',\\n  admin: {\\n    preview: ({ slug }) => `http://localhost:3000/${slug}`,\\n  },\\n  fields: [\\n    {\\n      name: 'slug',\\n      type: 'text',\\n    },\\n  ],\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Options\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"preview\"\n      }), \" function resolves to a string that points to your front-end application with additional URL parameters. This can be an absolute URL or a relative path, and can run async if needed.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The following arguments are provided to the \", _jsx(_components.code, {\n        children: \"preview\"\n      }), \" function:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Path\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"doc\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The data of the Document being edited. This includes changes that have not yet been saved.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"options\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"An object with additional properties.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"options\"\n      }), \" object contains the following properties:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Path\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"locale\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The current locale of the Document being edited.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"req\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The Payload Request object.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"token\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The JWT token of the currently authenticated in user.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If your application requires a fully qualified URL, such as within deploying to Vercel Preview Deployments, you can use the \", _jsx(_components.code, {\n        children: \"req\"\n      }), \" property to build this URL:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"preview: (doc, { req }) => `${req.protocol}//${req.host}/${doc.slug}` // highlight-line\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Draft Preview\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The Preview feature can be used to achieve \\\"Draft Preview\\\". After clicking the preview button from the Admin Panel, you can enter into \\\"draft mode\\\" within your front-end application. This will allow you to adjust your page queries to include the \", _jsx(_components.code, {\n        children: \"draft: true\"\n      }), \" param. When this param is present on the request, Payload will send back a draft document as opposed to a published one based on the document's \", _jsx(_components.code, {\n        children: \"_status\"\n      }), \" field.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To enter draft mode, the URL provided to the \", _jsx(_components.code, {\n        children: \"preview\"\n      }), \" function can point to a custom endpoint in your front-end application that sets a cookie or session variable to indicate that draft mode is enabled. This is framework specific, so the mechanisms here very from framework to framework although the underlying concept is the same.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Next.js\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you're using Next.js, you can do the following code to enter \", _jsx(_components.a, {\n        href: \"https://nextjs.org/docs/app/building-your-application/configuring/draft-mode\",\n        children: \"Draft Mode\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Step 1: Format the Preview URL\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"First, format your \", _jsx(_components.code, {\n        children: \"admin.preview\"\n      }), \" function to point to a custom endpoint that you'll open on your front-end. This URL should include a few key query search params:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { CollectionConfig } from 'payload'\\n\\nexport const Pages: CollectionConfig = {\\n  slug: 'pages',\\n  admin: {\\n    preview: ({ slug, collection }) => {\\n      const encodedParams = new URLSearchParams({\\n        slug,\\n        collection,\\n        path: `/${slug}`,\\n        previewSecret: process.env.PREVIEW_SECRET || '',\\n      })\\n\\n      return `/preview?${encodedParams.toString()}` // highlight-line\\n    },\\n  },\\n  fields: [\\n    {\\n      name: 'slug',\\n      type: 'text',\\n    },\\n  ],\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Step 2: Create the Preview Route\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Then, create an API route that verifies the preview secret, authenticates the user, and enters draft mode:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"/app/preview/route.ts\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { CollectionSlug, PayloadRequest } from 'payload'\\nimport { getPayload } from 'payload'\\n\\nimport { draftMode } from 'next/headers'\\nimport { redirect } from 'next/navigation'\\n\\nimport configPromise from '@payload-config'\\n\\nexport async function GET(\\n  req: {\\n    cookies: {\\n      get: (name: string) => {\\n        value: string\\n      }\\n    }\\n  } & Request,\\n): Promise<Response> {\\n  const payload = await getPayload({ config: configPromise })\\n\\n  const { searchParams } = new URL(req.url)\\n\\n  const path = searchParams.get('path')\\n  const collection = searchParams.get('collection') as CollectionSlug\\n  const slug = searchParams.get('slug')\\n  const previewSecret = searchParams.get('previewSecret')\\n\\n  if (previewSecret !== process.env.PREVIEW_SECRET) {\\n    return new Response('You are not allowed to preview this page', {\\n      status: 403,\\n    })\\n  }\\n\\n  if (!path || !collection || !slug) {\\n    return new Response('Insufficient search params', { status: 404 })\\n  }\\n\\n  if (!path.startsWith('/')) {\\n    return new Response(\\n      'This endpoint can only be used for relative previews',\\n      { status: 500 },\\n    )\\n  }\\n\\n  let user\\n\\n  try {\\n    user = await payload.auth({\\n      req: req as unknown as PayloadRequest,\\n      headers: req.headers,\\n    })\\n  } catch (error) {\\n    payload.logger.error(\\n      { err: error },\\n      'Error verifying token for live preview',\\n    )\\n    return new Response('You are not allowed to preview this page', {\\n      status: 403,\\n    })\\n  }\\n\\n  const draft = await draftMode()\\n\\n  if (!user) {\\n    draft.disable()\\n    return new Response('You are not allowed to preview this page', {\\n      status: 403,\\n    })\\n  }\\n\\n  // You can add additional checks here to see if the user is allowed to preview this page\\n\\n  draft.enable()\\n\\n  redirect(path)\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Step 3: Query Draft Content\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Finally, in your front-end application, you can detect draft mode and adjust your queries to include drafts:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"/app/[slug]/page.tsx\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"export default async function Page({ params: paramsPromise }) {\\n  const { slug = 'home' } = await paramsPromise\\n\\n  const { isEnabled: isDraftMode } = await draftMode()\\n\\n  const payload = await getPayload({ config })\\n\\n  const page = await payload.find({\\n    collection: 'pages',\\n    depth: 0,\\n    draft: isDraftMode, // highlight-line\\n    limit: 1,\\n    overrideAccess: isDraftMode,\\n    where: {\\n      slug: {\\n        equals: slug,\\n      },\\n    },\\n  })?.then(({ docs }) => docs?.[0])\\n\\n  if (page === null) {\\n    return notFound()\\n  }\\n\\n  return (\\n    <main>\\n      <h1>{page?.title}</h1>\\n    </main>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"success\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Note:\"\n        }), \" For fully working example of this, check of the official \", _jsx(_components.a, {\n          href: \"https://github.com/payloadcms/payload/tree/main/examples/draft-preview\",\n          children: \"Draft\\nPreview\\nExample\"\n        }), \"\\nin the \", _jsx(_components.a, {\n          href: \"https://github.com/payloadcms/payload/tree/main/examples\",\n          children: \"Examples\\nDirectory\"\n        }), \".\"]\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}},"__N_SSG":true}