{"pageProps":{"frontMatter":{"title":"Customizing CSS & SCSS","label":"Customizing CSS","order":50,"desc":"Customize the Payload Admin Panel further by adding your own CSS or SCSS style sheet to the configuration, powerful theme and design options are waiting for you.","keywords":"admin, css, scss, documentation, Content Management System, cms, headless, javascript, node, react, nextjs"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    ol: \"ol\",\n    li: \"li\",\n    h2: \"h2\",\n    code: \"code\",\n    pre: \"pre\",\n    strong: \"strong\",\n    h3: \"h3\",\n    ul: \"ul\",\n    h4: \"h4\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"Customizing the Payload \", _jsx(_components.a, {\n        href: \"./overview\",\n        children: \"Admin Panel\"\n      }), \" through CSS alone is one of the easiest and most powerful ways to customize the look and feel of the dashboard. To allow for this level of customization, Payload:\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Exposes a \", _jsx(_components.a, {\n          href: \"#global-css\",\n          children: \"root-level stylesheet\"\n        }), \" for you to inject custom selectors\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Provides a \", _jsx(_components.a, {\n          href: \"#css-library\",\n          children: \"CSS library\"\n        }), \" that can be easily overridden or extended\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Uses \", _jsx(_components.a, {\n          href: \"http://getbem.com\",\n          children: \"BEM naming conventions\"\n        }), \" so that class names are globally accessible\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To customize the CSS within the Admin UI, determine scope and change you'd like to make, and then add your own CSS or SCSS to the configuration as needed.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Global CSS\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Global CSS refers to the CSS that is applied to the entire \", _jsx(_components.a, {\n        href: \"./overview\",\n        children: \"Admin Panel\"\n      }), \". This is where you can have a significant impact to the look and feel of the Admin UI through just a few lines of code.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can add your own global CSS through the root \", _jsx(_components.code, {\n        children: \"custom.scss\"\n      }), \" file of your app. This file is loaded into the root of the Admin Panel and can be used to inject custom selectors or styles however needed.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here is an example of how you might target the Dashboard View and change the background color:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-scss\",\n        children: \".dashboard {\\n  background-color: red; // highlight-line\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Note:\"\n        }), \" If you are building \", _jsx(_components.a, {\n          href: \"../custom-components/overview\",\n          children: \"Custom\\nComponents\"\n        }), \", it is best to import your own\\nstylesheets directly into your components, rather than using the global\\nstylesheet. You can continue to use the \", _jsx(_components.a, {\n          href: \"#css-library\",\n          children: \"CSS library\"\n        }), \" as needed.\"]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Specificity rules\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"All Payload CSS is encapsulated inside CSS layers under \", _jsx(_components.code, {\n        children: \"@layer payload-default\"\n      }), \". Any custom css will now have the highest possible specificity.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We have also provided a layer \", _jsx(_components.code, {\n        children: \"@layer payload\"\n      }), \" if you want to use layers and ensure that your styles are applied after payload.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To override existing styles in a way that the previous rules of specificity would be respected you can use the default layer like so\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-css\",\n        children: \"@layer payload-default {\\n  // my styles within the Payload specificity\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Re-using Payload SCSS variables and utilities\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can re-use Payload's SCSS variables and utilities in your own stylesheets by importing it from the UI package.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-scss\",\n        children: \"@import '~@payloadcms/ui/scss';\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"CSS Library\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To make it as easy as possible for you to override default styles, Payload uses \", _jsx(_components.a, {\n        href: \"http://getbem.com/\",\n        children: \"BEM naming conventions\"\n      }), \" for all CSS within the Admin UI. If you provide your own CSS, you can override any built-in styles easily, including targeting nested components and their various component states.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can also override Payload's built-in \", _jsx(_components.a, {\n        href: \"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties\",\n        children: \"CSS Variables\"\n      }), \". These variables are widely consumed by the Admin Panel, so modifying them has a significant impact on the look and feel of the Admin UI.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The following variables are defined and can be overridden:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://github.com/payloadcms/payload/blob/main/packages/ui/src/scss/queries.scss\",\n          children: \"Breakpoints\"\n        })\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"https://github.com/payloadcms/payload/blob/main/packages/ui/src/scss/colors.scss\",\n          children: \"Colors\"\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"Base color shades (white to black by default)\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"Success / warning / error color shades\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"Theme-specific colors (background, input background, text color, etc.)\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"Elevation colors (used to determine how \\\"bright\\\" something should be when compared to the background)\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"https://github.com/payloadcms/payload/blob/main/packages/ui/src/scss/app.scss\",\n          children: \"Sizing\"\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"Horizontal gutter\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"Transition speeds\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"Font sizes\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"Etc.\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For an up-to-date, comprehensive list of all available variables, please refer to the \", _jsx(_components.a, {\n        href: \"https://github.com/payloadcms/payload/blob/main/packages/ui/src/scss\",\n        children: \"Source Code\"\n      }), \".\"]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Warning:\"\n        }), \" If you're overriding colors or theme elevations, make sure to\\nconsider how \", _jsx(_components.a, {\n          href: \"#dark-mode\",\n          children: \"your changes will affect dark mode\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Dark Mode\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Colors are designed to automatically adapt to theme of the \", _jsx(_components.a, {\n        href: \"./overview\",\n        children: \"Admin Panel\"\n      }), \". By default, Payload automatically overrides all \", _jsx(_components.code, {\n        children: \"--theme-elevation\"\n      }), \" colors and inverts all success / warning / error shades to suit dark mode. We also update some base theme variables like \", _jsx(_components.code, {\n        children: \"--theme-bg\"\n      }), \", \", _jsx(_components.code, {\n        children: \"--theme-text\"\n      }), \", etc.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}},"__N_SSG":true}