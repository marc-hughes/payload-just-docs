{"pageProps":{"frontMatter":{"title":"React Hooks","label":"React Hooks","order":50,"desc":"Make use of all of the powerful React hooks that Payload provides.","keywords":"admin, components, custom, documentation, Content Management System, cms, headless, javascript, node, react, nextjs"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    strong: \"strong\",\n    h2: \"h2\",\n    code: \"code\",\n    pre: \"pre\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    em: \"em\",\n    h4: \"h4\",\n    ol: \"ol\",\n    li: \"li\"\n  }, _provideComponents(), props.components), {Banner, TableWithDrawers} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  if (!TableWithDrawers) _missingMdxReference(\"TableWithDrawers\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"Payload provides a variety of powerful \", _jsx(_components.a, {\n        href: \"https://react.dev/reference/react-dom/hooks\",\n        children: \"React Hooks\"\n      }), \" that can be used within your own \", _jsx(_components.a, {\n        href: \"../custom-components/overview\",\n        children: \"Custom Components\"\n      }), \", such as \", _jsx(_components.a, {\n        href: \"../fields/overview#custom-components\",\n        children: \"Custom Fields\"\n      }), \". With them, you can interface with Payload itself to build just about any type of complex customization you can think of.\"]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Reminder:\"\n        }), \" All Custom Components are \", _jsx(_components.a, {\n          href: \"https://react.dev/reference/rsc/server-components\",\n          children: \"React Server\\nComponents\"\n        }), \" by default.\\nHooks, on the other hand, are only available in client-side environments. To\\nuse hooks, \", _jsx(_components.a, {\n          href: \"../custom-components/overview#client-components\",\n          children: \"ensure your component is a client\\ncomponent\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"useField\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"useField\"\n      }), \" hook is used internally within all field components. It manages sending and receiving a field's state from its parent form. When you build a \", _jsx(_components.a, {\n        href: \"../fields/overview#custom-components\",\n        children: \"Custom Field Component\"\n      }), \", you will be responsible for sending and receiving the field's \", _jsx(_components.code, {\n        children: \"value\"\n      }), \" to and from the form yourself.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To do so, import the \", _jsx(_components.code, {\n        children: \"useField\"\n      }), \" hook as follows:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"'use client'\\nimport type { TextFieldClientComponent } from 'payload'\\nimport { useField } from '@payloadcms/ui'\\n\\nexport const CustomTextField: TextFieldClientComponent = ({ path }) => {\\n  const { value, setValue } = useField({ path }) // highlight-line\\n\\n  return (\\n    <div>\\n      <p>{path}</p>\\n      <input\\n        onChange={(e) => {\\n          setValue(e.target.value)\\n        }}\\n        value={value}\\n      />\\n    </div>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"useField\"\n      }), \" hook accepts the following arguments:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Property\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"path\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"If you do not provide a \", _jsx(_components.code, {\n              children: \"path\"\n            }), \", \", _jsx(_components.code, {\n              children: \"name\"\n            }), \" will be used instead. This is the path to the field in the form data.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"validate\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"A validation function executed client-side \", _jsx(_components.em, {\n              children: \"before\"\n            }), \" submitting the form to the server. Different than \", _jsx(_components.a, {\n              href: \"../fields/overview#validation\",\n              children: \"Field-level Validation\"\n            }), \" which runs strictly on the server.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"disableFormData\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"If \", _jsx(_components.code, {\n              children: \"true\"\n            }), \", the field will not be included in the form data when the form is submitted.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"hasRows\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"If \", _jsx(_components.code, {\n              children: \"true\"\n            }), \", the field will be treated as a field with rows. This is useful for fields like \", _jsx(_components.code, {\n              children: \"array\"\n            }), \" and \", _jsx(_components.code, {\n              children: \"blocks\"\n            }), \".\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"useField\"\n      }), \" hook returns the following object:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"type FieldType<T> = {\\n  errorMessage?: string\\n  errorPaths?: string[]\\n  filterOptions?: FilterOptionsResult\\n  formInitializing: boolean\\n  formProcessing: boolean\\n  formSubmitted: boolean\\n  initialValue?: T\\n  path: string\\n  permissions: FieldPermissions\\n  readOnly?: boolean\\n  rows?: Row[]\\n  schemaPath: string\\n  setValue: (val: unknown, disableModifyingForm?: boolean) => void\\n  showError: boolean\\n  valid?: boolean\\n  value: T\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"useFormFields\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"There are times when a custom field component needs to have access to data from other fields, and you have a few options to do so. The \", _jsx(_components.code, {\n        children: \"useFormFields\"\n      }), \" hook is a powerful and highly performant way to retrieve a form's field state, as well as to retrieve the \", _jsx(_components.code, {\n        children: \"dispatchFields\"\n      }), \" method, which can be helpful for setting other fields' form states from anywhere within a form.\"]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"success\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"This hook is great for retrieving only certain fields from form state\"\n        }), \"\\nbecause it ensures that it will only cause a rerender when the items that you\\nask for change.\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Thanks to the awesome package \", _jsx(_components.a, {\n        href: \"https://github.com/dai-shi/use-context-selector\",\n        children: _jsx(_components.code, {\n          children: \"use-context-selector\"\n        })\n      }), \", you can retrieve a specific field's state easily. This is ideal because you can ensure you have an up-to-date field state, and your component will only re-render when \", _jsx(_components.em, {\n        children: \"that field's state\"\n      }), \" changes.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can pass a Redux-like selector into the hook, which will ensure that you retrieve only the field that you want. The selector takes an argument with type of \", _jsx(_components.code, {\n        children: \"[fields: Fields, dispatch: React.Dispatch<Action>]]\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"'use client'\\nimport { useFormFields } from '@payloadcms/ui'\\n\\nconst MyComponent: React.FC = () => {\\n  // Get only the `amount` field state, and only cause a rerender when that field changes\\n  const amount = useFormFields(([fields, dispatch]) => fields.amount)\\n\\n  // Do the same thing as above, but to the `feePercentage` field\\n  const feePercentage = useFormFields(\\n    ([fields, dispatch]) => fields.feePercentage,\\n  )\\n\\n  if (\\n    typeof amount?.value !== 'undefined' &&\\n    typeof feePercentage?.value !== 'undefined'\\n  ) {\\n    return <span>The fee is ${(amount.value * feePercentage.value) / 100}</span>\\n  }\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"useAllFormFields\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"To retrieve more than one field\"\n      }), \", you can use the \", _jsx(_components.code, {\n        children: \"useAllFormFields\"\n      }), \" hook. Your component will re-render when \", _jsx(_components.em, {\n        children: \"any\"\n      }), \" field changes, so use this hook only if you absolutely need to. Unlike the \", _jsx(_components.code, {\n        children: \"useFormFields\"\n      }), \" hook, this hook does not accept a \\\"selector\\\", and it always returns an array with type of \", _jsx(_components.code, {\n        children: \"[fields: Fields, dispatch: React.Dispatch<Action>]]\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can do lots of powerful stuff by retrieving the full form state, like using built-in helper functions to reduce field state to values only, or to retrieve sibling data by path.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"'use client'\\nimport { useAllFormFields } from '@payloadcms/ui'\\nimport { reduceFieldsToValues, getSiblingData } from 'payload/shared'\\n\\nconst ExampleComponent: React.FC = () => {\\n  // the `fields` const will be equal to all fields' state,\\n  // and the `dispatchFields` method is usable to send field state up to the form\\n  const [fields, dispatchFields] = useAllFormFields();\\n\\n  // Pass in fields, and indicate if you'd like to \\\"unflatten\\\" field data.\\n  // The result below will reflect the data stored in the form at the given time\\n  const formData = reduceFieldsToValues(fields, true);\\n\\n  // Pass in field state and a path,\\n  // and you will be sent all sibling data of the path that you've specified\\n  const siblingData = getSiblingData(fields, 'someFieldName');\\n\\n  return (\\n    // return some JSX here if necessary\\n  )\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Updating other fields' values\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you are building a Custom Component, then you should use \", _jsx(_components.code, {\n        children: \"setValue\"\n      }), \" which is returned from the \", _jsx(_components.code, {\n        children: \"useField\"\n      }), \" hook to programmatically set your field's value. But if you're looking to update \", _jsx(_components.em, {\n        children: \"another\"\n      }), \" field's value, you can use \", _jsx(_components.code, {\n        children: \"dispatchFields\"\n      }), \" returned from \", _jsx(_components.code, {\n        children: \"useAllFormFields\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can send the following actions to the \", _jsx(_components.code, {\n        children: \"dispatchFields\"\n      }), \" function.\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Action\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"ADD_ROW\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Adds a row of data (useful in array / block field data)\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"DUPLICATE_ROW\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Duplicates a row of data (useful in array / block field data)\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"MODIFY_CONDITION\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Updates a field's conditional logic result (true / false)\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"MOVE_ROW\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Moves a row of data (useful in array / block field data)\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"REMOVE\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Removes a field from form state\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"REMOVE_ROW\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Removes a row of data from form state (useful in array / block field data)\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"REPLACE_STATE\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Completely replaces form state\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"UPDATE\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Update any property of a specific field's state\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To see types for each action supported within the \", _jsx(_components.code, {\n        children: \"dispatchFields\"\n      }), \" hook, check out the Form types \", _jsx(_components.a, {\n        href: \"https://github.com/payloadcms/payload/blob/main/packages/ui/src/forms/Form/types.ts\",\n        children: \"here\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"useForm\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"useForm\"\n      }), \" hook can be used to interact with the form itself, and sends back many methods that can be used to reactively fetch form state without causing rerenders within your components each time a field is changed. This is useful if you have action-based callbacks that your components fire, and need to interact with form state \", _jsx(_components.em, {\n        children: \"based on a user action\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(Banner, {\n      type: \"warning\",\n      children: [_jsx(_components.p, {\n        children: _jsx(_components.strong, {\n          children: \"Warning:\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"This hook is optimized to avoid causing rerenders when fields change, and as such, its \", _jsx(_components.code, {\n          children: \"fields\"\n        }), \"\\nproperty will be out of date. You should only leverage this hook if you need to perform actions\\nagainst the form in response to your users' actions. Do not rely on its returned \\\"fields\\\" as being\\nup-to-date. They will be removed from this hook's response in an upcoming version.\"]\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"useForm\"\n      }), \" hook returns an object with the following properties:\"]\n    }), \"\\n\", _jsx(TableWithDrawers, {\n      columns: ['Action', 'Description', 'Example'],\n      rows: [[{\n        value: \"**`fields`**\"\n      }, {\n        value: \"Deprecated. This property cannot be relied on as up-to-date.\"\n      }, {\n        value: ''\n      }], [{\n        value: \"**`submit`**\"\n      }, {\n        value: \"Method to trigger the form to submit\"\n      }, {\n        value: ''\n      }], [{\n        value: \"**`dispatchFields`**\"\n      }, {\n        value: \"Dispatch actions to the form field state\"\n      }, {\n        value: ''\n      }], [{\n        value: \"**`validateForm`**\"\n      }, {\n        value: \"Trigger a validation of the form state\"\n      }, {\n        value: ''\n      }], [{\n        value: \"**`createFormData`**\"\n      }, {\n        value: \"Create a `multipart/form-data` object from the current form's state\"\n      }, {\n        value: ''\n      }], [{\n        value: \"**`disabled`**\"\n      }, {\n        value: \"Boolean denoting whether or not the form is disabled\"\n      }, {\n        value: ''\n      }], [{\n        value: \"**`getFields`**\"\n      }, {\n        value: 'Gets all fields from state'\n      }, {\n        value: ''\n      }], [{\n        value: \"**`getField`**\"\n      }, {\n        value: 'Gets a single field from state by path'\n      }, {\n        value: ''\n      }], [{\n        value: \"**`getData`**\"\n      }, {\n        value: 'Returns the data stored in the form'\n      }, {\n        value: ''\n      }], [{\n        value: \"**`getSiblingData`**\"\n      }, {\n        value: 'Returns form sibling data for the given field path'\n      }, {\n        value: ''\n      }], [{\n        value: \"**`setModified`**\"\n      }, {\n        value: \"Set the form\\'s `modified` state\"\n      }, {\n        value: ''\n      }], [{\n        value: \"**`setProcessing`**\"\n      }, {\n        value: \"Set the form\\'s `processing` state\"\n      }, {\n        value: ''\n      }], [{\n        value: \"**`setSubmitted`**\"\n      }, {\n        value: \"Set the form\\'s `submitted` state\"\n      }, {\n        value: ''\n      }], [{\n        value: \"**`formRef`**\"\n      }, {\n        value: 'The ref from the form HTML element'\n      }, {\n        value: ''\n      }], [{\n        value: \"**`reset`**\"\n      }, {\n        value: 'Method to reset the form to its initial state'\n      }, {\n        value: ''\n      }], [{\n        value: \"**`addFieldRow`**\"\n      }, {\n        value: \"Method to add a row on an array or block field\"\n      }, {\n        drawerTitle: 'addFieldRow',\n        drawerDescription: 'A useful method to programmatically add a row to an array or block field.',\n        drawerSlug: 'addFieldRow',\n        drawerContent: `\n  <TableWithDrawers\n    columns={[\n      'Prop',\n      'Description',\n    ]}\n    rows={[\n      [\n        {\n          value: \"**\\\\\\`path\\\\\\`**\",\n        },\n        {\n          value: \"The path to the array or block field\",\n        },\n      ],\n      [\n        {\n          value: \"**\\\\\\`rowIndex\\\\\\`**\",\n        },\n        {\n          value: \"The index of the row to add. If omitted, the row will be added to the end of the array.\",\n        },\n      ],\n      [\n        {\n          value: \"**\\\\\\`data\\\\\\`**\",\n        },\n        {\n          value: \"The data to add to the row\",\n        },\n      ],\n    ]}\n  />\n\n\\`\\`\\`tsx\nimport { useForm } from \"@payloadcms/ui\"\n\nexport const CustomArrayManager = () => {\n  const { addFieldRow } = useForm()\n\nreturn (\n\n<button\n  type=\"button\"\n  onClick={() => {\n    addFieldRow({\n      path: 'arrayField',\n      schemaPath: 'arrayField',\n      rowIndex: 0, // optionally specify the index to add the row at\n      subFieldState: {\n        textField: {\n          initialValue: 'New row text',\n          valid: true,\n          value: 'New row text',\n        },\n      },\n      // blockType: \"yourBlockSlug\",\n      // ^ if managing a block array, you need to specify the block type\n    })\n  }}\n>\n  Add Row\n</button>\n) } \\`\\`\\`\n\nAn example config to go along with the Custom Component\n\n\\`\\`\\`tsx\nconst ExampleCollection = {\nslug: \"example-collection\",\nfields: [\n{\nname: \"arrayField\",\ntype: \"array\",\nfields: [\n{\nname: \"textField\",\ntype: \"text\",\n},\n],\n},\n{\ntype: \"ui\",\nname: \"customArrayManager\",\nadmin: {\ncomponents: {\nField: '/path/to/CustomArrayManagerField',\n},\n},\n},\n],\n}\n\\`\\`\\`\n`\n      }], [{\n        value: \"**`removeFieldRow`**\"\n      }, {\n        value: \"Method to remove a row from an array or block field\"\n      }, {\n        drawerTitle: 'removeFieldRow',\n        drawerDescription: 'A useful method to programmatically remove a row from an array or block field.',\n        drawerSlug: 'removeFieldRow',\n        drawerContent: `\n\n<TableWithDrawers\n  columns={['Prop', 'Description']}\n  rows={[\n    [\n      {\n        value: '**\\\\\\`path\\\\\\`**',\n      },\n      {\n        value: 'The path to the array or block field',\n      },\n    ],\n    [\n      {\n        value: '**\\\\\\`rowIndex\\\\\\`**',\n      },\n      {\n        value: 'The index of the row to remove',\n      },\n    ],\n  ]}\n/>\n\n\\`\\`\\`tsx\nimport { useForm } from \"@payloadcms/ui\"\n\nexport const CustomArrayManager = () => {\n  const { removeFieldRow } = useForm()\n\nreturn (\n\n<button\n  type=\"button\"\n  onClick={() => {\n    removeFieldRow({\n      path: 'arrayField',\n      rowIndex: 0,\n    })\n  }}\n>\n  Remove Row\n</button>\n) } \\`\\`\\`\n\nAn example config to go along with the Custom Component\n\n\\`\\`\\`tsx\nconst ExampleCollection = {\nslug: \"example-collection\",\nfields: [\n{\nname: \"arrayField\",\ntype: \"array\",\nfields: [\n{\nname: \"textField\",\ntype: \"text\",\n},\n],\n},\n{\ntype: \"ui\",\nname: \"customArrayManager\",\nadmin: {\ncomponents: {\nField: '/path/to/CustomArrayManagerField',\n},\n},\n},\n],\n}\n\\`\\`\\`\n`\n      }], [{\n        value: \"**`replaceFieldRow`**\"\n      }, {\n        value: \"Method to replace a row from an array or block field\"\n      }, {\n        drawerTitle: 'replaceFieldRow',\n        drawerDescription: 'A useful method to programmatically replace a row from an array or block field.',\n        drawerSlug: 'replaceFieldRow',\n        drawerContent: `\n\n<TableWithDrawers\n  columns={['Prop', 'Description']}\n  rows={[\n    [\n      {\n        value: '**\\\\\\`path\\\\\\`**',\n      },\n      {\n        value: 'The path to the array or block field',\n      },\n    ],\n    [\n      {\n        value: '**\\\\\\`rowIndex\\\\\\`**',\n      },\n      {\n        value: 'The index of the row to replace',\n      },\n    ],\n    [\n      {\n        value: '**\\\\\\`data\\\\\\`**',\n      },\n      {\n        value: 'The data to replace within the row',\n      },\n    ],\n  ]}\n/>\n\n\\`\\`\\`tsx\nimport { useForm } from \"@payloadcms/ui\"\n\nexport const CustomArrayManager = () => {\n  const { replaceFieldRow } = useForm()\n\nreturn (\n\n<button\n  type=\"button\"\n  onClick={() => {\n    replaceFieldRow({\n      path: 'arrayField',\n      schemaPath: 'arrayField',\n      rowIndex: 0, // optionally specify the index to add the row at\n      subFieldState: {\n        textField: {\n          initialValue: 'Updated text',\n          valid: true,\n          value: 'Upddated text',\n        },\n      },\n      // blockType: \"yourBlockSlug\",\n      // ^ if managing a block array, you need to specify the block type\n    })\n  }}\n>\n  Replace Row\n</button>\n) } \\`\\`\\`\n\nAn example config to go along with the Custom Component\n\n\\`\\`\\`tsx\nconst ExampleCollection = {\nslug: \"example-collection\",\nfields: [\n{\nname: \"arrayField\",\ntype: \"array\",\nfields: [\n{\nname: \"textField\",\ntype: \"text\",\n},\n],\n},\n{\ntype: \"ui\",\nname: \"customArrayManager\",\nadmin: {\ncomponents: {\nField: '/path/to/CustomArrayManagerField',\n},\n},\n},\n],\n}\n\\`\\`\\`\n`\n      }]]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"useDocumentForm\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"useDocumentForm\"\n      }), \" hook works the same way as the \", _jsx(_components.a, {\n        href: \"#useform\",\n        children: \"useForm\"\n      }), \" hook, but it always gives you access to the top-level \", _jsx(_components.code, {\n        children: \"Form\"\n      }), \" of a document. This is useful if you need to access the document's \", _jsx(_components.code, {\n        children: \"Form\"\n      }), \" context from within a child \", _jsx(_components.code, {\n        children: \"Form\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"An example where this could happen would be custom components within lexical blocks, as lexical blocks initialize their own child \", _jsx(_components.code, {\n        children: \"Form\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"'use client'\\n\\nimport { useDocumentForm } from '@payloadcms/ui'\\n\\nconst MyComponent: React.FC = () => {\\n  const { fields: parentDocumentFields } = useDocumentForm()\\n\\n  return (\\n    <p>\\n      The document's Form has ${Object.keys(parentDocumentFields).length} fields\\n    </p>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"useCollapsible\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"useCollapsible\"\n      }), \" hook allows you to control parent collapsibles:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Property\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"isCollapsed\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"State of the collapsible. \", _jsx(_components.code, {\n              children: \"true\"\n            }), \" if open, \", _jsx(_components.code, {\n              children: \"false\"\n            }), \" if collapsed.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"isVisible\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"If nested, determine if the nearest collapsible is visible. \", _jsx(_components.code, {\n              children: \"true\"\n            }), \" if no parent is closed, \", _jsx(_components.code, {\n              children: \"false\"\n            }), \" otherwise.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"toggle\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Toggles the state of the nearest collapsible.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"isWithinCollapsible\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Determine when you are within another collapsible.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"'use client'\\nimport React from 'react'\\n\\nimport { useCollapsible } from '@payloadcms/ui'\\n\\nconst CustomComponent: React.FC = () => {\\n  const { isCollapsed, toggle } = useCollapsible()\\n\\n  return (\\n    <div>\\n      <p className=\\\"field-type\\\">I am {isCollapsed ? 'closed' : 'open'}</p>\\n      <button onClick={toggle} type=\\\"button\\\">\\n        Toggle\\n      </button>\\n    </div>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"useDocumentInfo\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"useDocumentInfo\"\n      }), \" hook provides information about the current document being edited, including the following:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Property\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"action\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The URL attached to the action attribute on the underlying form element, which specifies where to send the form data when the form is submitted.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"apiURL\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The API URL for the current document.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"collectionSlug\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The slug of the collection if editing a collection document.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"currentEditor\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The user currently editing the document.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"docConfig\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Either the Collection or Global config of the document, depending on what is being edited.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"docPermissions\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The current document's permissions. Fallback to collection permissions when no id is present.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"documentIsLocked\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Whether the document is currently locked by another user. \", _jsx(_components.a, {\n              href: \"./locked-documents\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"getDocPermissions\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Method to retrieve document-level permissions.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"getDocPreferences\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Method to retrieve document-level user preferences. \", _jsx(_components.a, {\n              href: \"./preferences\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"globalSlug\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The slug of the global if editing a global document.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hasPublishedDoc\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Whether the document has a published version.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hasPublishPermission\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Whether the current user has permission to publish the document.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hasSavePermission\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Whether the current user has permission to save the document.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"id\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"If the doc is a collection, its ID will be returned.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"incrementVersionCount\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Method to increment the version count of the document.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"initialData\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The initial data of the document.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"isEditing\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Whether the document is being edited (as opposed to created).\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"isInitializing\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Whether the document info is still initializing.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"isLocked\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Whether the document is locked. \", _jsx(_components.a, {\n              href: \"./locked-documents\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"lastUpdateTime\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Timestamp of the last update to the document.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"mostRecentVersionIsAutosaved\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Whether the most recent version is an autosaved version.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"preferencesKey\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The \", _jsx(_components.code, {\n              children: \"preferences\"\n            }), \" key to use when interacting with document-level user preferences. \", _jsx(_components.a, {\n              href: \"./preferences\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"savedDocumentData\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The saved data of the document.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"setDocFieldPreferences\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Method to set preferences for a specific field. \", _jsx(_components.a, {\n              href: \"./preferences\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"setDocumentTitle\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Method to set the document title.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"setHasPublishedDoc\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Method to update whether the document has been published.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"title\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The title of the document.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"unlockDocument\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Method to unlock a document. \", _jsx(_components.a, {\n              href: \"./locked-documents\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"unpublishedVersionCount\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The number of unpublished versions of the document.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"updateDocumentEditor\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Method to update who is currently editing the document. \", _jsx(_components.a, {\n              href: \"./locked-documents\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"updateSavedDocumentData\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Method to update the saved document data.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"uploadStatus\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Status of any uploads in progress ('idle', 'uploading', or 'failed').\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"versionCount\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The current version count of the document.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"'use client'\\nimport { useDocumentInfo } from '@payloadcms/ui'\\n\\nconst LinkFromCategoryToPosts: React.FC = () => {\\n  // highlight-start\\n  const { id } = useDocumentInfo()\\n  // highlight-end\\n\\n  // id will be undefined on the create form\\n  if (!id) {\\n    return null\\n  }\\n\\n  return (\\n    <a\\n      href={`/admin/collections/posts?where[or][0][and][0][category][in][0]=[${id}]`}\\n    >\\n      View posts\\n    </a>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"useListQuery\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"useListQuery\"\n      }), \" hook is used to subscribe to the data, current query, and other properties used within the List View. You can use this hook within any Custom Component rendered within the List View.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"'use client'\\nimport { useListQuery } from '@payloadcms/ui'\\n\\nconst MyComponent: React.FC = () => {\\n  // highlight-start\\n  const { data, query } = useListQuery()\\n  // highlight-end\\n\\n  // ...\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"useListQuery\"\n      }), \" hook returns an object with the following properties:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Property\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"data\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The data that is being displayed in the List View.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"defaultLimit\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The default limit of items to display in the List View.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"defaultSort\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The default sort order of items in the List View.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"handlePageChange\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"A method to handle page changes in the List View.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"handlePerPageChange\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"A method to handle per page changes in the List View.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"handleSearchChange\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"A method to handle search changes in the List View.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"handleSortChange\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"A method to handle sort changes in the List View.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"handleWhereChange\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"A method to handle where changes in the List View.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"modified\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Whether the query has been changed from its \", _jsx(_components.a, {\n              href: \"../query-presets/overview\",\n              children: \"Query Preset\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"query\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The current query that is being used to fetch the data in the List View.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"useSelection\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"useSelection\"\n      }), \" hook provides information on the selected rows in the List view as well as helper methods to simplify selection. The \", _jsx(_components.code, {\n        children: \"useSelection\"\n      }), \" hook returns an object with the following properties:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Property\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"count\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The number of currently selected rows.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"getQueryParams\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"A function that generates a query string based on the current selection state and optional additional filtering parameters.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"selectAll\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"An enum value representing the selection range: \", _jsx(_components.code, {\n              children: \"'allAvailable'\"\n            }), \", \", _jsx(_components.code, {\n              children: \"'allInPage'\"\n            }), \", \", _jsx(_components.code, {\n              children: \"'none'\"\n            }), \", and \", _jsx(_components.code, {\n              children: \"'some'\"\n            }), \". The enum, \", _jsx(_components.code, {\n              children: \"SelectAllStatus\"\n            }), \", is exported for easier comparisons.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"selected\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"A map of document id keys and boolean values representing their selection status.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"setSelection\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"A function that toggles the selection status of a document row.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"toggleAll\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"A function that toggles selection for all documents on the current page or selects all available documents when passed \", _jsx(_components.code, {\n              children: \"true\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"totalDocs\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The number of total documents in the collection.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"'use client'\\nimport { useSelection } from '@payloadcms/ui'\\n\\nconst MyComponent: React.FC = () => {\\n  // highlight-start\\n  const { count, toggleAll, totalDocs } = useSelection()\\n  // highlight-end\\n\\n  return (\\n    <>\\n      <span>\\n        Selected {count} out of {totalDocs} docs!\\n      </span>\\n      <button type=\\\"button\\\" onClick={() => toggleAll(true)}>\\n        Toggle All Selections\\n      </button>\\n    </>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"useLocale\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In any Custom Component you can get the selected locale object with the \", _jsx(_components.code, {\n        children: \"useLocale\"\n      }), \" hook. \", _jsx(_components.code, {\n        children: \"useLocale\"\n      }), \" gives you the full locale object, consisting of a \", _jsx(_components.code, {\n        children: \"label\"\n      }), \", \", _jsx(_components.code, {\n        children: \"rtl\"\n      }), \"(right-to-left) property, and then \", _jsx(_components.code, {\n        children: \"code\"\n      }), \". Here is a simple example:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"'use client'\\nimport { useLocale } from '@payloadcms/ui'\\n\\nconst Greeting: React.FC = () => {\\n  // highlight-start\\n  const locale = useLocale()\\n  // highlight-end\\n\\n  const trans = {\\n    en: 'Hello',\\n    es: 'Hola',\\n  }\\n\\n  return <span> {trans[locale.code]} </span>\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"useAuth\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Useful to retrieve info about the currently logged in user as well as methods for interacting with it. It sends back an object with the following properties:\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Property\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"user\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The currently logged in user\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"logOut\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"A method to log out the currently logged in user\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"refreshCookie\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"A method to trigger the silent refreshing of a user's auth token\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"setToken\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Set the token of the user, to be decoded and used to reset the user and token in memory\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"token\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The logged in user's token (useful for creating preview links, etc.)\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"refreshPermissions\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Load new permissions (useful when content that effects permissions has been changed)\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"permissions\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The permissions of the current user\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"'use client'\\nimport { useAuth } from '@payloadcms/ui'\\nimport type { User } from '../payload-types.ts'\\n\\nconst Greeting: React.FC = () => {\\n  // highlight-start\\n  const { user } = useAuth<User>()\\n  // highlight-end\\n\\n  return <span>Hi, {user.email}!</span>\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"useConfig\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Used to retrieve the Payload \", _jsx(_components.a, {\n        href: \"../custom-components/overview#accessing-the-payload-config\",\n        children: \"Client Config\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"'use client'\\nimport { useConfig } from '@payloadcms/ui'\\n\\nconst MyComponent: React.FC = () => {\\n  // highlight-start\\n  const { config } = useConfig()\\n  // highlight-end\\n\\n  return <span>{config.serverURL}</span>\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you need to retrieve a specific collection or global config by its slug, \", _jsx(_components.code, {\n        children: \"getEntityConfig\"\n      }), \" is the most efficient way to do so:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"'use client'\\nimport { useConfig } from '@payloadcms/ui'\\n\\nconst MyComponent: React.FC = () => {\\n  // highlight-start\\n  const { getEntityConfig } = useConfig()\\n  const mediaConfig = getEntityConfig({ collectionSlug: 'media' })\\n  // highlight-end\\n\\n  return (\\n    <span>The media collection has {mediaConfig.fields.length} fields.</span>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"useEditDepth\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Sends back how many editing levels \\\"deep\\\" the current component is. Edit depth is relevant while adding new documents / editing documents in modal windows and other cases.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"'use client'\\nimport { useEditDepth } from '@payloadcms/ui'\\n\\nconst MyComponent: React.FC = () => {\\n  // highlight-start\\n  const editDepth = useEditDepth()\\n  // highlight-end\\n\\n  return <span>My component is {editDepth} levels deep</span>\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"usePreferences\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Returns methods to set and get user preferences. More info can be found \", _jsx(_components.a, {\n        href: \"https://payloadcms.com/docs/admin/preferences\",\n        children: \"here\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"useTheme\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Returns the currently selected theme (\", _jsx(_components.code, {\n        children: \"light\"\n      }), \", \", _jsx(_components.code, {\n        children: \"dark\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"auto\"\n      }), \"), a set function to update it and a boolean \", _jsx(_components.code, {\n        children: \"autoMode\"\n      }), \", used to determine if the theme value should be set automatically based on the user's device preferences.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"'use client'\\nimport { useTheme } from '@payloadcms/ui'\\n\\nconst MyComponent: React.FC = () => {\\n  // highlight-start\\n  const { autoMode, setTheme, theme } = useTheme()\\n  // highlight-end\\n\\n  return (\\n    <>\\n      <span>\\n        The current theme is {theme} and autoMode is {autoMode}\\n      </span>\\n      <button\\n        type=\\\"button\\\"\\n        onClick={() =>\\n          setTheme((prev) => (prev === 'light' ? 'dark' : 'light'))\\n        }\\n      >\\n        Toggle theme\\n      </button>\\n    </>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"useTableColumns\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Returns methods to manipulate table columns\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"'use client'\\nimport { useTableColumns } from '@payloadcms/ui'\\n\\nconst MyComponent: React.FC = () => {\\n  // highlight-start\\n  const { setActiveColumns } = useTableColumns()\\n\\n  const resetColumns = () => {\\n    setActiveColumns(['id', 'createdAt', 'updatedAt'])\\n  }\\n  // highlight-end\\n\\n  return (\\n    <button type=\\\"button\\\" onClick={resetColumns}>\\n      Reset columns\\n    </button>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"useDocumentEvents\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"useDocumentEvents\"\n      }), \" hook provides a way of subscribing to cross-document events, such as updates made to nested documents within a drawer. This hook will report document events that are outside the scope of the document currently being edited. This hook provides the following:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Property\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"mostRecentUpdate\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"An object containing the most recently updated document. It contains the \", _jsx(_components.code, {\n              children: \"entitySlug\"\n            }), \", \", _jsx(_components.code, {\n              children: \"id\"\n            }), \" (if collection), and \", _jsx(_components.code, {\n              children: \"updatedAt\"\n            }), \" properties\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"reportUpdate\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"A method used to report updates to documents. It accepts the same arguments as the \", _jsx(_components.code, {\n              children: \"mostRecentUpdate\"\n            }), \" property.\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"'use client'\\nimport { useDocumentEvents } from '@payloadcms/ui'\\n\\nconst ListenForUpdates: React.FC = () => {\\n  const { mostRecentUpdate } = useDocumentEvents()\\n\\n  return <span>{JSON.stringify(mostRecentUpdate)}</span>\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"info\",\n      children: _jsxs(_components.p, {\n        children: [\"Right now the \", _jsx(_components.code, {\n          children: \"useDocumentEvents\"\n        }), \" hook only tracks recently updated documents,\\nbut in the future it will track more document-related events as needed, such\\nas document creation, deletion, etc.\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"useStepNav\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"useStepNav\"\n      }), \" hook provides a way to change the step-nav breadcrumb links in the app header.\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Property\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"setStepNav\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"A state setter function which sets the \", _jsx(_components.code, {\n              children: \"stepNav\"\n            }), \" array.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"stepNav\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"A \", _jsx(_components.code, {\n              children: \"StepNavItem\"\n            }), \" array where each \", _jsx(_components.code, {\n              children: \"StepNavItem\"\n            }), \" has a label and optionally a url.\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"'use client'\\nimport { type StepNavItem, useStepNav } from '@payloadcms/ui'\\nimport { useEffect } from 'react'\\n\\nexport const MySetStepNavComponent: React.FC<{\\n  nav: StepNavItem[]\\n}> = ({ nav }) => {\\n  const { setStepNav } = useStepNav()\\n\\n  useEffect(() => {\\n    setStepNav(nav)\\n  }, [setStepNav, nav])\\n\\n  return null\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"usePayloadAPI\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"usePayloadAPI\"\n      }), \" hook is a useful tool for making REST API requests to your Payload instance and handling responses reactively. It allows you to fetch and interact with data while automatically updating when parameters change.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This hook returns an array with two elements:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"An object containing the API response.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"A set of methods to modify request parameters.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"'use client'\\nimport { usePayloadAPI } from '@payloadcms/ui'\\n\\nconst MyComponent: React.FC = () => {\\n  // Fetch data from a collection item using its ID\\n  const [{ data, isError, isLoading }, { setParams }] = usePayloadAPI(\\n    '/api/posts/123',\\n    {\\n      initialParams: { depth: 1 },\\n    },\\n  )\\n\\n  if (isLoading) return <p>Loading...</p>\\n  if (isError) return <p>Error occurred while fetching data.</p>\\n\\n  return (\\n    <div>\\n      <h1>{data?.title}</h1>\\n      <button onClick={() => setParams({ cacheBust: Date.now() })}>\\n        Refresh Data\\n      </button>\\n    </div>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Arguments:\"\n      })\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Property\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"url\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The API endpoint to fetch data from. Relative URLs will be prefixed with the Payload API route.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"options\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"An object containing initial request parameters and initial state configuration.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"options\"\n      }), \" argument accepts the following properties:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Property\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"initialData\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Uses this data instead of making an initial request. If not provided, the request runs immediately.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"initialParams\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Defines the initial parameters to use in the request. Defaults to an empty object \", _jsx(_components.code, {\n              children: \"{}\"\n            }), \".\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Returned Value:\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The first item in the returned array is an object containing the following properties:\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Property\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"data\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The API response data.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"isError\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"A boolean indicating whether the request failed.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"isLoading\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"A boolean indicating whether the request is in progress.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The second item is an object with the following methods:\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Property\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsx(_components.tbody, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"setParams\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Updates request parameters, triggering a refetch if needed.\"\n          })]\n        })\n      })]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Updating Data\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"setParams\"\n      }), \" function can be used to update the request and trigger a refetch:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"setParams({ depth: 2 })\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This is useful for scenarios where you need to trigger another fetch regardless of the \", _jsx(_components.code, {\n        children: \"url\"\n      }), \" argument changing.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"useRouteTransition\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Route transitions are useful in showing immediate visual feedback to the user when navigating between pages. This is especially useful on slow networks when navigating to data heavy or process intensive pages.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By default, any instances of \", _jsx(_components.code, {\n        children: \"Link\"\n      }), \" from \", _jsx(_components.code, {\n        children: \"@payloadcms/ui\"\n      }), \" will trigger route transitions dy default.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Link } from '@payloadcms/ui'\\n\\nconst MyComponent = () => {\\n  return <Link href=\\\"/somewhere\\\">Go Somewhere</Link>\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can also trigger route transitions programmatically, such as when using \", _jsx(_components.code, {\n        children: \"router.push\"\n      }), \" from \", _jsx(_components.code, {\n        children: \"next/router\"\n      }), \". To do this, wrap your function calls with the \", _jsx(_components.code, {\n        children: \"startRouteTransition\"\n      }), \" method provided by the \", _jsx(_components.code, {\n        children: \"useRouteTransition\"\n      }), \" hook.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"'use client'\\nimport React, { useCallback } from 'react'\\nimport { useTransition } from '@payloadcms/ui'\\nimport { useRouter } from 'next/navigation'\\n\\nconst MyComponent: React.FC = () => {\\n  const router = useRouter()\\n  const { startRouteTransition } = useRouteTransition()\\n\\n  const redirectSomewhere = useCallback(() => {\\n    startRouteTransition(() => router.push('/somewhere'))\\n  }, [startRouteTransition, router])\\n\\n  // ...\\n}\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}},"__N_SSG":true}