{"pageProps":{"frontMatter":{"title":"Converting Markdown","label":"Converting Markdown","order":23,"desc":"Converting between lexical richtext and Markdown / MDX","keywords":"lexical, richtext, markdown, md, mdx"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\"\n  }, _provideComponents(), props.components), {LightDarkImage} = _components;\n  if (!LightDarkImage) _missingMdxReference(\"LightDarkImage\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Converting Richtext to Markdown\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you have access to the Payload Config and the \", _jsx(_components.a, {\n        href: \"/docs/rich-text/converters#retrieving-the-editor-config\",\n        children: \"lexical editor config\"\n      }), \", you can convert the lexical editor state to Markdown with the following:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { SerializedEditorState } from '@payloadcms/richtext-lexical/lexical'\\n\\nimport {\\n  convertLexicalToMarkdown,\\n  editorConfigFactory,\\n} from '@payloadcms/richtext-lexical'\\n\\n// Your richtext data here\\nconst data: SerializedEditorState = {}\\n\\nconst markdown = convertLexicalToMarkdown({\\n  data,\\n  editorConfig: await editorConfigFactory.default({\\n    config, // <= make sure you have access to your Payload Config\\n  }),\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Example - outputting Markdown from the Collection\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { SerializedEditorState } from '@payloadcms/richtext-lexical/lexical'\\nimport type { CollectionConfig, RichTextField } from 'payload'\\n\\nimport {\\n  convertLexicalToMarkdown,\\n  editorConfigFactory,\\n  lexicalEditor,\\n} from '@payloadcms/richtext-lexical'\\n\\nconst Pages: CollectionConfig = {\\n  slug: 'pages',\\n  fields: [\\n    {\\n      name: 'nameOfYourRichTextField',\\n      type: 'richText',\\n      editor: lexicalEditor(),\\n    },\\n    {\\n      name: 'markdown',\\n      type: 'textarea',\\n      admin: {\\n        hidden: true,\\n      },\\n      hooks: {\\n        afterRead: [\\n          ({ siblingData, siblingFields }) => {\\n            const data: SerializedEditorState =\\n              siblingData['nameOfYourRichTextField']\\n\\n            if (!data) {\\n              return ''\\n            }\\n\\n            const markdown = convertLexicalToMarkdown({\\n              data,\\n              editorConfig: editorConfigFactory.fromField({\\n                field: siblingFields.find(\\n                  (field) =>\\n                    'name' in field && field.name === 'nameOfYourRichTextField',\\n                ) as RichTextField,\\n              }),\\n            })\\n\\n            return markdown\\n          },\\n        ],\\n        beforeChange: [\\n          ({ siblingData }) => {\\n            // Ensure that the markdown field is not saved in the database\\n            delete siblingData['markdown']\\n            return null\\n          },\\n        ],\\n      },\\n    },\\n  ],\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Converting Markdown to Richtext\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you have access to the Payload Config and the \", _jsx(_components.a, {\n        href: \"/docs/rich-text/converters#retrieving-the-editor-config\",\n        children: \"lexical editor config\"\n      }), \", you can convert Markdown to the lexical editor state with the following:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import {\\n  convertMarkdownToLexical,\\n  editorConfigFactory,\\n} from '@payloadcms/richtext-lexical'\\n\\nconst lexicalJSON = convertMarkdownToLexical({\\n  editorConfig: await editorConfigFactory.default({\\n    config, // <= make sure you have access to your Payload Config\\n  }),\\n  markdown: '# Hello world\\\\n\\\\nThis is a **test**.',\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Converting MDX\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Payload supports serializing and deserializing MDX content. While Markdown converters are stored on the features, MDX converters are stored on the blocks that you pass to the \", _jsx(_components.code, {\n        children: \"BlocksFeature\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Defining a Custom Block\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here is an example of a \", _jsx(_components.code, {\n        children: \"Banner\"\n      }), \" block.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This block:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Renders in the admin UI as a normal Lexical block with specific fields (e.g. type, content).\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Converts to an MDX \", _jsx(_components.code, {\n          children: \"Banner\"\n        }), \" component.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Can parse that MDX \", _jsx(_components.code, {\n          children: \"Banner\"\n        }), \" back into a Lexical state.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(LightDarkImage, {\n      srcLight: \"https://payloadcms.com/images/docs/mdx-example-light.png\",\n      srcDark: \"https://payloadcms.com/images/docs/mdx-example-dark.png\",\n      alt: \"Shows the Banner field in a lexical editor and the MDX output\",\n      caption: \"Banner field in a lexical editor and the MDX output\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { SerializedEditorState } from '@payloadcms/richtext-lexical/lexical'\\nimport type { Block, CollectionConfig, RichTextField } from 'payload'\\n\\nimport {\\n  BlocksFeature,\\n  convertLexicalToMarkdown,\\n  editorConfigFactory,\\n  lexicalEditor,\\n} from '@payloadcms/richtext-lexical'\\n\\nconst BannerBlock: Block = {\\n  slug: 'Banner',\\n  fields: [\\n    {\\n      name: 'type',\\n      type: 'select',\\n      defaultValue: 'info',\\n      options: [\\n        { label: 'Info', value: 'info' },\\n        { label: 'Warning', value: 'warning' },\\n        { label: 'Error', value: 'error' },\\n      ],\\n    },\\n    {\\n      name: 'content',\\n      type: 'richText',\\n      editor: lexicalEditor(),\\n    },\\n  ],\\n  jsx: {\\n    /**\\n     * Convert from Lexical -> MDX:\\n     * <Banner type=\\\"...\\\" >child content</Banner>\\n     */\\n    export: ({ fields, lexicalToMarkdown }) => {\\n      const props: any = {}\\n      if (fields.type) {\\n        props.type = fields.type\\n      }\\n\\n      return {\\n        children: lexicalToMarkdown({ editorState: fields.content }),\\n        props,\\n      }\\n    },\\n    /**\\n     * Convert from MDX -> Lexical:\\n     */\\n    import: ({ children, markdownToLexical, props }) => {\\n      return {\\n        type: props?.type,\\n        content: markdownToLexical({ markdown: children }),\\n      }\\n    },\\n  },\\n}\\n\\nconst Pages: CollectionConfig = {\\n  slug: 'pages',\\n  fields: [\\n    {\\n      name: 'nameOfYourRichTextField',\\n      type: 'richText',\\n      editor: lexicalEditor({\\n        features: ({ defaultFeatures }) => [\\n          ...defaultFeatures,\\n          BlocksFeature({\\n            blocks: [BannerBlock],\\n          }),\\n        ],\\n      }),\\n    },\\n    {\\n      name: 'markdown',\\n      type: 'textarea',\\n      hooks: {\\n        afterRead: [\\n          ({ siblingData, siblingFields }) => {\\n            const data: SerializedEditorState =\\n              siblingData['nameOfYourRichTextField']\\n\\n            if (!data) {\\n              return ''\\n            }\\n\\n            const markdown = convertLexicalToMarkdown({\\n              data,\\n              editorConfig: editorConfigFactory.fromField({\\n                field: siblingFields.find(\\n                  (field) =>\\n                    'name' in field && field.name === 'nameOfYourRichTextField',\\n                ) as RichTextField,\\n              }),\\n            })\\n\\n            return markdown\\n          },\\n        ],\\n        beforeChange: [\\n          ({ siblingData }) => {\\n            // Ensure that the markdown field is not saved in the database\\n            delete siblingData['markdown']\\n            return null\\n          },\\n        ],\\n      },\\n    },\\n  ],\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The conversion is done using the \", _jsx(_components.code, {\n        children: \"jsx\"\n      }), \" property of the block. The \", _jsx(_components.code, {\n        children: \"export\"\n      }), \" function is called when converting from lexical to MDX, and the \", _jsx(_components.code, {\n        children: \"import\"\n      }), \" function is called when converting from MDX to lexical.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Export\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"export\"\n      }), \" function takes the block field data and the \", _jsx(_components.code, {\n        children: \"lexicalToMarkdown\"\n      }), \" function as arguments. It returns the following object:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Property\"\n          }), _jsx(_components.th, {\n            children: \"Type\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"children\"\n            })\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"This will be in between the opening and closing tags of the block.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"props\"\n            })\n          }), _jsx(_components.td, {\n            children: \"object\"\n          }), _jsx(_components.td, {\n            children: \"This will be in the opening tag of the block.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Import\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"import\"\n      }), \" function provides data extracted from the MDX. It takes the following arguments:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Argument\"\n          }), _jsx(_components.th, {\n            children: \"Type\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"children\"\n            })\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"This will be the text between the opening and closing tags of the block.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"props\"\n            })\n          }), _jsx(_components.td, {\n            children: \"object\"\n          }), _jsx(_components.td, {\n            children: \"These are the props passed to the block, parsed from the opening tag into an object.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The returning object is equal to the block field data.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}},"__N_SSG":true}