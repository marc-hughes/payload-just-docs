{"pageProps":{"frontMatter":{"title":"Authentication Emails","label":"Email Verification","order":30,"desc":"Email Verification allows users to verify their email address before they're account is fully activated. Email Verification ties directly into the Email functionality that Payload provides.","keywords":"authentication, email, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, nextjs"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    code: \"code\",\n    pre: \"pre\",\n    strong: \"strong\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    h4: \"h4\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"./overview\",\n        children: \"Authentication\"\n      }), \" ties directly into the \", _jsx(_components.a, {\n        href: \"../email/overview\",\n        children: \"Email\"\n      }), \" functionality that Payload provides. This allows you to send emails to users for verification, password resets, and more. While Payload provides default email templates for these actions, you can customize them to fit your brand.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Email Verification\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Email Verification forces users to prove they have access to the email address they can authenticate. This will help to reduce spam accounts and ensure that users are who they say they are.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To enable Email Verification, use the \", _jsx(_components.code, {\n        children: \"auth.verify\"\n      }), \" property on your \", _jsx(_components.a, {\n        href: \"../configuration/collections\",\n        children: \"Collection Config\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { CollectionConfig } from 'payload'\\n\\nexport const Customers: CollectionConfig = {\\n  // ...\\n  auth: {\\n    verify: true, // highlight-line\\n  },\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"info\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Tip:\"\n        }), \" Verification emails are fully customizable. \", _jsx(_components.a, {\n          href: \"#generateemailhtml\",\n          children: \"More\\ndetails\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The following options are available:\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"generateEmailHTML\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Allows for overriding the HTML within emails that are sent to users indicating how to validate their account. \", _jsx(_components.a, {\n              href: \"#generateemailhtml\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"generateEmailSubject\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Allows for overriding the subject of the email that is sent to users indicating how to validate their account. \", _jsx(_components.a, {\n              href: \"#generateemailsubject\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"generateEmailHTML\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Function that accepts one argument, containing \", _jsx(_components.code, {\n        children: \"{ req, token, user }\"\n      }), \", that allows for overriding the HTML within emails that are sent to users indicating how to validate their account. The function should return a string that supports HTML, which can optionally be a full HTML email.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { CollectionConfig } from 'payload'\\n\\nexport const Customers: CollectionConfig = {\\n  // ...\\n  auth: {\\n    verify: {\\n      // highlight-start\\n      generateEmailHTML: ({ req, token, user }) => {\\n        // Use the token provided to allow your user to verify their account\\n        const url = `https://yourfrontend.com/verify?token=${token}`\\n\\n        return `Hey ${user.email}, verify your email by clicking here: ${url}`\\n      },\\n      // highlight-end\\n    },\\n  },\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Important:\"\n        }), \" If you specify a different URL to send your users to for email\\nverification, such as a page on the frontend of your app or similar, you need\\nto handle making the call to the Payload REST or GraphQL verification\\noperation yourself on your frontend, using the token that was provided for\\nyou. Above, it was passed via query parameter.\"]\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"generateEmailSubject\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Similarly to the above \", _jsx(_components.code, {\n        children: \"generateEmailHTML\"\n      }), \", you can also customize the subject of the email. The function argument are the same but you can only return a string - not HTML.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { CollectionConfig } from 'payload'\\n\\nexport const Customers: CollectionConfig = {\\n  // ...\\n  auth: {\\n    verify: {\\n      // highlight-start\\n      generateEmailSubject: ({ req, user }) => {\\n        return `Hey ${user.email}, reset your password!`\\n      },\\n      // highlight-end\\n    },\\n  },\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Forgot Password\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can customize how the Forgot Password workflow operates with the following options on the \", _jsx(_components.code, {\n        children: \"auth.forgotPassword\"\n      }), \" property:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { CollectionConfig } from 'payload'\\n\\nexport const Customers: CollectionConfig = {\\n  // ...\\n  auth: {\\n    forgotPassword: {\\n      // highlight-line\\n      // ...\\n    },\\n  },\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The following options are available:\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"expiration\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Configure how long password reset tokens remain valid, specified in milliseconds.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"generateEmailHTML\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Allows for overriding the HTML within emails that are sent to users attempting to reset their password. \", _jsx(_components.a, {\n              href: \"#generateEmailHTML\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"generateEmailSubject\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Allows for overriding the subject of the email that is sent to users attempting to reset their password. \", _jsx(_components.a, {\n              href: \"#generateEmailSubject\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"generateEmailHTML\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This function allows for overriding the HTML within emails that are sent to users attempting to reset their password. The function should return a string that supports HTML, which can be a full HTML email.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { CollectionConfig } from 'payload'\\n\\nexport const Customers: CollectionConfig = {\\n  // ...\\n  auth: {\\n    forgotPassword: {\\n      // highlight-start\\n      generateEmailHTML: ({ req, token, user }) => {\\n        // Use the token provided to allow your user to reset their password\\n        const resetPasswordURL = `https://yourfrontend.com/reset-password?token=${token}`\\n\\n        return `\\n          <!doctype html>\\n          <html>\\n            <body>\\n              <h1>Here is my custom email template!</h1>\\n              <p>Hello, ${user.email}!</p>\\n              <p>Click below to reset your password.</p>\\n              <p>\\n                <a href=\\\"${resetPasswordURL}\\\">${resetPasswordURL}</a>\\n              </p>\\n            </body>\\n          </html>\\n        `\\n      },\\n      // highlight-end\\n    },\\n  },\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Important:\"\n        }), \" If you specify a different URL to send your users to for\\nresetting their password, such as a page on the frontend of your app or\\nsimilar, you need to handle making the call to the Payload REST or GraphQL\\nreset-password operation yourself on your frontend, using the token that was\\nprovided for you. Above, it was passed via query parameter.\"]\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"success\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Tip:\"\n        }), \" HTML templating can be used to create custom email templates, inline\\nCSS automatically, and more. You can make a reusable function that\\nstandardizes all email sent from Payload, which makes sending custom emails\\nmore DRY. Payload doesn't ship with an HTML templating engine, so you are free\\nto choose your own.\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The following arguments are passed to the \", _jsx(_components.code, {\n        children: \"generateEmailHTML\"\n      }), \" function:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Argument\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"req\"\n            })\n          }), _jsx(_components.td, {\n            children: \"The request object.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"token\"\n            })\n          }), _jsx(_components.td, {\n            children: \"The token that is generated for the user to reset their password.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"user\"\n            })\n          }), _jsx(_components.td, {\n            children: \"The user document that is attempting to reset their password.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"generateEmailSubject\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Similarly to the above \", _jsx(_components.code, {\n        children: \"generateEmailHTML\"\n      }), \", you can also customize the subject of the email. The function argument are the same but you can only return a string - not HTML.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { CollectionConfig } from 'payload'\\n\\nexport const Customers: CollectionConfig = {\\n  // ...\\n  auth: {\\n    forgotPassword: {\\n      // highlight-start\\n      generateEmailSubject: ({ req, user }) => {\\n        return `Hey ${user.email}, reset your password!`\\n      },\\n      // highlight-end\\n    },\\n  },\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The following arguments are passed to the \", _jsx(_components.code, {\n        children: \"generateEmailSubject\"\n      }), \" function:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Argument\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"req\"\n            })\n          }), _jsx(_components.td, {\n            children: \"The request object.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"user\"\n            })\n          }), _jsx(_components.td, {\n            children: \"The user document that is attempting to reset their password.\"\n          })]\n        })]\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}},"__N_SSG":true}