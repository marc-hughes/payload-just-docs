{"pageProps":{"frontMatter":{"title":"Token Data","label":"Token Data","order":70,"desc":"Storing data for read on the request object.","keywords":"authentication, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, nextjs"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    h3: \"h3\",\n    pre: \"pre\",\n    strong: \"strong\",\n    a: \"a\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"During the lifecycle of a request you will be able to access the data you have configured to be stored in the JWT by accessing \", _jsx(_components.code, {\n        children: \"req.user\"\n      }), \". The user object is automatically appended to the request for you.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Definining Token Data\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can specify what data gets encoded to the Cookie/JWT-Token by setting \", _jsx(_components.code, {\n        children: \"saveToJWT\"\n      }), \" property on fields within your auth collection.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { CollectionConfig } from 'payload'\\n\\nexport const Users: CollectionConfig = {\\n  slug: 'users',\\n  auth: true,\\n  fields: [\\n    {\\n      // will be stored in the JWT\\n      saveToJWT: true,\\n      type: 'select',\\n      name: 'role',\\n      options: ['super-admin', 'user'],\\n    },\\n    {\\n      // the entire object will be stored in the JWT\\n      // tab fields can do the same thing!\\n      saveToJWT: true,\\n      type: 'group',\\n      name: 'group1',\\n      fields: [\\n        {\\n          type: 'text',\\n          name: 'includeField',\\n        },\\n        {\\n          // will be omitted from the JWT\\n          saveToJWT: false,\\n          type: 'text',\\n          name: 'omitField',\\n        },\\n      ],\\n    },\\n    {\\n      type: 'group',\\n      name: 'group2',\\n      fields: [\\n        {\\n          // will be stored in the JWT\\n          // but stored at the top level\\n          saveToJWT: true,\\n          type: 'text',\\n          name: 'includeField',\\n        },\\n        {\\n          type: 'text',\\n          name: 'omitField',\\n        },\\n      ],\\n    },\\n  ],\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(Banner, {\n      type: \"success\",\n      children: [_jsx(_components.p, {\n        children: _jsx(_components.strong, {\n          children: \"Tip:\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"If you wish to use a different key other than the field \", _jsx(_components.code, {\n          children: \"name\"\n        }), \", you can define \", _jsx(_components.code, {\n          children: \"saveToJWT\"\n        }), \" as a string.\"]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Using Token Data\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This is especially helpful when writing \", _jsx(_components.a, {\n        href: \"../hooks/overview\",\n        children: \"Hooks\"\n      }), \" and \", _jsx(_components.a, {\n        href: \"../access-control/overview\",\n        children: \"Access Control\"\n      }), \" that depend on user defined fields.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { CollectionConfig } from 'payload'\\n\\nexport const Invoices: CollectionConfig = {\\n  slug: 'invoices',\\n  access: {\\n    read: ({ req, data }) => {\\n      if (!req?.user) return false\\n      // highlight-start\\n      if ({ req.user?.role === 'super-admin'}) {\\n        return true\\n      }\\n      // highlight-end\\n      return data.owner === req.user.id\\n    }\\n  }\\n  fields: [\\n    {\\n      name: 'owner',\\n      relationTo: 'users'\\n    },\\n    // ... other fields\\n  ],\\n}\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}},"__N_SSG":true}