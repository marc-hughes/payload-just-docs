{"pageProps":{"frontMatter":{"title":"Authentication Overview","label":"Overview","order":10,"desc":"Payload provides highly secure user Authentication out of the box, and you can fully customize, override, or remove the default Authentication support.","keywords":"authentication, config, configuration, overview, documentation, Content Management System, cms, headless, javascript, node, react, nextjs"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    pre: \"pre\",\n    img: \"img\",\n    em: \"em\",\n    h2: \"h2\",\n    strong: \"strong\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components), {YouTube, Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  if (!YouTube) _missingMdxReference(\"YouTube\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(YouTube, {\n      id: \"CT4KafeJjTI\",\n      title: \"Simplified Authentication for Headless CMS: Unlocking Reusability in One Line\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Authentication is a critical part of any application. Payload provides a secure, portable way to manage user accounts out of the box. Payload Authentication is designed to be used in both the \", _jsx(_components.a, {\n        href: \"../admin/overview\",\n        children: \"Admin Panel\"\n      }), \", as well as your own external applications, completely eliminating the need for paid, third-party platforms and services.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here are some common use cases of Authentication in your own applications:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Customer accounts for an e-commerce app\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"User accounts for a SaaS product\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"P2P apps or social sites where users need to log in and manage their profiles\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Online games where players need to track their progress over time\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When Authentication is enabled on a \", _jsx(_components.a, {\n        href: \"../configuration/collections\",\n        children: \"Collection\"\n      }), \", Payload injects all necessary functionality to support the entire user flow. This includes all \", _jsx(_components.a, {\n        href: \"./operations\",\n        children: \"auth-related operations\"\n      }), \" like account creation, logging in and out, and resetting passwords, all \", _jsx(_components.a, {\n        href: \"./email\",\n        children: \"auth-related emails\"\n      }), \" like email verification and password reset, as well as any necessary UI to manage users from the Admin Panel.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To enable Authentication on a Collection, use the \", _jsx(_components.code, {\n        children: \"auth\"\n      }), \" property in the \", _jsx(_components.a, {\n        href: \"../configuration/collections#config-options\",\n        children: \"Collection Config\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { CollectionConfig } from 'payload'\\n\\nexport const Users: CollectionConfig = {\\n  // ...\\n  auth: true, // highlight-line\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.img, {\n        src: \"https://payloadcms.com/images/docs/auth-admin.jpg\",\n        alt: \"Authentication Admin Panel functionality\"\n      }), \"\\n\", _jsx(_components.em, {\n        children: \"Admin Panel screenshot depicting an Admins Collection with Auth enabled\"\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Config Options\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Any \", _jsx(_components.a, {\n        href: \"../configuration/collections\",\n        children: \"Collection\"\n      }), \" can opt-in to supporting Authentication. Once enabled, each Document that is created within the Collection can be thought of as a \\\"user\\\". This enables a complete authentication workflow on your Collection, such as logging in and out, resetting their password, and more.\"]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Note:\"\n        }), \" By default, Payload provides an auth-enabled \", _jsx(_components.code, {\n          children: \"User\"\n        }), \" Collection which\\nis used to access the Admin Panel. \", _jsx(_components.a, {\n          href: \"../admin/overview#the-admin-user-collection\",\n          children: \"More\\ndetails\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To enable Authentication on a Collection, use the \", _jsx(_components.code, {\n        children: \"auth\"\n      }), \" property in the \", _jsx(_components.a, {\n        href: \"../configuration/collections\",\n        children: \"Collection Config\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { CollectionConfig } from 'payload'\\n\\nexport const Admins: CollectionConfig = {\\n  // ...\\n  // highlight-start\\n  auth: {\\n    tokenExpiration: 7200, // How many seconds to keep the user logged in\\n    verify: true, // Require email verification before being allowed to authenticate\\n    maxLoginAttempts: 5, // Automatically lock a user out after X amount of failed logins\\n    lockTime: 600 * 1000, // Time period to allow the max login attempts\\n    // More options are available\\n  },\\n  // highlight-end\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"info\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Tip:\"\n        }), \" For default auth behavior, set \", _jsx(_components.code, {\n          children: \"auth: true\"\n        }), \". This is a good starting\\npoint for most applications.\"]\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Note:\"\n        }), \" Auth-enabled Collections with be automatically injected with the\\n\", _jsx(_components.code, {\n          children: \"hash\"\n        }), \", \", _jsx(_components.code, {\n          children: \"salt\"\n        }), \", and \", _jsx(_components.code, {\n          children: \"email\"\n        }), \" fields. \", _jsx(_components.a, {\n          href: \"../fields/overview#field-names\",\n          children: \"More\\ndetails\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The following options are available:\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"cookies\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Set cookie options, including \", _jsx(_components.code, {\n              children: \"secure\"\n            }), \", \", _jsx(_components.code, {\n              children: \"sameSite\"\n            }), \", and \", _jsx(_components.code, {\n              children: \"domain\"\n            }), \". For advanced users.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"depth\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"How many levels deep a \", _jsx(_components.code, {\n              children: \"user\"\n            }), \" document should be populated when creating the JWT and binding the \", _jsx(_components.code, {\n              children: \"user\"\n            }), \" to the \", _jsx(_components.code, {\n              children: \"req\"\n            }), \". Defaults to \", _jsx(_components.code, {\n              children: \"0\"\n            }), \" and should only be modified if absolutely necessary, as this will affect performance.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"disableLocalStrategy\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Advanced - disable Payload's built-in local auth strategy. Only use this property if you have replaced Payload's auth mechanisms with your own.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"forgotPassword\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Customize the way that the \", _jsx(_components.code, {\n              children: \"forgotPassword\"\n            }), \" operation functions. \", _jsx(_components.a, {\n              href: \"./email#forgot-password\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"lockTime\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Set the time (in milliseconds) that a user should be locked out if they fail authentication more times than \", _jsx(_components.code, {\n              children: \"maxLoginAttempts\"\n            }), \" allows for.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"loginWithUsername\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Ability to allow users to login with username/password. \", _jsx(_components.a, {\n              href: \"/docs/authentication/overview#login-with-username\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"maxLoginAttempts\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Only allow a user to attempt logging in X amount of times. Automatically locks out a user from authenticating if this limit is passed. Set to \", _jsx(_components.code, {\n              children: \"0\"\n            }), \" to disable.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"removeTokenFromResponses\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Set to true if you want to remove the token from the returned authentication API responses such as login or refresh.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"strategies\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Advanced - an array of custom authentication strategies to extend this collection's authentication with. \", _jsx(_components.a, {\n              href: \"./custom-strategies\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"tokenExpiration\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"How long (in seconds) to keep the user logged in. JWTs and HTTP-only cookies will both expire at the same time.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"useAPIKey\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Payload Authentication provides for API keys to be set on each user within an Authentication-enabled Collection. \", _jsx(_components.a, {\n              href: \"./api-keys\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"verify\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Set to \", _jsx(_components.code, {\n              children: \"true\"\n            }), \" or pass an object with verification options to require users to verify by email before they are allowed to log into your app. \", _jsx(_components.a, {\n              href: \"./email#email-verification\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Login With Username\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can allow users to login with their username instead of their email address by setting the \", _jsx(_components.code, {\n        children: \"loginWithUsername\"\n      }), \" property to \", _jsx(_components.code, {\n        children: \"true\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Example:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"{\\n  slug: 'customers',\\n  auth: {\\n    loginWithUsername: true,\\n  },\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Or, you can pass an object with additional options:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"{\\n  slug: 'customers',\\n  auth: {\\n    loginWithUsername: {\\n      allowEmailLogin: true, // default: false\\n      requireEmail: false, // default: false\\n    },\\n  },\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"allowEmailLogin\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If set to \", _jsx(_components.code, {\n        children: \"true\"\n      }), \", users can log in with either their username or email address. If set to \", _jsx(_components.code, {\n        children: \"false\"\n      }), \", users can only log in with their username.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"requireEmail\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If set to \", _jsx(_components.code, {\n        children: \"true\"\n      }), \", an email address is required when creating a new user. If set to \", _jsx(_components.code, {\n        children: \"false\"\n      }), \", email is not required upon creation.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Auto-Login\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For testing and demo purposes you may want to skip forcing the user to login in order to access your application. Typically, all users should be required to login, however, you can speed up local development time by enabling auto-login.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To enable auto-login, set the \", _jsx(_components.code, {\n        children: \"autoLogin\"\n      }), \" property in the \", _jsx(_components.a, {\n        href: \"../admin/overview#admin-options\",\n        children: \"Payload Config\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { buildConfig } from 'payload'\\n\\nexport default buildConfig({\\n  // ...\\n  // highlight-start\\n  autoLogin:\\n    process.env.NEXT_PUBLIC_ENABLE_AUTOLOGIN === 'true'\\n      ? {\\n          email: 'test@example.com',\\n          password: 'test',\\n          prefillOnly: true,\\n        }\\n      : false,\\n  // highlight-end\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Warning:\"\n        }), \" The recommended way to use this feature is behind an \", _jsx(_components.a, {\n          href: \"../configuration/environment-vars\",\n          children: \"Environment\\nVariable\"\n        }), \". This will ensure it is\\n\", _jsx(_components.em, {\n          children: \"disabled\"\n        }), \" in production.\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The following options are available:\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"username\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The username of the user to login as\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"email\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The email address of the user to login as\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"password\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The password of the user to login as. This is only needed if \", _jsx(_components.code, {\n              children: \"prefillOnly\"\n            }), \" is set to true\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"prefillOnly\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"If set to true, the login credentials will be prefilled but the user will still need to click the login button.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Operations\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"All auth-related operations are available via Payload's REST, Local, and GraphQL APIs. These operations are automatically added to your Collection when you enable Authentication. \", _jsx(_components.a, {\n        href: \"./operations\",\n        children: \"More details\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Strategies\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Out of the box Payload ships with a three powerful Authentication strategies:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"./cookies\",\n          children: \"HTTP-Only Cookies\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"./jwt\",\n          children: \"JSON Web Tokens (JWT)\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"./api-keys\",\n          children: \"API-Keys\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Each of these strategies can work together or independently. You can also create your own custom strategies to fit your specific needs. \", _jsx(_components.a, {\n        href: \"./custom-strategies\",\n        children: \"More details\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"HTTP-Only Cookies\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies\",\n        children: \"HTTP-only cookies\"\n      }), \" are a highly secure method of storing identifiable data on a user's device so that Payload can automatically recognize a returning user until their cookie expires. They are totally protected from common XSS attacks and \", _jsx(_components.strong, {\n        children: \"cannot be read by JavaScript in the browser\"\n      }), \", unlike JWT's. \", _jsx(_components.a, {\n        href: \"./cookies\",\n        children: \"More details\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"JSON Web Tokens\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"JWT (JSON Web Tokens) can also be utilized to perform authentication. Tokens are generated on \", _jsx(_components.code, {\n        children: \"login\"\n      }), \", \", _jsx(_components.code, {\n        children: \"refresh\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"me\"\n      }), \" operations and can be attached to future requests to authenticate users. \", _jsx(_components.a, {\n        href: \"./jwt\",\n        children: \"More details\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"API Keys\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"API Keys can be enabled on auth collections. These are particularly useful when you want to authenticate against Payload from a third party service. \", _jsx(_components.a, {\n        href: \"./api-keys\",\n        children: \"More details\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Custom Strategies\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"There are cases where these may not be enough for your application. Payload is extendable by design so you can wire up your own strategy when you need to. \", _jsx(_components.a, {\n        href: \"./custom-strategies\",\n        children: \"More details\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}},"__N_SSG":true}