{"pageProps":{"frontMatter":{"title":"API Key Strategy","label":"API Key Strategy","order":50,"desc":"Enable API key based authentication to interface with Payload.","keywords":"authentication, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, nextjs"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    ol: \"ol\",\n    li: \"li\",\n    strong: \"strong\",\n    a: \"a\",\n    pre: \"pre\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"To integrate with third-party APIs or services, you might need the ability to generate API keys that can be used to identify as a certain user within Payload. API keys are generated on a user-by-user basis, similar to email and passwords, and are meant to represent a single user.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For example, if you have a third-party service or external app that needs to be able to perform protected actions against Payload, first you need to create a user within Payload, i.e. \", _jsx(_components.code, {\n        children: \"dev@thirdparty.com\"\n      }), \". From your external application you will need to authenticate with that user, you have two options:\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Log in each time with that user and receive an expiring token to request with.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Generate a non-expiring API key for that user to request with.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(Banner, {\n      type: \"success\",\n      children: [_jsx(_components.p, {\n        children: _jsx(_components.strong, {\n          children: \"Tip:\"\n        })\n      }), _jsx(_components.p, {\n        children: \"This is particularly useful as you can create a \\\"user\\\" that reflects an integration with a specific external service and assign a \\\"role\\\" or specific access only needed by that service/integration.\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Technically, both of these options will work for third-party integrations but the second option with API key is simpler, because it reduces the amount of work that your integrations need to do to be authenticated properly.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To enable API keys on a collection, set the \", _jsx(_components.code, {\n        children: \"useAPIKey\"\n      }), \" auth option to \", _jsx(_components.code, {\n        children: \"true\"\n      }), \". From there, a new interface will appear in the \", _jsx(_components.a, {\n        href: \"../admin/overview\",\n        children: \"Admin Panel\"\n      }), \" for each document within the collection that allows you to generate an API key for each user in the Collection.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { CollectionConfig } from 'payload'\\n\\nexport const ThirdPartyAccess: CollectionConfig = {\\n  slug: 'third-party-access',\\n  auth: {\\n    useAPIKey: true, // highlight-line\\n  },\\n  fields: [],\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"User API keys are encrypted within the database, meaning that if your database is compromised,\\nyour API keys will not be.\"\n    }), \"\\n\", _jsxs(Banner, {\n      type: \"warning\",\n      children: [_jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Important:\"\n        }), \"\\nIf you change your \", _jsx(_components.code, {\n          children: \"PAYLOAD_SECRET\"\n        }), \", you will need to regenerate your API keys.\"]\n      }), _jsx(_components.p, {\n        children: \"The secret key is used to encrypt the API keys, so if you change the secret, existing API keys will\\nno longer be valid.\"\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"HTTP Authentication\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To authenticate REST or GraphQL API requests using an API key, set the \", _jsx(_components.code, {\n        children: \"Authorization\"\n      }), \" header. The header is case-sensitive and needs the slug of the \", _jsx(_components.code, {\n        children: \"auth.useAPIKey\"\n      }), \" enabled collection, then \\\" API-Key \\\", followed by the \", _jsx(_components.code, {\n        children: \"apiKey\"\n      }), \" that has been assigned. Payload's built-in middleware will then assign the user document to \", _jsx(_components.code, {\n        children: \"req.user\"\n      }), \" and handle requests with the proper \", _jsx(_components.a, {\n        href: \"../access-control/overview\",\n        children: \"Access Control\"\n      }), \". By doing this, Payload recognizes the request being made as a request by the user associated with that API key.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"For example, using Fetch:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import Users from '../collections/Users'\\n\\nconst response = await fetch('http://localhost:3000/api/pages', {\\n  headers: {\\n    Authorization: `${Users.slug} API-Key ${YOUR_API_KEY}`,\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Payload ensures that the same, uniform \", _jsx(_components.a, {\n        href: \"../access-control/overview\",\n        children: \"Access Control\"\n      }), \" is used across all authentication strategies. This enables you to utilize your existing Access Control configurations with both API keys and the standard email/password authentication. This consistency can aid in maintaining granular control over your API keys.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"API Key Only Auth\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you want to use API keys as the only authentication method for a collection, you can disable the default local strategy by setting \", _jsx(_components.code, {\n        children: \"disableLocalStrategy\"\n      }), \" to \", _jsx(_components.code, {\n        children: \"true\"\n      }), \" on the collection's \", _jsx(_components.code, {\n        children: \"auth\"\n      }), \" property. This will disable the ability to authenticate with email and password, and will only allow for authentication via API key.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { CollectionConfig } from 'payload'\\n\\nexport const ThirdPartyAccess: CollectionConfig = {\\n  slug: 'third-party-access',\\n  auth: {\\n    useAPIKey: true,\\n    disableLocalStrategy: true, // highlight-line\\n  },\\n}\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}},"__N_SSG":true}