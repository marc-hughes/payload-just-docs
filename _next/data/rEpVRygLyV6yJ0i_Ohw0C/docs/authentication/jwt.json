{"pageProps":{"frontMatter":{"title":"JWT Strategy","label":"JWT Strategy","order":40,"desc":"Enable JSON Web Token based authentication to interface with Payload.","keywords":"authentication, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, nextjs"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    code: \"code\",\n    strong: \"strong\",\n    h3: \"h3\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"Payload offers the ability to \", _jsx(_components.a, {\n        href: \"./overview\",\n        children: \"Authenticate\"\n      }), \" via JSON Web Tokens (JWT). These can be read from the responses of \", _jsx(_components.code, {\n        children: \"login\"\n      }), \", \", _jsx(_components.code, {\n        children: \"logout\"\n      }), \", \", _jsx(_components.code, {\n        children: \"refresh\"\n      }), \", and \", _jsx(_components.code, {\n        children: \"me\"\n      }), \" auth operations.\"]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"success\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Tip:\"\n        }), \" You can access the logged-in user from within \", _jsx(_components.a, {\n          href: \"../access-control/overview\",\n          children: \"Access\\nControl\"\n        }), \" and \", _jsx(_components.a, {\n          href: \"../hooks/overview\",\n          children: \"Hooks\"\n        }), \" through\\nthe \", _jsx(_components.code, {\n          children: \"req.user\"\n        }), \" argument. \", _jsx(_components.a, {\n          href: \"./token-data\",\n          children: \"More details\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Identifying Users Via The Authorization Header\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In addition to authenticating via an HTTP-only cookie, you can also identify users via the \", _jsx(_components.code, {\n        children: \"Authorization\"\n      }), \" header on an HTTP request.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Example:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const user = await fetch('http://localhost:3000/api/users/login', {\\n  method: 'POST',\\n  body: JSON.stringify({\\n    email: 'dev@payloadcms.com',\\n    password: 'password',\\n  }),\\n}).then((req) => await req.json())\\n\\nconst request = await fetch('http://localhost:3000', {\\n  headers: {\\n    Authorization: `JWT ${user.token}`,\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Omitting The Token\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In some cases you may want to prevent the token from being returned from the auth operations. You can do that by setting \", _jsx(_components.code, {\n        children: \"removeTokenFromResponse\"\n      }), \" to \", _jsx(_components.code, {\n        children: \"true\"\n      }), \" like so:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { CollectionConfig } from 'payload'\\n\\nexport const UsersWithoutJWTs: CollectionConfig = {\\n  slug: 'users-without-jwts',\\n  auth: {\\n    removeTokenFromResponse: true, // highlight-line\\n  },\\n}\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}},"__N_SSG":true}