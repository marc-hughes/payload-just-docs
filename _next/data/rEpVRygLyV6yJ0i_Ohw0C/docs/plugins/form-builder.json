{"pageProps":{"frontMatter":{"title":"Form Builder Plugin","label":"Form Builder","order":40,"desc":"Easily build and manage forms from the Admin Panel. Send dynamic, personalized emails and even accept and process payments.","keywords":"plugins, plugin, form, forms, form builder"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    a: \"a\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    h3: \"h3\",\n    em: \"em\",\n    strong: \"strong\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    h4: \"h4\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://img.shields.io/npm/v/@payloadcms/plugin-form-builder\",\n        alt: \"https://www.npmjs.com/package/@payloadcms/plugin-form-builder\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This plugin allows you to build and manage custom forms directly within the \", _jsx(_components.a, {\n        href: \"../admin/overview\",\n        children: \"Admin Panel\"\n      }), \". Instead of hard-coding a new form into your website or application every time you need one, admins can simply define the schema for each form they need on-the-fly, and your front-end can map over this schema, render its own UI components, and match your brand's design system.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"All form submissions are stored directly in your database and are managed directly from the Admin Panel. When forms are submitted, you can display a custom on-screen confirmation message to the user or redirect them to a dedicated confirmation page. You can even send dynamic, personalized emails derived from the form's data. For example, you may want to send a confirmation email to the user who submitted the form, and also send a notification email to your team.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Forms can be as simple or complex as you need, from a basic contact form, to a multi-step lead generation engine, or even a donation form that processes payment. You may not need to reach for third-party services like HubSpot or Mailchimp for this, but instead use your own first-party tooling, built directly into your own application.\"\n    }), \"\\n\", _jsx(Banner, {\n      type: \"info\",\n      children: _jsxs(_components.p, {\n        children: [\"This plugin is completely open-source and the \", _jsx(_components.a, {\n          href: \"https://github.com/payloadcms/payload/tree/main/packages/plugin-form-builder\",\n          children: \"source code can be found\\nhere\"\n        }), \".\\nIf you need help, check out our \", _jsx(_components.a, {\n          href: \"https://payloadcms.com/community-help\",\n          children: \"Community\\nHelp\"\n        }), \". If you think you've found a bug,\\nplease \", _jsx(_components.a, {\n          href: \"https://github.com/payloadcms/payload/issues/new?assignees=&labels=plugin%3A%20form-builder&template=bug_report.md&title=plugin-form-builder%3A\",\n          children: \"open a new\\nissue\"\n        }), \"\\nwith as much detail as possible.\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Core Features\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Build completely dynamic forms directly from the Admin Panel for a variety of use cases\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Render forms on your front-end using your own UI components and match your brand's design system\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Send dynamic, personalized emails upon form submission to multiple recipients, derived from the form's data\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Display a custom confirmation message or automatically redirect upon form submission\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Build dynamic prices based on form input to use for payment processing (optional)\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Installation\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Install the plugin using any JavaScript package manager like \", _jsx(_components.a, {\n        href: \"https://pnpm.io\",\n        children: \"pnpm\"\n      }), \", \", _jsx(_components.a, {\n        href: \"https://npmjs.com\",\n        children: \"npm\"\n      }), \", or \", _jsx(_components.a, {\n        href: \"https://yarnpkg.com\",\n        children: \"Yarn\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"pnpm add @payloadcms/plugin-form-builder\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Basic Usage\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In the \", _jsx(_components.code, {\n        children: \"plugins\"\n      }), \" array of your \", _jsx(_components.a, {\n        href: \"https://payloadcms.com/docs/configuration/overview\",\n        children: \"Payload Config\"\n      }), \", call the plugin with \", _jsx(_components.a, {\n        href: \"#options\",\n        children: \"options\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { buildConfig } from 'payload'\\nimport { formBuilderPlugin } from '@payloadcms/plugin-form-builder'\\n\\nconst config = buildConfig({\\n  collections: [\\n    {\\n      slug: 'pages',\\n      fields: [],\\n    },\\n  ],\\n  plugins: [\\n    formBuilderPlugin({\\n      // see below for a list of available options\\n    }),\\n  ],\\n})\\n\\nexport default config\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Options\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      children: [_jsx(_components.code, {\n        children: \"fields\"\n      }), \" (option)\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"fields\"\n      }), \" property is an object of field types to allow your admin editors to build forms with. To override default settings, pass either a boolean value or a partial \", _jsx(_components.a, {\n        href: \"https://payloadcms.com/docs/fields/blocks#block-configs\",\n        children: \"Payload Block\"\n      }), \" \", _jsx(_components.em, {\n        children: \"keyed to the block's slug\"\n      }), \". See \", _jsx(_components.a, {\n        href: \"#fields\",\n        children: \"Fields\"\n      }), \" for more details.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"// payload.config.ts\\nformBuilderPlugin({\\n  // ...\\n  fields: {\\n    text: true,\\n    textarea: true,\\n    select: true,\\n    email: true,\\n    state: true,\\n    country: true,\\n    checkbox: true,\\n    number: true,\\n    message: true,\\n    payment: false,\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.code, {\n        children: \"redirectRelationships\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"redirectRelationships\"\n      }), \" property is an array of collection slugs that, when enabled, are populated as options in the form's \", _jsx(_components.code, {\n        children: \"redirect\"\n      }), \" field. This field is used to redirect the user to a dedicated confirmation page upon form submission (optional).\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"// payload.config.ts\\nformBuilderPlugin({\\n  // ...\\n  redirectRelationships: ['pages'],\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.code, {\n        children: \"beforeEmail\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"beforeEmail\"\n      }), \" property is a \", _jsx(_components.a, {\n        href: \"https://payloadcms.com/docs/hooks/globals#beforechange\",\n        children: \"beforeChange\"\n      }), \" hook that is called just after emails are prepared, but before they are sent. This is a great place to inject your own HTML template to add custom styles.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"// payload.config.ts\\nformBuilderPlugin({\\n  // ...\\n  beforeEmail: (emailsToSend, beforeChangeParams) => {\\n    // modify the emails in any way before they are sent\\n    return emails.map((email) => ({\\n      ...email,\\n      html: email.html, // transform the html in any way you'd like (maybe wrap it in an html template?)\\n    }))\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For full types with \", _jsx(_components.code, {\n        children: \"beforeChangeParams\"\n      }), \", you can import the types from the plugin:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { BeforeEmail } from '@payloadcms/plugin-form-builder'\\n// Your generated FormSubmission type\\nimport type { FormSubmission } from '@payload-types'\\n\\n// Pass it through and 'data' or 'originalDoc' will now be typed\\nconst beforeEmail: BeforeEmail<FormSubmission> = (\\n  emailsToSend,\\n  beforeChangeParams,\\n) => {\\n  // modify the emails in any way before they are sent\\n  return emails.map((email) => ({\\n    ...email,\\n    html: email.html, // transform the html in any way you'd like (maybe wrap it in an html template?)\\n  }))\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.code, {\n        children: \"defaultToEmail\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Provide a fallback for the email address to send form submissions to. If the email in form configuration does not have a to email set, this email address will be used. If this is not provided then it falls back to the \", _jsx(_components.code, {\n        children: \"defaultFromAddress\"\n      }), \" in your \", _jsx(_components.a, {\n        href: \"../email/overview\",\n        children: \"email configuration\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"// payload.config.ts\\nformBuilderPlugin({\\n  // ...\\n  defaultToEmail: 'test@example.com',\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.code, {\n        children: \"formOverrides\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Override anything on the \", _jsx(_components.code, {\n        children: \"forms\"\n      }), \" collection by sending a \", _jsx(_components.a, {\n        href: \"https://payloadcms.com/docs/configuration/collections\",\n        children: \"Payload Collection Config\"\n      }), \" to the \", _jsx(_components.code, {\n        children: \"formOverrides\"\n      }), \" property.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Note that the \", _jsx(_components.code, {\n        children: \"fields\"\n      }), \" property is a function that receives the default fields and returns an array of fields. This is because the \", _jsx(_components.code, {\n        children: \"fields\"\n      }), \" property is a special case that is merged with the default fields, rather than replacing them. This allows you to map over default fields and modify them as needed.\"]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsx(_components.p, {\n        children: \"Good to know: The form collection is publicly available to read by default.\\nThe emails field is locked for authenticated users only. If you have any\\nfrontend users you should override the access permissions for both the\\ncollection and the emails field to make sure you don't leak out any private\\nemails.\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"// payload.config.ts\\nformBuilderPlugin({\\n  // ...\\n  formOverrides: {\\n    slug: 'contact-forms',\\n    access: {\\n      read: ({ req: { user } }) => !!user, // authenticated users only\\n      update: () => false,\\n    },\\n    fields: ({ defaultFields }) => {\\n      return [\\n        ...defaultFields,\\n        {\\n          name: 'custom',\\n          type: 'text',\\n        },\\n      ]\\n    },\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.code, {\n        children: \"formSubmissionOverrides\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Override anything on the \", _jsx(_components.code, {\n        children: \"form-submissions\"\n      }), \" collection by sending a \", _jsx(_components.a, {\n        href: \"https://payloadcms.com/docs/configuration/collections\",\n        children: \"Payload Collection Config\"\n      }), \" to the \", _jsx(_components.code, {\n        children: \"formSubmissionOverrides\"\n      }), \" property.\"]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [\"By default, this plugin relies on \", _jsx(_components.a, {\n          href: \"https://payloadcms.com/docs/access-control/collections\",\n          children: \"Payload access\\ncontrol\"\n        }), \" to restrict\\nthe \", _jsx(_components.code, {\n          children: \"update\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"read\"\n        }), \" operations on the \", _jsx(_components.code, {\n          children: \"form-submissions\"\n        }), \" collection. This\\nis because \", _jsx(_components.em, {\n          children: \"anyone\"\n        }), \" should be able to create a form submission, even from a\\npublic-facing website, but \", _jsx(_components.em, {\n          children: \"no one\"\n        }), \" should be able to update a submission once\\nit has been created, or read a submission unless they have permission. You can\\noverride this behavior or any other property as needed.\"]\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"// payload.config.ts\\nformBuilderPlugin({\\n  // ...\\n  formSubmissionOverrides: {\\n    slug: 'leads',\\n    fields: ({ defaultFields }) => {\\n      return [\\n        ...defaultFields,\\n        {\\n          name: 'custom',\\n          type: 'text',\\n        },\\n      ]\\n    },\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.code, {\n        children: \"handlePayment\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"handlePayment\"\n      }), \" property is a \", _jsx(_components.a, {\n        href: \"https://payloadcms.com/docs/hooks/globals#beforechange\",\n        children: \"beforeChange\"\n      }), \" hook that is called upon form submission. You can integrate into any third-party payment processing API here to accept payment based on form input. You can use the \", _jsx(_components.code, {\n        children: \"getPaymentTotal\"\n      }), \" function to calculate the total cost after all conditions have been applied. This is only applicable if the form has enabled the \", _jsx(_components.code, {\n        children: \"payment\"\n      }), \" field.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"First import the utility function. This will execute all of the price conditions that you have set in your form's \", _jsx(_components.code, {\n        children: \"payment\"\n      }), \" field and returns the total price.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"// payload.config.ts\\nimport { getPaymentTotal } from '@payloadcms/plugin-form-builder'\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Then in your plugin's config:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"// payload.config.ts\\nformBuilderPlugin({\\n  // ...\\n  handlePayment: async ({ form, submissionData }) => {\\n    // first calculate the price\\n    const paymentField = form.fields?.find(\\n      (field) => field.blockType === 'payment',\\n    )\\n    const price = getPaymentTotal({\\n      basePrice: paymentField.basePrice,\\n      priceConditions: paymentField.priceConditions,\\n      fieldValues: submissionData,\\n    })\\n    // then asynchronously process the payment here\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Fields\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Each field represents a form input. To override default settings pass either a boolean value or a partial \", _jsx(_components.a, {\n        href: \"https://payloadcms.com/docs/fields/blocks\",\n        children: \"Payload Block\"\n      }), \" \", _jsx(_components.em, {\n        children: \"keyed to the block's slug\"\n      }), \". See \", _jsx(_components.a, {\n        href: \"#field-overrides\",\n        children: \"Field Overrides\"\n      }), \" for more details on how to do this.\"]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"info\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Note:\"\n        }), \" \\\"Fields\\\" here is in reference to the \", _jsx(_components.em, {\n          children: \"fields to build forms with\"\n        }), \",\\nnot to be confused with the \", _jsx(_components.em, {\n          children: \"fields of a collection\"\n        }), \" which are set via\\n\", _jsx(_components.code, {\n          children: \"formOverrides.fields\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Text\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Maps to a \", _jsx(_components.code, {\n        children: \"text\"\n      }), \" input in your front-end. Used to collect a simple string.\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Property\"\n          }), _jsx(_components.th, {\n            children: \"Type\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"name\"\n            })\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"The name of the field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"label\"\n            })\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"The label of the field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"defaultValue\"\n            })\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"The default value of the field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"width\"\n            })\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"The width of the field on the front-end.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"required\"\n            })\n          }), _jsx(_components.td, {\n            children: \"checkbox\"\n          }), _jsx(_components.td, {\n            children: \"Whether or not the field is required when submitted.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Textarea\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Maps to a \", _jsx(_components.code, {\n        children: \"textarea\"\n      }), \" input on your front-end. Used to collect a multi-line string.\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Property\"\n          }), _jsx(_components.th, {\n            children: \"Type\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"name\"\n            })\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"The name of the field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"label\"\n            })\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"The label of the field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"defaultValue\"\n            })\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"The default value of the field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"width\"\n            })\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"The width of the field on the front-end.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"required\"\n            })\n          }), _jsx(_components.td, {\n            children: \"checkbox\"\n          }), _jsx(_components.td, {\n            children: \"Whether or not the field is required when submitted.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Select\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Maps to a \", _jsx(_components.code, {\n        children: \"select\"\n      }), \" input on your front-end. Used to display a list of options.\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Property\"\n          }), _jsx(_components.th, {\n            children: \"Type\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"name\"\n            })\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"The name of the field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"label\"\n            })\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"The label of the field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"defaultValue\"\n            })\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"The default value of the field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"width\"\n            })\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"The width of the field on the front-end.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"required\"\n            })\n          }), _jsx(_components.td, {\n            children: \"checkbox\"\n          }), _jsx(_components.td, {\n            children: \"Whether or not the field is required when submitted.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"options\"\n            })\n          }), _jsx(_components.td, {\n            children: \"array\"\n          }), _jsxs(_components.td, {\n            children: [\"An array of objects with \", _jsx(_components.code, {\n              children: \"label\"\n            }), \" and \", _jsx(_components.code, {\n              children: \"value\"\n            }), \" properties.\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Email (field)\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Maps to a \", _jsx(_components.code, {\n        children: \"text\"\n      }), \" input with type \", _jsx(_components.code, {\n        children: \"email\"\n      }), \" on your front-end. Used to collect an email address.\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Property\"\n          }), _jsx(_components.th, {\n            children: \"Type\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"name\"\n            })\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"The name of the field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"label\"\n            })\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"The label of the field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"defaultValue\"\n            })\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"The default value of the field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"width\"\n            })\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"The width of the field on the front-end.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"required\"\n            })\n          }), _jsx(_components.td, {\n            children: \"checkbox\"\n          }), _jsx(_components.td, {\n            children: \"Whether or not the field is required when submitted.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"State\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Maps to a \", _jsx(_components.code, {\n        children: \"select\"\n      }), \" input on your front-end. Used to collect a US state.\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Property\"\n          }), _jsx(_components.th, {\n            children: \"Type\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"name\"\n            })\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"The name of the field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"label\"\n            })\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"The label of the field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"defaultValue\"\n            })\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"The default value of the field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"width\"\n            })\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"The width of the field on the front-end.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"required\"\n            })\n          }), _jsx(_components.td, {\n            children: \"checkbox\"\n          }), _jsx(_components.td, {\n            children: \"Whether or not the field is required when submitted.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Country\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Maps to a \", _jsx(_components.code, {\n        children: \"select\"\n      }), \" input on your front-end. Used to collect a country.\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Property\"\n          }), _jsx(_components.th, {\n            children: \"Type\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"name\"\n            })\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"The name of the field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"label\"\n            })\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"The label of the field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"defaultValue\"\n            })\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"The default value of the field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"width\"\n            })\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"The width of the field on the front-end.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"required\"\n            })\n          }), _jsx(_components.td, {\n            children: \"checkbox\"\n          }), _jsx(_components.td, {\n            children: \"Whether or not the field is required when submitted.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Checkbox\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Maps to a \", _jsx(_components.code, {\n        children: \"checkbox\"\n      }), \" input on your front-end. Used to collect a boolean value.\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Property\"\n          }), _jsx(_components.th, {\n            children: \"Type\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"name\"\n            })\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"The name of the field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"label\"\n            })\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"The label of the field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"defaultValue\"\n            })\n          }), _jsx(_components.td, {\n            children: \"checkbox\"\n          }), _jsx(_components.td, {\n            children: \"The default value of the field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"width\"\n            })\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"The width of the field on the front-end.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"required\"\n            })\n          }), _jsx(_components.td, {\n            children: \"checkbox\"\n          }), _jsx(_components.td, {\n            children: \"Whether or not the field is required when submitted.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Number\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Maps to a \", _jsx(_components.code, {\n        children: \"number\"\n      }), \" input on your front-end. Used to collect a number.\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Property\"\n          }), _jsx(_components.th, {\n            children: \"Type\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"name\"\n            })\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"The name of the field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"label\"\n            })\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"The label of the field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"defaultValue\"\n            })\n          }), _jsx(_components.td, {\n            children: \"number\"\n          }), _jsx(_components.td, {\n            children: \"The default value of the field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"width\"\n            })\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"The width of the field on the front-end.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"required\"\n            })\n          }), _jsx(_components.td, {\n            children: \"checkbox\"\n          }), _jsx(_components.td, {\n            children: \"Whether or not the field is required when submitted.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Message\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Maps to a \", _jsx(_components.code, {\n        children: \"RichText\"\n      }), \" component on your front-end. Used to display an arbitrary message to the user anywhere in the form.\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"property\"\n          }), _jsx(_components.th, {\n            children: \"type\"\n          }), _jsx(_components.th, {\n            children: \"description\"\n          })]\n        })\n      }), _jsx(_components.tbody, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"message\"\n            })\n          }), _jsx(_components.td, {\n            children: \"richText\"\n          }), _jsx(_components.td, {\n            children: \"The message to display on the form.\"\n          })]\n        })\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Payment\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Add this field to your form if it should collect payment. Upon submission, the \", _jsx(_components.code, {\n        children: \"handlePayment\"\n      }), \" callback is executed with the form and submission data. You can use this to integrate with any third-party payment processing API.\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"property\"\n          }), _jsx(_components.th, {\n            children: \"type\"\n          }), _jsx(_components.th, {\n            children: \"description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"name\"\n            })\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"The name of the field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"label\"\n            })\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"The label of the field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"defaultValue\"\n            })\n          }), _jsx(_components.td, {\n            children: \"number\"\n          }), _jsx(_components.td, {\n            children: \"The default value of the field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"width\"\n            })\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"The width of the field on the front-end.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"required\"\n            })\n          }), _jsx(_components.td, {\n            children: \"checkbox\"\n          }), _jsx(_components.td, {\n            children: \"Whether or not the field is required when submitted.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"priceConditions\"\n            })\n          }), _jsx(_components.td, {\n            children: \"array\"\n          }), _jsx(_components.td, {\n            children: \"An array of objects that define the price conditions. See below for more details.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Price Conditions\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Each of the \", _jsx(_components.code, {\n        children: \"priceConditions\"\n      }), \" are executed by the \", _jsx(_components.code, {\n        children: \"getPaymentTotal\"\n      }), \" utility that this plugin provides. You can call this function in your \", _jsx(_components.code, {\n        children: \"handlePayment\"\n      }), \" callback to dynamically calculate the total price of a form upon submission based on the user's input. For example, you could create a price condition that says \\\"if the user selects 'yes' for this checkbox, add $10 to the total price\\\".\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"property\"\n          }), _jsx(_components.th, {\n            children: \"type\"\n          }), _jsx(_components.th, {\n            children: \"description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"fieldToUse\"\n            })\n          }), _jsx(_components.td, {\n            children: \"relationship\"\n          }), _jsx(_components.td, {\n            children: \"The field to use to determine the price.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"condition\"\n            })\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"The condition to use to determine the price.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"valueForOperator\"\n            })\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"The value to use for the operator.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"operator\"\n            })\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"The operator to use to determine the price.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"valueType\"\n            })\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"The type of value to use to determine the price.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"value\"\n            })\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"The value to use to determine the price.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Field Overrides\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can provide your own custom fields by passing a new \", _jsx(_components.a, {\n        href: \"https://payloadcms.com/docs/fields/blocks#block-configs\",\n        children: \"Payload Block\"\n      }), \" object into \", _jsx(_components.code, {\n        children: \"fields\"\n      }), \". You can override or extend any existing fields by first importing the \", _jsx(_components.code, {\n        children: \"fields\"\n      }), \" from the plugin:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { fields } from '@payloadcms/plugin-form-builder'\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Then merging it into your own custom field:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"// payload.config.ts\\nformBuilderPlugin({\\n  // ...\\n  fields: {\\n    text: {\\n      ...fields.text,\\n      labels: {\\n        singular: 'Custom Text Field',\\n        plural: 'Custom Text Fields',\\n      },\\n    },\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Email\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This plugin relies on the \", _jsx(_components.a, {\n        href: \"../email/overview\",\n        children: \"email configuration\"\n      }), \" defined in your Payload configuration. It will read from your config and attempt to send your emails using the credentials provided.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Email formatting\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The email contents supports rich text which will be serialized to HTML on the server before being sent. By default it reads the global configuration of your rich text editor.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The email subject and body supports inserting dynamic fields from the form submission data using the \", _jsx(_components.code, {\n        children: \"{{field_name}}\"\n      }), \" syntax. For example, if you have a field called \", _jsx(_components.code, {\n        children: \"name\"\n      }), \" in your form, you can include this in the email body like so:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-html\",\n        children: \"Thank you for your submission, {{name}}!\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can also use \", _jsx(_components.code, {\n        children: \"{{*}}\"\n      }), \" as a wildcard to output all the data in a key:value format and \", _jsx(_components.code, {\n        children: \"{{*:table}}\"\n      }), \" to output all the data in a table format.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"TypeScript\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"All types can be directly imported:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type {\\n  PluginConfig,\\n  Form,\\n  FormSubmission,\\n  FieldsConfig,\\n  BeforeEmail,\\n  HandlePayment,\\n  ...\\n} from \\\"@payloadcms/plugin-form-builder/types\\\";\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Examples\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.a, {\n        href: \"https://github.com/payloadcms/payload/tree/main/examples\",\n        children: \"Examples Directory\"\n      }), \" contains an official \", _jsx(_components.a, {\n        href: \"https://github.com/payloadcms/payload/tree/main/examples/form-builder\",\n        children: \"Form Builder Plugin Example\"\n      }), \" which demonstrates exactly how to configure this plugin in Payload and implement it on your front-end. We've also included an in-depth walk-through of how to build a form from scratch in our \", _jsx(_components.a, {\n        href: \"https://payloadcms.com/blog/create-custom-forms-with-the-official-form-builder-plugin\",\n        children: \"Form Builder Plugin Blog Post\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Troubleshooting\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Below are some common troubleshooting tips. To help other developers, please contribute to this section as you troubleshoot your own application.\"\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"SendGrid 403 Forbidden Error\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"If you are using \", _jsx(_components.a, {\n          href: \"https://docs.sendgrid.com/ui/account-and-settings/how-to-set-up-link-branding\",\n          children: \"SendGrid Link Branding\"\n        }), \" to remove the \\\"via sendgrid.net\\\" part of your email, you must also setup \", _jsx(_components.a, {\n          href: \"https://docs.sendgrid.com/ui/account-and-settings/how-to-set-up-domain-authentication\",\n          children: \"Domain Authentication\"\n        }), \". This means you can only send emails from an address on this domain — so the \", _jsx(_components.code, {\n          children: \"from\"\n        }), \" addresses in your form submission emails \", _jsx(_components.strong, {\n          children: _jsx(_components.em, {\n            children: \"cannot\"\n          })\n        }), \" be anything other than \", _jsx(_components.code, {\n          children: \"something@your_domain.com\"\n        }), \". This means that from \", _jsx(_components.code, {\n          children: \"{{email}}\"\n        }), \" will not work, but \", _jsx(_components.code, {\n          children: \"website@your_domain.com\"\n        }), \" will. You can still send the form's email address in the body of the email.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Screenshots\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://github.com/payloadcms/plugin-form-builder/blob/main/images/screenshot-1.jpg?raw=true\",\n        alt: \"screenshot 1\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://github.com/payloadcms/plugin-form-builder/blob/main/images/screenshot-2.jpg?raw=true\",\n        alt: \"screenshot 2\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://github.com/payloadcms/plugin-form-builder/blob/main/images/screenshot-3.jpg?raw=true\",\n        alt: \"screenshot 3\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://github.com/payloadcms/plugin-form-builder/blob/main/images/screenshot-4.jpg?raw=true\",\n        alt: \"screenshot 4\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://github.com/payloadcms/plugin-form-builder/blob/main/images/screenshot-5.jpg?raw=true\",\n        alt: \"screenshot 5\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://github.com/payloadcms/plugin-form-builder/blob/main/images/screenshot-6.jpg?raw=true\",\n        alt: \"screenshot 6\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}},"__N_SSG":true}