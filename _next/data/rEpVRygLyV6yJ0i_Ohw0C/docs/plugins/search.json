{"pageProps":{"frontMatter":{"title":"Search Plugin","label":"Search","order":40,"desc":"Generates records of your documents that are extremely fast to search on.","keywords":"plugins, search, search plugin, search engine, search index, search results, search bar, search box, search field, search form, search input"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    code: \"code\",\n    em: \"em\",\n    a: \"a\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    h3: \"h3\",\n    h4: \"h4\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://img.shields.io/npm/v/@payloadcms/plugin-search\",\n        alt: \"https://www.npmjs.com/package/@payloadcms/plugin-search\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This plugin generates records of your documents that are extremely fast to search on. It does so by creating a new \", _jsx(_components.code, {\n        children: \"search\"\n      }), \" collection that is indexed in the database then saving a static copy of each of your documents using only search-critical data. Search records are automatically created, synced, and deleted behind-the-scenes as you manage your application's documents.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For example, if you have a posts collection that is extremely large and complex, this would allow you to sync just the title, excerpt, and slug of each post so you can query on \", _jsx(_components.em, {\n        children: \"that\"\n      }), \" instead of the original post directly. Search records are static, so querying them also has the significant advantage of bypassing any hooks that may present be on the original documents. You define exactly what data is synced, and you can even modify or fallback this data before it is saved on a per-document basis.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To query search results, use all the existing Payload APIs that you are already familiar with. You can also prioritize search results by setting a custom priority for each collection. For example, you may want to list blog posts before pages. Or you may want one specific post to always take appear first. Search records are given a \", _jsx(_components.code, {\n        children: \"priority\"\n      }), \" field that can be used as the \", _jsx(_components.code, {\n        children: \"?sort=\"\n      }), \" parameter in your queries.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This plugin is a great way to implement a fast, immersive search experience such as a search bar in a front-end application. Many applications may not need the power and complexity of a third-party service like Algolia or ElasticSearch. This plugin provides a first-party alternative that is easy to set up and runs entirely on your own database.\"\n    }), \"\\n\", _jsx(Banner, {\n      type: \"info\",\n      children: _jsxs(_components.p, {\n        children: [\"This plugin is completely open-source and the \", _jsx(_components.a, {\n          href: \"https://github.com/payloadcms/payload/tree/main/packages/plugin-search\",\n          children: \"source code can be found\\nhere\"\n        }), \".\\nIf you need help, check out our \", _jsx(_components.a, {\n          href: \"https://payloadcms.com/community-help\",\n          children: \"Community\\nHelp\"\n        }), \". If you think you've found a bug,\\nplease \", _jsx(_components.a, {\n          href: \"https://github.com/payloadcms/payload/issues/new?assignees=&labels=plugin%3A%20search&template=bug_report.md&title=plugin-search%3A\",\n          children: \"open a new\\nissue\"\n        }), \"\\nwith as much detail as possible.\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Core Features\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Automatically adds an indexed \", _jsx(_components.code, {\n          children: \"search\"\n        }), \" collection to your database\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Automatically creates, syncs, and deletes search records as you manage your documents\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Saves only search-critical data that you define (e.g. title, excerpt, etc.)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Allows you to query search results using first-party Payload APIs\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Allows you to query documents without triggering any of their underlying hooks\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Allows you to easily prioritize search results by collection or document\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Allows you to reindex search results by collection on demand\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Installation\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Install the plugin using any JavaScript package manager like \", _jsx(_components.a, {\n        href: \"https://pnpm.io\",\n        children: \"pnpm\"\n      }), \", \", _jsx(_components.a, {\n        href: \"https://npmjs.com\",\n        children: \"npm\"\n      }), \", or \", _jsx(_components.a, {\n        href: \"https://yarnpkg.com\",\n        children: \"Yarn\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"  pnpm add @payloadcms/plugin-search\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Basic Usage\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In the \", _jsx(_components.code, {\n        children: \"plugins\"\n      }), \" array of your \", _jsx(_components.a, {\n        href: \"https://payloadcms.com/docs/configuration/overview\",\n        children: \"Payload Config\"\n      }), \", call the plugin with \", _jsx(_components.a, {\n        href: \"#options\",\n        children: \"options\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"import { buildConfig } from 'payload'\\nimport { searchPlugin } from '@payloadcms/plugin-search'\\n\\nconst config = buildConfig({\\n  collections: [\\n    {\\n      slug: 'pages',\\n      fields: [],\\n    },\\n    {\\n      slug: 'posts',\\n      fields: [],\\n    },\\n  ],\\n  plugins: [\\n    searchPlugin({\\n      collections: ['pages', 'posts'],\\n      defaultPriorities: {\\n        pages: 10,\\n        posts: 20,\\n      },\\n    }),\\n  ],\\n})\\n\\nexport default config\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Options\"\n    }), \"\\n\", _jsx(_components.h4, {\n      children: _jsx(_components.code, {\n        children: \"collections\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"collections\"\n      }), \" property is an array of collection slugs to enable syncing to search. Enabled collections receive a \", _jsx(_components.code, {\n        children: \"beforeChange\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"afterDelete\"\n      }), \" hook that creates, updates, and deletes its respective search record as it changes over time.\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: _jsx(_components.code, {\n        children: \"localize\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By default, the search plugin will add \", _jsx(_components.code, {\n        children: \"localization: true\"\n      }), \" to the \", _jsx(_components.code, {\n        children: \"title\"\n      }), \" field of the newly added \", _jsx(_components.code, {\n        children: \"search\"\n      }), \" collection if you have localization enabled. If you would like to disable this behavior, you can set this to \", _jsx(_components.code, {\n        children: \"false\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: _jsx(_components.code, {\n        children: \"defaultPriorities\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This plugin automatically adds a \", _jsx(_components.code, {\n        children: \"priority\"\n      }), \" field to the \", _jsx(_components.code, {\n        children: \"search\"\n      }), \" collection that can be used as the \", _jsx(_components.code, {\n        children: \"?sort=\"\n      }), \" parameter in your queries. For example, you may want to list blog posts before pages. Or you may want one specific post to always take appear first.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"defaultPriorities\"\n      }), \" property is used to set a fallback \", _jsx(_components.code, {\n        children: \"priority\"\n      }), \" on search records during the \", _jsx(_components.code, {\n        children: \"create\"\n      }), \" operation. It accepts an object with keys that are your collection slugs and values that can either be a number or a function that returns a number. The function receives the \", _jsx(_components.code, {\n        children: \"doc\"\n      }), \" as an argument, which is the document being created.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"// payload.config.ts\\n{\\n  // ...\\n  searchPlugin({\\n    defaultPriorities: {\\n      pages: ({ doc }) => (doc.title.startsWith('Hello, world!') ? 1 : 10),\\n      posts: 20,\\n    },\\n  }),\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: _jsx(_components.code, {\n        children: \"searchOverrides\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This plugin automatically creates the \", _jsx(_components.code, {\n        children: \"search\"\n      }), \" collection, but you can override anything on this collection via the \", _jsx(_components.code, {\n        children: \"searchOverrides\"\n      }), \" property. It accepts anything from the \", _jsx(_components.a, {\n        href: \"https://payloadcms.com/docs/configuration/collections\",\n        children: \"Payload Collection Config\"\n      }), \" and merges it in with the default \", _jsx(_components.code, {\n        children: \"search\"\n      }), \" collection config provided by the plugin.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Note that the \", _jsx(_components.code, {\n        children: \"fields\"\n      }), \" property is a function that receives an object with a \", _jsx(_components.code, {\n        children: \"defaultFields\"\n      }), \" key. This is an array of fields that are automatically added to the \", _jsx(_components.code, {\n        children: \"search\"\n      }), \" collection. You can modify this array or add new fields to it.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"// payload.config.ts\\n{\\n  // ...\\n  searchPlugin({\\n    searchOverrides: {\\n      slug: 'search-results',\\n      fields: ({ defaultFields }) => [\\n        ...defaultFields,\\n        {\\n          name: 'excerpt',\\n          type: 'textarea',\\n          admin: {\\n            position: 'sidebar',\\n          },\\n        },\\n      ],\\n    },\\n  }),\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: _jsx(_components.code, {\n        children: \"beforeSync\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Before creating or updating a search record, the \", _jsx(_components.code, {\n        children: \"beforeSync\"\n      }), \" function runs. This is an \", _jsx(_components.a, {\n        href: \"https://payloadcms.com/docs/hooks/globals#afterchange\",\n        children: \"afterChange\"\n      }), \" hook that allows you to modify the data or provide fallbacks before its search record is created or updated.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"// payload.config.ts\\n{\\n  // ...\\n  searchPlugin({\\n    beforeSync: ({ originalDoc, searchDoc }) => ({\\n      ...searchDoc,\\n      // - Modify your docs in any way here, this can be async\\n      // - You also need to add the `excerpt` field in the `searchOverrides` config\\n      excerpt: originalDoc?.excerpt || 'This is a fallback excerpt',\\n    }),\\n  }),\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: _jsx(_components.code, {\n        children: \"syncDrafts\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When \", _jsx(_components.code, {\n        children: \"syncDrafts\"\n      }), \" is true, draft documents will be synced to search. This is false by default. You must have \", _jsx(_components.a, {\n        href: \"https://payloadcms.com/docs/versions/drafts\",\n        children: \"Payload Drafts\"\n      }), \" enabled for this to apply.\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: _jsx(_components.code, {\n        children: \"deleteDrafts\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If true, will delete documents from search whose status changes to draft. This is true by default. You must have \", _jsx(_components.a, {\n        href: \"https://payloadcms.com/docs/versions/drafts\",\n        children: \"Payload Drafts\"\n      }), \" enabled for this to apply.\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: _jsx(_components.code, {\n        children: \"reindexBatchSize\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"A number that, when specified, will be used as the value to determine how many search documents to fetch for reindexing at a time in each batch. If not set, this will default to \", _jsx(_components.code, {\n        children: \"50\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Collection reindexing\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Collection reindexing allows you to recreate search documents from your search-enabled collections on demand. This is useful if you have existing documents that don't already have search indexes, commonly when adding \", _jsx(_components.code, {\n        children: \"plugin-search\"\n      }), \" to an existing project. To get started, navigate to your search collection and click the pill in the top right actions slot of the list view labelled \", _jsx(_components.code, {\n        children: \"Reindex\"\n      }), \". This will open a popup with options to select one of your search-enabled collections, or all, for reindexing.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"TypeScript\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"All types can be directly imported:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { SearchConfig, BeforeSync } from '@payloadcms/plugin-search/types'\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}},"__N_SSG":true}