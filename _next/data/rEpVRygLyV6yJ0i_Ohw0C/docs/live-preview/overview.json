{"pageProps":{"frontMatter":{"title":"Live Preview","label":"Overview","order":10,"desc":"With Live Preview you can render your front-end application directly within the Admin Panel. Your changes take effect as you type. No save needed.","keywords":"live preview, preview, live, iframe, iframe preview, visual editing, design"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    code: \"code\",\n    pre: \"pre\",\n    strong: \"strong\",\n    h2: \"h2\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    em: \"em\",\n    h3: \"h3\",\n    h4: \"h4\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"With Live Preview you can render your front-end application directly within the \", _jsx(_components.a, {\n        href: \"../admin/overview\",\n        children: \"Admin Panel\"\n      }), \". As you type, your changes take effect in real-time. No need to save a draft or publish your changes. This works in both \", _jsx(_components.a, {\n        href: \"./server\",\n        children: \"Server-side\"\n      }), \" as well as \", _jsx(_components.a, {\n        href: \"./client\",\n        children: \"Client-side\"\n      }), \" environments.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Live Preview works by rendering an iframe on the page that loads your front-end application. The Admin Panel communicates with your app through \", _jsx(_components.a, {\n        href: \"https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage\",\n        children: _jsx(_components.code, {\n          children: \"window.postMessage\"\n        })\n      }), \" events. These events are emitted every time a change is made to the Document. Your app then listens for these events and re-renders itself with the data it receives.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To add Live Preview, use the \", _jsx(_components.code, {\n        children: \"admin.livePreview\"\n      }), \" property in your \", _jsx(_components.a, {\n        href: \"../configuration/overview\",\n        children: \"Payload Config\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { buildConfig } from 'payload'\\n\\nconst config = buildConfig({\\n  // ...\\n  admin: {\\n    // ...\\n    // highlight-start\\n    livePreview: {\\n      url: 'http://localhost:3000',\\n      collections: ['pages'],\\n    },\\n    // highlight-end\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Reminder:\"\n        }), \" Alternatively, you can define the \", _jsx(_components.code, {\n          children: \"admin.livePreview\"\n        }), \" property\\non individual \", _jsx(_components.a, {\n          href: \"../configuration/collections#admin-options\",\n          children: \"Collection Admin\\nConfigs\"\n        }), \" and \", _jsx(_components.a, {\n          href: \"../configuration/globals#admin-options\",\n          children: \"Global Admin\\nConfigs\"\n        }), \". Settings defined here will\\nbe merged into the top-level as overrides.\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Options\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Setting up Live Preview is easy. This can be done either globally through the \", _jsx(_components.a, {\n        href: \"../admin/overview\",\n        children: \"Root Admin Config\"\n      }), \", or on individual \", _jsx(_components.a, {\n        href: \"../configuration/collections#admin-options\",\n        children: \"Collection Admin Configs\"\n      }), \" and \", _jsx(_components.a, {\n        href: \"../configuration/globals#admin-options\",\n        children: \"Global Admin Configs\"\n      }), \". Once configured, a new \\\"Live Preview\\\" tab will appear at the top of enabled Documents. Navigating to this tab opens the preview window and loads your front-end application.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The following options are available:\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Path\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"url\"\n              })\n            }), \" *\"]\n          }), _jsxs(_components.td, {\n            children: [\"String, or function that returns a string, pointing to your front-end application. This value is used as the iframe \", _jsx(_components.code, {\n              children: \"src\"\n            }), \". \", _jsx(_components.a, {\n              href: \"#url\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"breakpoints\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Array of breakpoints to be used as “device sizes” in the preview window. Each item appears as an option in the toolbar. \", _jsx(_components.a, {\n              href: \"#breakpoints\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"collections\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Array of collection slugs to enable Live Preview on.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"globals\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Array of global slugs to enable Live Preview on.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"* An asterisk denotes that a property is required.\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"URL\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"url\"\n      }), \" property resolves to a string that points to your front-end application. This value is used as the \", _jsx(_components.code, {\n        children: \"src\"\n      }), \" attribute of the iframe rendering your front-end. Once loaded, the Admin Panel will communicate directly with your app through \", _jsx(_components.code, {\n        children: \"window.postMessage\"\n      }), \" events.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To set the URL, use the \", _jsx(_components.code, {\n        children: \"admin.livePreview.url\"\n      }), \" property in your \", _jsx(_components.a, {\n        href: \"../configuration/overview\",\n        children: \"Payload Config\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { buildConfig } from 'payload'\\n\\nconst config = buildConfig({\\n  // ...\\n  admin: {\\n    // ...\\n    livePreview: {\\n      url: 'http://localhost:3000', // highlight-line\\n      collections: ['pages'],\\n    },\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Dynamic URLs\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can also pass a function in order to dynamically format URLs. This is useful for multi-tenant applications, localization, or any other scenario where the URL needs to be generated based on the Document being edited.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To set dynamic URLs, set the \", _jsx(_components.code, {\n        children: \"admin.livePreview.url\"\n      }), \" property in your \", _jsx(_components.a, {\n        href: \"../configuration/overview\",\n        children: \"Payload Config\"\n      }), \" to a function:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { buildConfig } from 'payload'\\n\\nconst config = buildConfig({\\n  // ...\\n  admin: {\\n    // ...\\n    livePreview: {\\n      // highlight-start\\n      url: ({\\n        data,\\n        collectionConfig,\\n        locale\\n      }) => `${data.tenant.url}${ // Multi-tenant top-level domain\\n        collectionConfig.slug === 'posts' ? `/posts/${data.slug}` : `${data.slug !== 'home' : `/${data.slug}` : ''}`\\n      }${locale ? `?locale=${locale?.code}` : ''}`, // Localization query param\\n      collections: ['pages'],\\n    },\\n    // highlight-end\\n  }\\n})\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The following arguments are provided to the \", _jsx(_components.code, {\n        children: \"url\"\n      }), \" function:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Path\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"data\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The data of the Document being edited. This includes changes that have not yet been saved.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"locale\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The locale currently being edited (if applicable). \", _jsx(_components.a, {\n              href: \"../configuration/localization\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"collectionConfig\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The Collection Admin Config of the Document being edited. \", _jsx(_components.a, {\n              href: \"../configuration/collections#admin-options\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"globalConfig\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The Global Admin Config of the Document being edited. \", _jsx(_components.a, {\n              href: \"../configuration/globals#admin-options\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"req\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The Payload Request object.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can return either an absolute URL or relative URL from this function. If you don't know the URL of your frontend at build-time, you can return a relative URL, and in that case, Payload will automatically construct an absolute URL by injecting the protocol, domain, and port from your browser window. Returning a relative URL is helpful for platforms like Vercel where you may have preview deployment URLs that are unknown at build time.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If your application requires a fully qualified URL, or you are attempting to preview with a frontend on a different domain, you can use the \", _jsx(_components.code, {\n        children: \"req\"\n      }), \" property to build this URL:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"url: ({ data, req }) => `${req.protocol}//${req.host}/${data.slug}` // highlight-line\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Breakpoints\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The breakpoints property is an array of objects which are used as “device sizes” in the preview window. Each item will render as an option in the toolbar. When selected, the preview window will resize to the exact dimensions specified in that breakpoint.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To set breakpoints, use the \", _jsx(_components.code, {\n        children: \"admin.livePreview.breakpoints\"\n      }), \" property in your \", _jsx(_components.a, {\n        href: \"../configuration/overview\",\n        children: \"Payload Config\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { buildConfig } from 'payload'\\n\\nconst config = buildConfig({\\n  // ...\\n  admin: {\\n    // ...\\n    livePreview: {\\n      url: 'http://localhost:3000',\\n      // highlight-start\\n      breakpoints: [\\n        {\\n          label: 'Mobile',\\n          name: 'mobile',\\n          width: 375,\\n          height: 667,\\n        },\\n      ],\\n      // highlight-end\\n    },\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The following options are available for each breakpoint:\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Path\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"label\"\n              })\n            }), \" *\"]\n          }), _jsx(_components.td, {\n            children: \"The label to display in the drop-down. This is what the user will see.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"name\"\n              })\n            }), \" *\"]\n          }), _jsx(_components.td, {\n            children: \"The name of the breakpoint.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"width\"\n              })\n            }), \" *\"]\n          }), _jsx(_components.td, {\n            children: \"The width of the breakpoint. This is used to set the width of the iframe.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"height\"\n              })\n            }), \" *\"]\n          }), _jsx(_components.td, {\n            children: \"The height of the breakpoint. This is used to set the height of the iframe.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"* An asterisk denotes that a property is required.\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \\\"Responsive\\\" option is always available in the drop-down and requires no additional configuration. This is the default breakpoint that will be used on initial load. This option styles the iframe with a width and height of \", _jsx(_components.code, {\n        children: \"100%\"\n      }), \" so that it fills the screen at its maximum size and automatically resizes as the window changes size.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You may also explicitly resize the Live Preview by using the corresponding inputs in the toolbar. This will temporarily override the breakpoint selection to \\\"Custom\\\" until a predefined breakpoint is selected once again.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If you prefer to freely resize the Live Preview without the use of breakpoints, you can open it in a new window by clicking the button in the toolbar. This will close the iframe and open a new window which can be resized as you wish. Closing it will automatically re-open the iframe.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Example\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For a working demonstration of this, check out the official \", _jsx(_components.a, {\n        href: \"https://github.com/payloadcms/payload/tree/main/examples/live-preview\",\n        children: \"Live Preview Example\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}},"__N_SSG":true}