{"pageProps":{"frontMatter":{"title":"List View","label":"List View","order":70,"desc":null,"keywords":"admin, components, custom, documentation, Content Management System, cms, headless, javascript, node, react, nextjs"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    strong: \"strong\",\n    h2: \"h2\",\n    code: \"code\",\n    pre: \"pre\",\n    h4: \"h4\",\n    em: \"em\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"The List View is where users interact with a list of \", _jsx(_components.a, {\n        href: \"../configuration/collections\",\n        children: \"Collection\"\n      }), \" Documents within the \", _jsx(_components.a, {\n        href: \"../admin/overview\",\n        children: \"Admin Panel\"\n      }), \". This is where they can view, sort, filter, and paginate their documents to find exactly what they're looking for. This is also where users can perform bulk operations on multiple documents at once, such as deleting, editing, or publishing many.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The List View can be swapped out in its entirety for a Custom View, or it can be injected with a number of Custom Components to add additional functionality or presentational elements without replacing the entire view.\"\n    }), \"\\n\", _jsx(Banner, {\n      type: \"info\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Note:\"\n        }), \" Only \", _jsx(_components.a, {\n          href: \"../configuration/collections\",\n          children: \"Collections\"\n        }), \" have a List View.\\n\", _jsx(_components.a, {\n          href: \"../configuration/globals\",\n          children: \"Globals\"\n        }), \" do not have a List View as they are single\\ndocuments.\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Custom List View\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To swap out the entire List View with a \", _jsx(_components.a, {\n        href: \"./custom-views\",\n        children: \"Custom View\"\n      }), \", use the \", _jsx(_components.code, {\n        children: \"admin.components.views.list\"\n      }), \" property in your \", _jsx(_components.a, {\n        href: \"../configuration/overview\",\n        children: \"Payload Config\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { buildConfig } from 'payload'\\n\\nconst config = buildConfig({\\n  // ...\\n  admin: {\\n    components: {\\n      views: {\\n        // highlight-start\\n        list: '/path/to/MyCustomListView',\\n        // highlight-end\\n      },\\n    },\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here is an example of a custom List View:\"\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Server Component\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import React from 'react'\\nimport type { ListViewServerProps } from 'payload'\\nimport { DefaultListView } from '@payloadcms/ui'\\n\\nexport function MyCustomServerListView(props: ListViewServerProps) {\\n  return <div>This is a custom List View (Server)</div>\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Client Component\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"'use client'\\nimport React from 'react'\\nimport type { ListViewClientProps } from 'payload'\\n\\nexport function MyCustomClientListView(props: ListViewClientProps) {\\n  return <div>This is a custom List View (Client)</div>\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsxs(_components.em, {\n        children: [\"For details on how to build Custom Views, including all available props, see \", _jsx(_components.a, {\n          href: \"./custom-views#building-custom-views\",\n          children: \"Building Custom Views\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Custom Components\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In addition to swapping out the entire List View with a \", _jsx(_components.a, {\n        href: \"./custom-views\",\n        children: \"Custom View\"\n      }), \", you can also override individual components. This allows you to customize specific parts of the List View without swapping out the entire view for your own.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To override List View components for a Collection, use the \", _jsx(_components.code, {\n        children: \"admin.components\"\n      }), \" property in your \", _jsx(_components.a, {\n        href: \"../configuration/collections\",\n        children: \"Collection Config\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { CollectionConfig } from 'payload'\\n\\nexport const MyCollection: CollectionConfig = {\\n  // ...\\n  admin: {\\n    // highlight-start\\n    components: {\\n      // ...\\n    },\\n    // highlight-end\\n  },\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The following options are available:\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Path\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"beforeList\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"An array of custom components to inject before the list of documents in the List View. \", _jsx(_components.a, {\n              href: \"#beforelist\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"beforeListTable\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"An array of custom components to inject before the table of documents in the List View. \", _jsx(_components.a, {\n              href: \"#beforelisttable\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"afterList\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"An array of custom components to inject after the list of documents in the List View. \", _jsx(_components.a, {\n              href: \"#afterlist\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"afterListTable\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"An array of custom components to inject after the table of documents in the List View. \", _jsx(_components.a, {\n              href: \"#afterlisttable\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"Description\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"A component to render a description of the Collection. \", _jsx(_components.a, {\n              href: \"#description\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"beforeList\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"beforeList\"\n      }), \" property allows you to inject custom components before the list of documents in the List View.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To add \", _jsx(_components.code, {\n        children: \"beforeList\"\n      }), \" components, use the \", _jsx(_components.code, {\n        children: \"components.beforeList\"\n      }), \" property in your \", _jsx(_components.a, {\n        href: \"../configuration/collections\",\n        children: \"Collection Config\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { CollectionConfig } from 'payload'\\n\\nexport const MyCollection: CollectionConfig = {\\n  // ...\\n  admin: {\\n    components: {\\n      // highlight-start\\n      beforeList: ['/path/to/MyBeforeListComponent'],\\n      // highlight-end\\n    },\\n  },\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here's an example of a custom \", _jsx(_components.code, {\n        children: \"beforeList\"\n      }), \" component:\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Server Component\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import React from 'react'\\nimport type { BeforeListServerProps } from 'payload'\\n\\nexport function MyBeforeListComponent(props: BeforeListServerProps) {\\n  return <div>This is a custom beforeList component (Server)</div>\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Client Component\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"'use client'\\nimport React from 'react'\\nimport type { BeforeListClientProps } from 'payload'\\n\\nexport function MyBeforeListComponent(props: BeforeListClientProps) {\\n  return <div>This is a custom beforeList component (Client)</div>\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"beforeListTable\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"beforeListTable\"\n      }), \" property allows you to inject custom components before the table of documents in the List View.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To add \", _jsx(_components.code, {\n        children: \"beforeListTable\"\n      }), \" components, use the \", _jsx(_components.code, {\n        children: \"components.beforeListTable\"\n      }), \" property in your \", _jsx(_components.a, {\n        href: \"../configuration/collections\",\n        children: \"Collection Config\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { CollectionConfig } from 'payload'\\n\\nexport const MyCollection: CollectionConfig = {\\n  // ...\\n  admin: {\\n    components: {\\n      // highlight-start\\n      beforeListTable: ['/path/to/MyBeforeListTableComponent'],\\n      // highlight-end\\n    },\\n  },\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here's an example of a custom \", _jsx(_components.code, {\n        children: \"beforeListTable\"\n      }), \" component:\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Server Component\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import React from 'react'\\nimport type { BeforeListTableServerProps } from 'payload'\\n\\nexport function MyBeforeListTableComponent(props: BeforeListTableServerProps) {\\n  return <div>This is a custom beforeListTable component (Server)</div>\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Client Component\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"'use client'\\nimport React from 'react'\\nimport type { BeforeListTableClientProps } from 'payload'\\n\\nexport function MyBeforeListTableComponent(props: BeforeListTableClientProps) {\\n  return <div>This is a custom beforeListTable component (Client)</div>\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"afterList\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"afterList\"\n      }), \" property allows you to inject custom components after the list of documents in the List View.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To add \", _jsx(_components.code, {\n        children: \"afterList\"\n      }), \" components, use the \", _jsx(_components.code, {\n        children: \"components.afterList\"\n      }), \" property in your \", _jsx(_components.a, {\n        href: \"../configuration/collections\",\n        children: \"Collection Config\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { CollectionConfig } from 'payload'\\n\\nexport const MyCollection: CollectionConfig = {\\n  // ...\\n  admin: {\\n    components: {\\n      // highlight-start\\n      afterList: ['/path/to/MyAfterListComponent'],\\n      // highlight-end\\n    },\\n  },\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here's an example of a custom \", _jsx(_components.code, {\n        children: \"afterList\"\n      }), \" component:\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Server Component\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import React from 'react'\\nimport type { AfterListServerProps } from 'payload'\\n\\nexport function MyAfterListComponent(props: AfterListServerProps) {\\n  return <div>This is a custom afterList component (Server)</div>\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Client Component\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"'use client'\\nimport React from 'react'\\nimport type { AfterListClientProps } from 'payload'\\n\\nexport function MyAfterListComponent(props: AfterListClientProps) {\\n  return <div>This is a custom afterList component (Client)</div>\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"afterListTable\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"afterListTable\"\n      }), \" property allows you to inject custom components after the table of documents in the List View.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To add \", _jsx(_components.code, {\n        children: \"afterListTable\"\n      }), \" components, use the \", _jsx(_components.code, {\n        children: \"components.afterListTable\"\n      }), \" property in your \", _jsx(_components.a, {\n        href: \"../configuration/collections\",\n        children: \"Collection Config\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { CollectionConfig } from 'payload'\\n\\nexport const MyCollection: CollectionConfig = {\\n  // ...\\n  admin: {\\n    components: {\\n      // highlight-start\\n      afterListTable: ['/path/to/MyAfterListTableComponent'],\\n      // highlight-end\\n    },\\n  },\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here's an example of a custom \", _jsx(_components.code, {\n        children: \"afterListTable\"\n      }), \" component:\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Server Component\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import React from 'react'\\nimport type { AfterListTableServerProps } from 'payload'\\n\\nexport function MyAfterListTableComponent(props: AfterListTableServerProps) {\\n  return <div>This is a custom afterListTable component (Server)</div>\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Client Component\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"'use client'\\nimport React from 'react'\\nimport type { AfterListTableClientProps } from 'payload'\\n\\nexport function MyAfterListTableComponent(props: AfterListTableClientProps) {\\n  return <div>This is a custom afterListTable component (Client)</div>\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"Description\"\n      }), \" property allows you to render a custom description of the Collection in the List View.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To add a \", _jsx(_components.code, {\n        children: \"Description\"\n      }), \" component, use the \", _jsx(_components.code, {\n        children: \"components.Description\"\n      }), \" property in your \", _jsx(_components.a, {\n        href: \"../configuration/collections\",\n        children: \"Collection Config\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { CollectionConfig } from 'payload'\\n\\nexport const MyCollection: CollectionConfig = {\\n  // ...\\n  admin: {\\n    components: {\\n      // highlight-start\\n      Description: '/path/to/MyDescriptionComponent',\\n      // highlight-end\\n    },\\n  },\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Note:\"\n        }), \" The \", _jsx(_components.code, {\n          children: \"Description\"\n        }), \" component is shared between the List View and the\\n\", _jsx(_components.a, {\n          href: \"./edit-view\",\n          children: \"Edit View\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here's an example of a custom \", _jsx(_components.code, {\n        children: \"Description\"\n      }), \" component:\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Server Component\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import React from 'react'\\nimport type { ViewDescriptionServerProps } from 'payload'\\n\\nexport function MyDescriptionComponent(props: ViewDescriptionServerProps) {\\n  return <div>This is a custom Collection description component (Server)</div>\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Client Component\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"'use client'\\nimport React from 'react'\\nimport type { ViewDescriptionClientProps } from 'payload'\\n\\nexport function MyDescriptionComponent(props: ViewDescriptionClientProps) {\\n  return <div>This is a custom Collection description component (Client)</div>\\n}\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}},"__N_SSG":true}