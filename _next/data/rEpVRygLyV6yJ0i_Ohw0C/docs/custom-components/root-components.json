{"pageProps":{"frontMatter":{"title":"Root Components","label":"Root Components","order":20,"desc":null,"keywords":"admin, components, custom, documentation, Content Management System, cms, headless, javascript, node, react, nextjs"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    code: \"code\",\n    pre: \"pre\",\n    h2: \"h2\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    em: \"em\",\n    strong: \"strong\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"Root Components are those that affect the \", _jsx(_components.a, {\n        href: \"../admin/overview\",\n        children: \"Admin Panel\"\n      }), \" at a high-level, such as the logo or the main nav. You can swap out these components with your own \", _jsx(_components.a, {\n        href: \"./overview\",\n        children: \"Custom Components\"\n      }), \" to create a completely custom look and feel.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When combined with \", _jsx(_components.a, {\n        href: \"../admin/customizing-css\",\n        children: \"Custom CSS\"\n      }), \", you can create a truly unique experience for your users, such as white-labeling the Admin Panel to match your brand.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To override Root Components, use the \", _jsx(_components.code, {\n        children: \"admin.components\"\n      }), \" property at the root of your \", _jsx(_components.a, {\n        href: \"../configuration/overview\",\n        children: \"Payload Config\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { buildConfig } from 'payload'\\n\\nexport default buildConfig({\\n  // ...\\n  admin: {\\n    // highlight-start\\n    components: {\\n      // ...\\n    },\\n    // highlight-end\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Config Options\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The following options are available:\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Path\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"actions\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"An array of Custom Components to be rendered \", _jsx(_components.em, {\n              children: \"within\"\n            }), \" the header of the Admin Panel, providing additional interactivity and functionality. \", _jsx(_components.a, {\n              href: \"#actions\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"afterDashboard\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"An array of Custom Components to inject into the built-in Dashboard, \", _jsx(_components.em, {\n              children: \"after\"\n            }), \" the default dashboard contents. \", _jsx(_components.a, {\n              href: \"#afterdashboard\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"afterLogin\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"An array of Custom Components to inject into the built-in Login, \", _jsx(_components.em, {\n              children: \"after\"\n            }), \" the default login form. \", _jsx(_components.a, {\n              href: \"#afterlogin\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"afterNavLinks\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"An array of Custom Components to inject into the built-in Nav, \", _jsx(_components.em, {\n              children: \"after\"\n            }), \" the links. \", _jsx(_components.a, {\n              href: \"#afternavlinks\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"beforeDashboard\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"An array of Custom Components to inject into the built-in Dashboard, \", _jsx(_components.em, {\n              children: \"before\"\n            }), \" the default dashboard contents. \", _jsx(_components.a, {\n              href: \"#beforedashboard\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"beforeLogin\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"An array of Custom Components to inject into the built-in Login, \", _jsx(_components.em, {\n              children: \"before\"\n            }), \" the default login form. \", _jsx(_components.a, {\n              href: \"#beforelogin\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"beforeNavLinks\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"An array of Custom Components to inject into the built-in Nav, \", _jsx(_components.em, {\n              children: \"before\"\n            }), \" the links themselves. \", _jsx(_components.a, {\n              href: \"#beforenavlinks\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"graphics.Icon\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The simplified logo used in contexts like the the \", _jsx(_components.code, {\n              children: \"Nav\"\n            }), \" component. \", _jsx(_components.a, {\n              href: \"#graphicsicon\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"graphics.Logo\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The full logo used in contexts like the \", _jsx(_components.code, {\n              children: \"Login\"\n            }), \" view. \", _jsx(_components.a, {\n              href: \"#graphicslogo\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"header\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"An array of Custom Components to be injected above the Payload header. \", _jsx(_components.a, {\n              href: \"#header\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"logout.Button\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The button displayed in the sidebar that logs the user out. \", _jsx(_components.a, {\n              href: \"#logoutbutton\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"Nav\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Contains the sidebar / mobile menu in its entirety. \", _jsx(_components.a, {\n              href: \"#nav\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"providers\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Custom \", _jsx(_components.a, {\n              href: \"https://react.dev/learn/scaling-up-with-reducer-and-context\",\n              children: \"React Context\"\n            }), \" providers that will wrap the entire Admin Panel. \", _jsx(_components.a, {\n              href: \"./custom-providers\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"views\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Override or create new views within the Admin Panel. \", _jsx(_components.a, {\n              href: \"./custom-views\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsxs(_components.em, {\n        children: [\"For details on how to build Custom Components, see \", _jsx(_components.a, {\n          href: \"./overview#building-custom-components\",\n          children: \"Building Custom Components\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"success\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Note:\"\n        }), \" You can also use set \", _jsx(_components.a, {\n          href: \"../configuration/collections#custom-components\",\n          children: \"Collection\\nComponents\"\n        }), \" and \", _jsx(_components.a, {\n          href: \"../configuration/globals#custom-components\",\n          children: \"Global\\nComponents\"\n        }), \" in their respective\\nconfigs.\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Components\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"actions\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Actions are rendered within the header of the Admin Panel. Actions are typically used to display buttons that add additional interactivity and functionality, although they can be anything you'd like.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To add an action, use the \", _jsx(_components.code, {\n        children: \"actions\"\n      }), \" property in your \", _jsx(_components.code, {\n        children: \"admin.components\"\n      }), \" config:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { buildConfig } from 'payload'\\n\\nexport default buildConfig({\\n  // ...\\n  admin: {\\n    // highlight-start\\n    components: {\\n      actions: ['/path/to/your/component'],\\n    },\\n    // highlight-end\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here is an example of a simple Action component:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"export default function MyCustomAction() {\\n  return (\\n    <button onClick={() => alert('Hello, world!')}>\\n      This is a custom action component\\n    </button>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"success\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Note:\"\n        }), \" You can also use add Actions to the \", _jsx(_components.a, {\n          href: \"./edit-view\",\n          children: \"Edit View\"\n        }), \" and\\n\", _jsx(_components.a, {\n          href: \"./list-view\",\n          children: \"List View\"\n        }), \" in their respective configs.\"]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"beforeDashboard\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"beforeDashboard\"\n      }), \" property allows you to inject Custom Components into the built-in Dashboard, before the default dashboard contents.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To add \", _jsx(_components.code, {\n        children: \"beforeDashboard\"\n      }), \" components, use the \", _jsx(_components.code, {\n        children: \"admin.components.beforeDashboard\"\n      }), \" property in your Payload Config:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { buildConfig } from 'payload'\\n\\nexport default buildConfig({\\n  // ...\\n  admin: {\\n    // highlight-start\\n    components: {\\n      beforeDashboard: ['/path/to/your/component'],\\n    },\\n    // highlight-end\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here is an example of a simple \", _jsx(_components.code, {\n        children: \"beforeDashboard\"\n      }), \" component:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"export default function MyBeforeDashboardComponent() {\\n  return <div>This is a custom component injected before the Dashboard.</div>\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"afterDashboard\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Similar to \", _jsx(_components.code, {\n        children: \"beforeDashboard\"\n      }), \", the \", _jsx(_components.code, {\n        children: \"afterDashboard\"\n      }), \" property allows you to inject Custom Components into the built-in Dashboard, \", _jsx(_components.em, {\n        children: \"after\"\n      }), \" the default dashboard contents.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To add \", _jsx(_components.code, {\n        children: \"afterDashboard\"\n      }), \" components, use the \", _jsx(_components.code, {\n        children: \"admin.components.afterDashboard\"\n      }), \" property in your Payload Config:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { buildConfig } from 'payload'\\n\\nexport default buildConfig({\\n  // ...\\n  admin: {\\n    // highlight-start\\n    components: {\\n      afterDashboard: ['/path/to/your/component'],\\n    },\\n    // highlight-end\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here is an example of a simple \", _jsx(_components.code, {\n        children: \"afterDashboard\"\n      }), \" component:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"export default function MyAfterDashboardComponent() {\\n  return <div>This is a custom component injected after the Dashboard.</div>\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"beforeLogin\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"beforeLogin\"\n      }), \" property allows you to inject Custom Components into the built-in Login view, \", _jsx(_components.em, {\n        children: \"before\"\n      }), \" the default login form.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To add \", _jsx(_components.code, {\n        children: \"beforeLogin\"\n      }), \" components, use the \", _jsx(_components.code, {\n        children: \"admin.components.beforeLogin\"\n      }), \" property in your Payload Config:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { buildConfig } from 'payload'\\n\\nexport default buildConfig({\\n  // ...\\n  admin: {\\n    // highlight-start\\n    components: {\\n      beforeLogin: ['/path/to/your/component'],\\n    },\\n    // highlight-end\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here is an example of a simple \", _jsx(_components.code, {\n        children: \"beforeLogin\"\n      }), \" component:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"export default function MyBeforeLoginComponent() {\\n  return <div>This is a custom component injected before the Login form.</div>\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"afterLogin\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Similar to \", _jsx(_components.code, {\n        children: \"beforeLogin\"\n      }), \", the \", _jsx(_components.code, {\n        children: \"afterLogin\"\n      }), \" property allows you to inject Custom Components into the built-in Login view, \", _jsx(_components.em, {\n        children: \"after\"\n      }), \" the default login form.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To add \", _jsx(_components.code, {\n        children: \"afterLogin\"\n      }), \" components, use the \", _jsx(_components.code, {\n        children: \"admin.components.afterLogin\"\n      }), \" property in your Payload Config:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { buildConfig } from 'payload'\\n\\nexport default buildConfig({\\n  // ...\\n  admin: {\\n    // highlight-start\\n    components: {\\n      afterLogin: ['/path/to/your/component'],\\n    },\\n    // highlight-end\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here is an example of a simple \", _jsx(_components.code, {\n        children: \"afterLogin\"\n      }), \" component:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"export default function MyAfterLoginComponent() {\\n  return <div>This is a custom component injected after the Login form.</div>\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"beforeNavLinks\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"beforeNavLinks\"\n      }), \" property allows you to inject Custom Components into the built-in \", _jsx(_components.a, {\n        href: \"#nav\",\n        children: \"Nav Component\"\n      }), \", \", _jsx(_components.em, {\n        children: \"before\"\n      }), \" the nav links themselves.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To add \", _jsx(_components.code, {\n        children: \"beforeNavLinks\"\n      }), \" components, use the \", _jsx(_components.code, {\n        children: \"admin.components.beforeNavLinks\"\n      }), \" property in your Payload Config:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { buildConfig } from 'payload'\\n\\nexport default buildConfig({\\n  // ...\\n  admin: {\\n    // highlight-start\\n    components: {\\n      beforeNavLinks: ['/path/to/your/component'],\\n    },\\n    // highlight-end\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here is an example of a simple \", _jsx(_components.code, {\n        children: \"beforeNavLinks\"\n      }), \" component:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"export default function MyBeforeNavLinksComponent() {\\n  return <div>This is a custom component injected before the Nav links.</div>\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"afterNavLinks\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Similar to \", _jsx(_components.code, {\n        children: \"beforeNavLinks\"\n      }), \", the \", _jsx(_components.code, {\n        children: \"afterNavLinks\"\n      }), \" property allows you to inject Custom Components into the built-in Nav, \", _jsx(_components.em, {\n        children: \"after\"\n      }), \" the nav links.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To add \", _jsx(_components.code, {\n        children: \"afterNavLinks\"\n      }), \" components, use the \", _jsx(_components.code, {\n        children: \"admin.components.afterNavLinks\"\n      }), \" property in your Payload Config:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { buildConfig } from 'payload'\\n\\nexport default buildConfig({\\n  // ...\\n  admin: {\\n    // highlight-start\\n    components: {\\n      afterNavLinks: ['/path/to/your/component'],\\n    },\\n    // highlight-end\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here is an example of a simple \", _jsx(_components.code, {\n        children: \"afterNavLinks\"\n      }), \" component:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"export default function MyAfterNavLinksComponent() {\\n  return <p>This is a custom component injected after the Nav links.</p>\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Nav\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"Nav\"\n      }), \" property contains the sidebar / mobile menu in its entirety. Use this property to completely replace the built-in Nav with your own custom navigation.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To add a custom nav, use the \", _jsx(_components.code, {\n        children: \"admin.components.Nav\"\n      }), \" property in your Payload Config:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { buildConfig } from 'payload'\\n\\nexport default buildConfig({\\n  // ...\\n  admin: {\\n    // highlight-start\\n    components: {\\n      Nav: '/path/to/your/component',\\n    },\\n    // highlight-end\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here is an example of a simple \", _jsx(_components.code, {\n        children: \"Nav\"\n      }), \" component:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Link } from '@payloadcms/ui'\\n\\nexport default function MyCustomNav() {\\n  return (\\n    <nav>\\n      <ul>\\n        <li>\\n          <Link href=\\\"/dashboard\\\">Dashboard</Link>\\n        </li>\\n      </ul>\\n    </nav>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"graphics.Icon\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"Icon\"\n      }), \" property is the simplified logo used in contexts like the \", _jsx(_components.code, {\n        children: \"Nav\"\n      }), \" component. This is typically a small, square icon that represents your brand.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To add a custom icon, use the \", _jsx(_components.code, {\n        children: \"admin.components.graphics.Icon\"\n      }), \" property in your Payload Config:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { buildConfig } from 'payload'\\n\\nexport default buildConfig({\\n  // ...\\n  admin: {\\n    // highlight-start\\n    components: {\\n      graphics: {\\n        Icon: '/path/to/your/component',\\n      },\\n    },\\n    // highlight-end\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here is an example of a simple \", _jsx(_components.code, {\n        children: \"Icon\"\n      }), \" component:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"export default function MyCustomIcon() {\\n  return <img src=\\\"/path/to/your/icon.png\\\" alt=\\\"My Custom Icon\\\" />\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"graphics.Logo\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"Logo\"\n      }), \" property is the full logo used in contexts like the \", _jsx(_components.code, {\n        children: \"Login\"\n      }), \" view. This is typically a larger, more detailed representation of your brand.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To add a custom logo, use the \", _jsx(_components.code, {\n        children: \"admin.components.graphic.Logo\"\n      }), \" property in your Payload Config:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { buildConfig } from 'payload'\\n\\nexport default buildConfig({\\n  // ...\\n  admin: {\\n    // highlight-start\\n    components: {\\n      graphics: {\\n        Logo: '/path/to/your/component',\\n      },\\n    },\\n    // highlight-end\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here is an example of a simple \", _jsx(_components.code, {\n        children: \"Logo\"\n      }), \" component:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"export default function MyCustomLogo() {\\n  return <img src=\\\"/path/to/your/logo.png\\\" alt=\\\"My Custom Logo\\\" />\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Header\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"Header\"\n      }), \" property allows you to inject Custom Components above the Payload header.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Examples of a custom header components might include an announcements banner, a notifications bar, or anything else you'd like to display at the top of the Admin Panel in a prominent location.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To add \", _jsx(_components.code, {\n        children: \"Header\"\n      }), \" components, use the \", _jsx(_components.code, {\n        children: \"admin.components.header\"\n      }), \" property in your Payload Config:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { buildConfig } from 'payload'\\n\\nexport default buildConfig({\\n  // ...\\n  admin: {\\n    // highlight-start\\n    components: {\\n      Header: ['/path/to/your/component'],\\n    },\\n    // highlight-end\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here is an example of a simple \", _jsx(_components.code, {\n        children: \"Header\"\n      }), \" component:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"export default function MyCustomHeader() {\\n  return (\\n    <header>\\n      <h1>My Custom Header</h1>\\n    </header>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"logout.Button\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"logout.Button\"\n      }), \" property is the button displayed in the sidebar that should log the user out when clicked.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To add a custom logout button, use the \", _jsx(_components.code, {\n        children: \"admin.components.logout.Button\"\n      }), \" property in your Payload Config:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { buildConfig } from 'payload'\\n\\nexport default buildConfig({\\n  // ...\\n  admin: {\\n    // highlight-start\\n    components: {\\n      logout: {\\n        Button: '/path/to/your/component',\\n      },\\n    },\\n    // highlight-end\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here is an example of a simple \", _jsx(_components.code, {\n        children: \"logout.Button\"\n      }), \" component:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"export default function MyCustomLogoutButton() {\\n  return <button onClick={() => alert('Logging out!')}>Log Out</button>\\n}\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}},"__N_SSG":true}