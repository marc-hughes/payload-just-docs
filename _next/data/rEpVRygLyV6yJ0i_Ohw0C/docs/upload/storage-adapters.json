{"pageProps":{"frontMatter":{"title":"Storage Adapters","label":"Storage Adapters","order":20,"desc":"Payload provides additional storage adapters to handle file uploads. These adapters allow you to store files in different locations, such as Amazon S3, Vercel Blob Storage, Google Cloud Storage, Uploadthing, and more.","keywords":"uploads, images, media, storage, adapters, s3, vercel, google cloud, azure"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    a: \"a\",\n    code: \"code\",\n    h2: \"h2\",\n    h3: \"h3\",\n    pre: \"pre\",\n    ul: \"ul\",\n    li: \"li\",\n    em: \"em\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Payload offers additional storage adapters to handle file uploads. These adapters allow you to store files in different locations, such as Amazon S3, Vercel Blob Storage, Google Cloud Storage, and more.\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Service\"\n          }), _jsx(_components.th, {\n            children: \"Package\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Vercel Blob\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.a, {\n              href: \"https://github.com/payloadcms/payload/tree/main/packages/storage-vercel-blob\",\n              children: _jsx(_components.code, {\n                children: \"@payloadcms/storage-vercel-blob\"\n              })\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"AWS S3\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.a, {\n              href: \"https://github.com/payloadcms/payload/tree/main/packages/storage-s3\",\n              children: _jsx(_components.code, {\n                children: \"@payloadcms/storage-s3\"\n              })\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Azure\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.a, {\n              href: \"https://github.com/payloadcms/payload/tree/main/packages/storage-azure\",\n              children: _jsx(_components.code, {\n                children: \"@payloadcms/storage-azure\"\n              })\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Google Cloud Storage\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.a, {\n              href: \"https://github.com/payloadcms/payload/tree/main/packages/storage-gcs\",\n              children: _jsx(_components.code, {\n                children: \"@payloadcms/storage-gcs\"\n              })\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Uploadthing\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.a, {\n              href: \"https://github.com/payloadcms/payload/tree/main/packages/storage-uploadthing\",\n              children: _jsx(_components.code, {\n                children: \"@payloadcms/storage-uploadthing\"\n              })\n            })\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Vercel Blob Storage\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://www.npmjs.com/package/@payloadcms/storage-vercel-blob\",\n        children: _jsx(_components.code, {\n          children: \"@payloadcms/storage-vercel-blob\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Installation#vercel-blob-installation\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-sh\",\n        children: \"pnpm add @payloadcms/storage-vercel-blob\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Usage#vercel-blob-usage\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Configure the \", _jsx(_components.code, {\n          children: \"collections\"\n        }), \" object to specify which collections should use the Vercel Blob adapter. The slug \", _jsx(_components.em, {\n          children: \"must\"\n        }), \" match one of your existing collection slugs.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Ensure you have \", _jsx(_components.code, {\n          children: \"BLOB_READ_WRITE_TOKEN\"\n        }), \" set in your Vercel environment variables. This is usually set by Vercel automatically after adding blob storage to your project.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"When enabled, this package will automatically set \", _jsx(_components.code, {\n          children: \"disableLocalStorage\"\n        }), \" to \", _jsx(_components.code, {\n          children: \"true\"\n        }), \" for each collection.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"When deploying to Vercel, server uploads are limited with 4.5MB. Set \", _jsx(_components.code, {\n          children: \"clientUploads\"\n        }), \" to \", _jsx(_components.code, {\n          children: \"true\"\n        }), \" to do uploads directly on the client.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { vercelBlobStorage } from '@payloadcms/storage-vercel-blob'\\nimport { Media } from './collections/Media'\\nimport { MediaWithPrefix } from './collections/MediaWithPrefix'\\n\\nexport default buildConfig({\\n  collections: [Media, MediaWithPrefix],\\n  plugins: [\\n    vercelBlobStorage({\\n      enabled: true, // Optional, defaults to true\\n      // Specify which collections should use Vercel Blob\\n      collections: {\\n        media: true,\\n        'media-with-prefix': {\\n          prefix: 'my-prefix',\\n        },\\n      },\\n      // Token provided by Vercel once Blob storage is added to your Vercel project\\n      token: process.env.BLOB_READ_WRITE_TOKEN,\\n    }),\\n  ],\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Configuration Options#vercel-blob-configuration\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          }), _jsx(_components.th, {\n            children: \"Default\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"enabled\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Whether or not to enable the plugin\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"true\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"collections\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Collections to apply the Vercel Blob adapter to\"\n          }), _jsx(_components.td, {})]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"addRandomSuffix\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Add a random suffix to the uploaded file name in Vercel Blob storage\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"false\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"cacheControlMaxAge\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Cache-Control max-age in seconds\"\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.code, {\n              children: \"365 * 24 * 60 * 60\"\n            }), \" (1 Year)\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"token\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Vercel Blob storage read/write token\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"''\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"clientUploads\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Do uploads directly on the client to bypass limits on Vercel.\"\n          }), _jsx(_components.td, {})]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"S3 Storage\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://www.npmjs.com/package/@payloadcms/storage-s3\",\n        children: _jsx(_components.code, {\n          children: \"@payloadcms/storage-s3\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Installation#s3-installation\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-sh\",\n        children: \"pnpm add @payloadcms/storage-s3\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Usage#s3-usage\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Configure the \", _jsx(_components.code, {\n          children: \"collections\"\n        }), \" object to specify which collections should use the S3 Storage adapter. The slug \", _jsx(_components.em, {\n          children: \"must\"\n        }), \" match one of your existing collection slugs.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"The \", _jsx(_components.code, {\n          children: \"config\"\n        }), \" object can be any \", _jsx(_components.a, {\n          href: \"https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/client/s3\",\n          children: _jsx(_components.code, {\n            children: \"S3ClientConfig\"\n          })\n        }), \" object (from \", _jsx(_components.a, {\n          href: \"https://github.com/aws/aws-sdk-js-v3\",\n          children: _jsx(_components.code, {\n            children: \"@aws-sdk/client-s3\"\n          })\n        }), \"). \", _jsx(_components.em, {\n          children: \"This is highly dependent on your AWS setup\"\n        }), \". Check the AWS documentation for more information.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"When enabled, this package will automatically set \", _jsx(_components.code, {\n          children: \"disableLocalStorage\"\n        }), \" to \", _jsx(_components.code, {\n          children: \"true\"\n        }), \" for each collection.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"When deploying to Vercel, server uploads are limited with 4.5MB. Set \", _jsx(_components.code, {\n          children: \"clientUploads\"\n        }), \" to \", _jsx(_components.code, {\n          children: \"true\"\n        }), \" to do uploads directly on the client. You must allow CORS PUT method for the bucket to your website.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { s3Storage } from '@payloadcms/storage-s3'\\nimport { Media } from './collections/Media'\\nimport { MediaWithPrefix } from './collections/MediaWithPrefix'\\n\\nexport default buildConfig({\\n  collections: [Media, MediaWithPrefix],\\n  plugins: [\\n    s3Storage({\\n      collections: {\\n        media: true,\\n        'media-with-prefix': {\\n          prefix,\\n        },\\n      },\\n      bucket: process.env.S3_BUCKET,\\n      config: {\\n        credentials: {\\n          accessKeyId: process.env.S3_ACCESS_KEY_ID,\\n          secretAccessKey: process.env.S3_SECRET_ACCESS_KEY,\\n        },\\n        region: process.env.S3_REGION,\\n        // ... Other S3 configuration\\n      },\\n    }),\\n  ],\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Configuration Options#s3-configuration\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"See the the \", _jsx(_components.a, {\n        href: \"https://github.com/aws/aws-sdk-js-v3\",\n        children: \"AWS SDK Package\"\n      }), \" and \", _jsx(_components.a, {\n        href: \"https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/client/s3\",\n        children: _jsx(_components.code, {\n          children: \"S3ClientConfig\"\n        })\n      }), \" object for guidance on AWS S3 configuration.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Azure Blob Storage\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://www.npmjs.com/package/@payloadcms/storage-azure\",\n        children: _jsx(_components.code, {\n          children: \"@payloadcms/storage-azure\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Installation#azure-installation\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-sh\",\n        children: \"pnpm add @payloadcms/storage-azure\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Usage#azure-usage\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Configure the \", _jsx(_components.code, {\n          children: \"collections\"\n        }), \" object to specify which collections should use the Azure Blob adapter. The slug \", _jsx(_components.em, {\n          children: \"must\"\n        }), \" match one of your existing collection slugs.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"When enabled, this package will automatically set \", _jsx(_components.code, {\n          children: \"disableLocalStorage\"\n        }), \" to \", _jsx(_components.code, {\n          children: \"true\"\n        }), \" for each collection.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"When deploying to Vercel, server uploads are limited with 4.5MB. Set \", _jsx(_components.code, {\n          children: \"clientUploads\"\n        }), \" to \", _jsx(_components.code, {\n          children: \"true\"\n        }), \" to do uploads directly on the client. You must allow CORS PUT method to your website.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { azureStorage } from '@payloadcms/storage-azure'\\nimport { Media } from './collections/Media'\\nimport { MediaWithPrefix } from './collections/MediaWithPrefix'\\n\\nexport default buildConfig({\\n  collections: [Media, MediaWithPrefix],\\n  plugins: [\\n    azureStorage({\\n      collections: {\\n        media: true,\\n        'media-with-prefix': {\\n          prefix,\\n        },\\n      },\\n      allowContainerCreate:\\n        process.env.AZURE_STORAGE_ALLOW_CONTAINER_CREATE === 'true',\\n      baseURL: process.env.AZURE_STORAGE_ACCOUNT_BASEURL,\\n      connectionString: process.env.AZURE_STORAGE_CONNECTION_STRING,\\n      containerName: process.env.AZURE_STORAGE_CONTAINER_NAME,\\n    }),\\n  ],\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Configuration Options#azure-configuration\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          }), _jsx(_components.th, {\n            children: \"Default\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"enabled\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Whether or not to enable the plugin\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"true\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"collections\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Collections to apply the Azure Blob adapter to\"\n          }), _jsx(_components.td, {})]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"allowContainerCreate\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Whether or not to allow the container to be created if it does not exist\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"false\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"baseURL\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Base URL for the Azure Blob storage account\"\n          }), _jsx(_components.td, {})]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"connectionString\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Azure Blob storage connection string\"\n          }), _jsx(_components.td, {})]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"containerName\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Azure Blob storage container name\"\n          }), _jsx(_components.td, {})]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"clientUploads\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Do uploads directly on the client to bypass limits on Vercel.\"\n          }), _jsx(_components.td, {})]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Google Cloud Storage\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://www.npmjs.com/package/@payloadcms/storage-gcs\",\n        children: _jsx(_components.code, {\n          children: \"@payloadcms/storage-gcs\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Installation#gcs-installation\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-sh\",\n        children: \"pnpm add @payloadcms/storage-gcs\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Usage#gcs-usage\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Configure the \", _jsx(_components.code, {\n          children: \"collections\"\n        }), \" object to specify which collections should use the Google Cloud Storage adapter. The slug \", _jsx(_components.em, {\n          children: \"must\"\n        }), \" match one of your existing collection slugs.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"When enabled, this package will automatically set \", _jsx(_components.code, {\n          children: \"disableLocalStorage\"\n        }), \" to \", _jsx(_components.code, {\n          children: \"true\"\n        }), \" for each collection.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"When deploying to Vercel, server uploads are limited with 4.5MB. Set \", _jsx(_components.code, {\n          children: \"clientUploads\"\n        }), \" to \", _jsx(_components.code, {\n          children: \"true\"\n        }), \" to do uploads directly on the client. You must allow CORS PUT method for the bucket to your website.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { gcsStorage } from '@payloadcms/storage-gcs'\\nimport { Media } from './collections/Media'\\nimport { MediaWithPrefix } from './collections/MediaWithPrefix'\\n\\nexport default buildConfig({\\n  collections: [Media, MediaWithPrefix],\\n  plugins: [\\n    gcsStorage({\\n      collections: {\\n        media: true,\\n        'media-with-prefix': {\\n          prefix,\\n        },\\n      },\\n      bucket: process.env.GCS_BUCKET,\\n      options: {\\n        apiEndpoint: process.env.GCS_ENDPOINT,\\n        projectId: process.env.GCS_PROJECT_ID,\\n      },\\n    }),\\n  ],\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Configuration Options#gcs-configuration\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          }), _jsx(_components.th, {\n            children: \"Default\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"enabled\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Whether or not to enable the plugin\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"true\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"collections\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Collections to apply the storage to\"\n          }), _jsx(_components.td, {})]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"bucket\"\n            })\n          }), _jsx(_components.td, {\n            children: \"The name of the bucket to use\"\n          }), _jsx(_components.td, {})]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"options\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Google Cloud Storage client configuration. See \", _jsx(_components.a, {\n              href: \"https://github.com/googleapis/nodejs-storage\",\n              children: \"Docs\"\n            })]\n          }), _jsx(_components.td, {})]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"acl\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Access control list for files that are uploaded\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"Private\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"clientUploads\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Do uploads directly on the client to bypass limits on Vercel.\"\n          }), _jsx(_components.td, {})]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Uploadthing Storage\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://www.npmjs.com/package/@payloadcms/storage-uploadthing\",\n        children: _jsx(_components.code, {\n          children: \"@payloadcms/storage-uploadthing\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Installation#uploadthing-installation\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-sh\",\n        children: \"pnpm add @payloadcms/storage-uploadthing\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Usage#uploadthing-usage\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Configure the \", _jsx(_components.code, {\n          children: \"collections\"\n        }), \" object to specify which collections should use uploadthing. The slug \", _jsx(_components.em, {\n          children: \"must\"\n        }), \" match one of your existing collection slugs and be an \", _jsx(_components.code, {\n          children: \"upload\"\n        }), \" type.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Get a token from Uploadthing and set it as \", _jsx(_components.code, {\n          children: \"token\"\n        }), \" in the \", _jsx(_components.code, {\n          children: \"options\"\n        }), \" object.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"acl\"\n        }), \" is optional and defaults to \", _jsx(_components.code, {\n          children: \"public-read\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"When deploying to Vercel, server uploads are limited with 4.5MB. Set \", _jsx(_components.code, {\n          children: \"clientUploads\"\n        }), \" to \", _jsx(_components.code, {\n          children: \"true\"\n        }), \" to do uploads directly on the client.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"export default buildConfig({\\n  collections: [Media],\\n  plugins: [\\n    uploadthingStorage({\\n      collections: {\\n        media: true,\\n      },\\n      options: {\\n        token: process.env.UPLOADTHING_TOKEN,\\n        acl: 'public-read',\\n      },\\n    }),\\n  ],\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Configuration Options#uploadthing-configuration\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          }), _jsx(_components.th, {\n            children: \"Default\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"token\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Token from Uploadthing. Required.\"\n          }), _jsx(_components.td, {})]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"acl\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Access control list for files that are uploaded\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"public-read\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"logLevel\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Log level for Uploadthing\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"info\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"fetch\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Custom fetch function\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"fetch\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"defaultKeyType\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Default key type for file operations\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"fileKey\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"clientUploads\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Do uploads directly on the client to bypass limits on Vercel.\"\n          }), _jsx(_components.td, {})]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Custom Storage Adapters\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you need to create a custom storage adapter, you can use the \", _jsx(_components.a, {\n        href: \"https://www.npmjs.com/package/@payloadcms/plugin-cloud-storage\",\n        children: _jsx(_components.code, {\n          children: \"@payloadcms/plugin-cloud-storage\"\n        })\n      }), \" package. This package is used internally by the storage adapters mentioned above.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Installation#custom-installation\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"pnpm add @payloadcms/plugin-cloud-storage\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Usage#custom-usage\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Reference any of the existing storage adapters for guidance on how this should be structured. Create an adapter following the \", _jsx(_components.code, {\n        children: \"GeneratedAdapter\"\n      }), \" interface. Then, pass the adapter to the \", _jsx(_components.code, {\n        children: \"cloudStorage\"\n      }), \" plugin.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"export interface GeneratedAdapter {\\n  /**\\n   * Additional fields to be injected into the base collection and image sizes\\n   */\\n  fields?: Field[]\\n  /**\\n   * Generates the public URL for a file\\n   */\\n  generateURL?: GenerateURL\\n  handleDelete: HandleDelete\\n  handleUpload: HandleUpload\\n  name: string\\n  onInit?: () => void\\n  staticHandler: StaticHandler\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { buildConfig } from 'payload'\\nimport { cloudStoragePlugin } from '@payloadcms/plugin-cloud-storage'\\n\\nexport default buildConfig({\\n  plugins: [\\n    cloudStorage({\\n      collections: {\\n        'my-collection-slug': {\\n          adapter: theAdapterToUse, // see docs for the adapter you want to use\\n        },\\n      },\\n    }),\\n  ],\\n  // The rest of your config goes here\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Plugin options\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This plugin is configurable to work across many different Payload collections. A \", _jsx(_components.code, {\n        children: \"*\"\n      }), \" denotes that the property is required.\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Type\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.code, {\n              children: \"collections\"\n            }), \" *\"]\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"Record<string, CollectionOptions>\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Object with keys set to the slug of collections you want to enable the plugin for, and values set to collection-specific options.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"enabled\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"boolean\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"To conditionally enable/disable plugin. Default: \", _jsx(_components.code, {\n              children: \"true\"\n            }), \".\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Collection-specific options\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Type\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.code, {\n              children: \"adapter\"\n            }), \" *\"]\n          }), _jsx(_components.td, {\n            children: _jsx(_components.a, {\n              href: \"https://github.com/payloadcms/payload/blob/main/packages/plugin-cloud-storage/src/types.ts#L49\",\n              children: \"Adapter\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Pass in the adapter that you'd like to use for this collection. You can also set this field to \", _jsx(_components.code, {\n              children: \"null\"\n            }), \" for local development if you'd like to bypass cloud storage in certain scenarios and use local storage.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"disableLocalStorage\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"boolean\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Choose to disable local storage on this collection. Defaults to \", _jsx(_components.code, {\n              children: \"true\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"disablePayloadAccessControl\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"true\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Set to \", _jsx(_components.code, {\n              children: \"true\"\n            }), \" to disable Payload's Access Control. \", _jsx(_components.a, {\n              href: \"#payload-access-control\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"prefix\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"string\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Set to \", _jsx(_components.code, {\n              children: \"media/images\"\n            }), \" to upload files inside \", _jsx(_components.code, {\n              children: \"media/images\"\n            }), \" folder in the bucket.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"generateFileURL\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.a, {\n              href: \"https://github.com/payloadcms/payload/blob/main/packages/plugin-cloud-storage/src/types.ts#L67\",\n              children: \"GenerateFileURL\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Override the generated file URL with one that you create.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Payload Access Control\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Payload ships with \", _jsx(_components.a, {\n        href: \"../access-control/overview\",\n        children: \"Access Control\"\n      }), \" that runs \", _jsx(_components.em, {\n        children: \"even on statically served files\"\n      }), \". The same \", _jsx(_components.code, {\n        children: \"read\"\n      }), \" Access Control property on your \", _jsx(_components.code, {\n        children: \"upload\"\n      }), \"-enabled collections is used, and it allows you to restrict who can request your uploaded files.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To preserve this feature, by default, this plugin \", _jsx(_components.em, {\n        children: \"keeps all file URLs exactly the same\"\n      }), \". Your file URLs won't be updated to point directly to your cloud storage source, as in that case, Payload's Access control will be completely bypassed and you would need public readability on your cloud-hosted files.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Instead, all uploads will still be reached from the default \", _jsx(_components.code, {\n        children: \"/collectionSlug/staticURL/filename\"\n      }), \" path. This plugin will \\\"pass through\\\" all files that are hosted on your third-party cloud service—with the added benefit of keeping your existing Access Control in place.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If this does not apply to you (your upload collection has \", _jsx(_components.code, {\n        children: \"read: () => true\"\n      }), \" or similar) you can disable this functionality by setting \", _jsx(_components.code, {\n        children: \"disablePayloadAccessControl\"\n      }), \" to \", _jsx(_components.code, {\n        children: \"true\"\n      }), \". When this setting is in place, this plugin will update your file URLs to point directly to your cloud host.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Conditionally Enabling/Disabling\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The proper way to conditionally enable/disable this plugin is to use the \", _jsx(_components.code, {\n        children: \"enabled\"\n      }), \" property.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"cloudStoragePlugin({\\n  enabled: process.env.MY_CONDITION === 'true',\\n  collections: {\\n    'my-collection-slug': {\\n      adapter: theAdapterToUse, // see docs for the adapter you want to use\\n    },\\n  },\\n}),\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}