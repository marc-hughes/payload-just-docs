{"pageProps":{"frontMatter":{"title":"Uploads","label":"Overview","order":10,"desc":"Payload supports uploads, storage and management of files directly on your server, combined with powerful file access control.","keywords":"uploads, images, media, overview, documentation, Content Management System, cms, headless, javascript, node, react, nextjs"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\",\n    ol: \"ol\",\n    code: \"code\",\n    h2: \"h2\",\n    pre: \"pre\",\n    h3: \"h3\",\n    em: \"em\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    h4: \"h4\",\n    h5: \"h5\"\n  }, _provideComponents(), props.components), {Banner, LightDarkImage} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  if (!LightDarkImage) _missingMdxReference(\"LightDarkImage\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(Banner, {\n      children: _jsxs(_components.p, {\n        children: [\"Payload provides everything you need to enable file upload, storage, and\\nmanagement directly on your serverâ€”including extremely powerful file \", _jsx(_components.a, {\n          href: \"#access-control\",\n          children: \"access\\ncontrol\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsx(LightDarkImage, {\n      srcLight: \"https://payloadcms.com/images/docs/upload-admin.jpg\",\n      srcDark: \"https://payloadcms.com/images/docs/upload-admin.jpg\",\n      alt: \"Shows an Upload enabled collection in the Payload Admin Panel\",\n      caption: \"Admin Panel screenshot depicting a Media Collection with Upload enabled\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Here are some common use cases of Uploads:\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Creating a \\\"Media Library\\\" that contains images for use throughout your site or app\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Building a Gated Content library where users need to sign up to gain access to downloadable assets like ebook PDFs, whitepapers, etc.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Storing publicly available, downloadable assets like software, ZIP files, MP4s, etc.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"By simply enabling Upload functionality on a Collection, Payload will automatically transform your Collection into a robust file management / storage solution. The following modifications will be made:\"\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"filename\"\n        }), \", \", _jsx(_components.code, {\n          children: \"mimeType\"\n        }), \", and \", _jsx(_components.code, {\n          children: \"filesize\"\n        }), \" fields will be automatically added to your Collection. Optionally, if you pass \", _jsx(_components.code, {\n          children: \"imageSizes\"\n        }), \" to your Collection's Upload config, a \", _jsx(_components.a, {\n          href: \"#image-sizes\",\n          children: _jsx(_components.code, {\n            children: \"sizes\"\n          })\n        }), \" array will also be added containing auto-resized image sizes and filenames.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"The Admin Panel will modify its built-in \", _jsx(_components.code, {\n          children: \"List\"\n        }), \" component to show a thumbnail for each upload within the List View\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"The Admin Panel will modify its \", _jsx(_components.code, {\n          children: \"Edit\"\n        }), \" view(s) to add a new set of corresponding Upload UI which will allow for file upload\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"The \", _jsx(_components.code, {\n          children: \"create\"\n        }), \", \", _jsx(_components.code, {\n          children: \"update\"\n        }), \", and \", _jsx(_components.code, {\n          children: \"delete\"\n        }), \" Collection operations will be modified to support file upload, re-upload, and deletion\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Enabling Uploads\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Every Payload Collection can opt-in to supporting Uploads by specifying the \", _jsx(_components.code, {\n        children: \"upload\"\n      }), \" property on the Collection's config to either \", _jsx(_components.code, {\n        children: \"true\"\n      }), \" or to an object containing \", _jsx(_components.code, {\n        children: \"upload\"\n      }), \" options.\"]\n    }), \"\\n\", _jsxs(Banner, {\n      type: \"success\",\n      children: [_jsx(_components.p, {\n        children: _jsx(_components.strong, {\n          children: \"Tip:\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"A common pattern is to create a \", _jsx(_components.strong, {\n          children: \"\\\"media\\\"\"\n        }), \" collection and enable \", _jsx(_components.strong, {\n          children: \"upload\"\n        }), \" on that collection.\"]\n      })]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { CollectionConfig } from 'payload'\\n\\nexport const Media: CollectionConfig = {\\n  slug: 'media',\\n  upload: {\\n    staticDir: 'media',\\n    imageSizes: [\\n      {\\n        name: 'thumbnail',\\n        width: 400,\\n        height: 300,\\n        position: 'centre',\\n      },\\n      {\\n        name: 'card',\\n        width: 768,\\n        height: 1024,\\n        position: 'centre',\\n      },\\n      {\\n        name: 'tablet',\\n        width: 1024,\\n        // By specifying `undefined` or leaving a height undefined,\\n        // the image will be sized to a certain width,\\n        // but it will retain its original aspect ratio\\n        // and calculate a height automatically.\\n        height: undefined,\\n        position: 'centre',\\n      },\\n    ],\\n    adminThumbnail: 'thumbnail',\\n    mimeTypes: ['image/*'],\\n  },\\n  fields: [\\n    {\\n      name: 'alt',\\n      type: 'text',\\n    },\\n  ],\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Collection Upload Options\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"An asterisk denotes that an option is required.\"\n      })\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"adminThumbnail\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Set the way that the \", _jsx(_components.a, {\n              href: \"../admin/overview\",\n              children: \"Admin Panel\"\n            }), \" will display thumbnails for this Collection. \", _jsx(_components.a, {\n              href: \"#admin-thumbnails\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"bulkUpload\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Allow users to upload in bulk from the list view, default is true\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"cacheTags\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Set to \", _jsx(_components.code, {\n              children: \"false\"\n            }), \" to disable the cache tag set in the UI for the admin thumbnail component. Useful for when CDNs don't allow certain cache queries.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"crop\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Set to \", _jsx(_components.code, {\n              children: \"false\"\n            }), \" to disable the cropping tool in the \", _jsx(_components.a, {\n              href: \"../admin/overview\",\n              children: \"Admin Panel\"\n            }), \". Crop is enabled by default. \", _jsx(_components.a, {\n              href: \"#crop-and-focal-point-selector\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"disableLocalStorage\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Completely disable uploading files to disk locally. \", _jsx(_components.a, {\n              href: \"#disabling-local-upload-storage\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"displayPreview\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Enable displaying preview of the uploaded file in Upload fields related to this Collection. Can be locally overridden by \", _jsx(_components.code, {\n              children: \"displayPreview\"\n            }), \" option in Upload field. \", _jsx(_components.a, {\n              href: \"/docs/fields/upload#config-options\",\n              children: \"More\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"externalFileHeaderFilter\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Accepts existing headers and returns the headers after filtering or modifying.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"filesRequiredOnCreate\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Mandate file data on creation, default is true.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"filenameCompoundIndex\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Field slugs to use for a compound index instead of the default filename index.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"focalPoint\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Set to \", _jsx(_components.code, {\n              children: \"false\"\n            }), \" to disable the focal point selection tool in the \", _jsx(_components.a, {\n              href: \"../admin/overview\",\n              children: \"Admin Panel\"\n            }), \". The focal point selector is only available when \", _jsx(_components.code, {\n              children: \"imageSizes\"\n            }), \" or \", _jsx(_components.code, {\n              children: \"resizeOptions\"\n            }), \" are defined. \", _jsx(_components.a, {\n              href: \"#crop-and-focal-point-selector\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"formatOptions\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"An object with \", _jsx(_components.code, {\n              children: \"format\"\n            }), \" and \", _jsx(_components.code, {\n              children: \"options\"\n            }), \" that are used with the Sharp image library to format the upload file. \", _jsx(_components.a, {\n              href: \"https://sharp.pixelplumbing.com/api-output#toformat\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"handlers\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Array of Request handlers to execute when fetching a file, if a handler returns a Response it will be sent to the client. Otherwise Payload will retrieve and send back the file.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"imageSizes\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"If specified, image uploads will be automatically resized in accordance to these image sizes. \", _jsx(_components.a, {\n              href: \"#image-sizes\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"mimeTypes\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Restrict mimeTypes in the file picker. Array of valid mimetypes or mimetype wildcards \", _jsx(_components.a, {\n              href: \"#mimetypes\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"pasteURL\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Controls whether files can be uploaded from remote URLs by pasting them into the Upload field. \", _jsx(_components.strong, {\n              children: \"Enabled by default.\"\n            }), \" Accepts \", _jsx(_components.code, {\n              children: \"false\"\n            }), \" to disable or an object with an \", _jsx(_components.code, {\n              children: \"allowList\"\n            }), \" of valid remote URLs. \", _jsx(_components.a, {\n              href: \"#uploading-files-from-remote-urls\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"resizeOptions\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"An object passed to the the Sharp image library to resize the uploaded file. \", _jsx(_components.a, {\n              href: \"https://sharp.pixelplumbing.com/api-resize\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"staticDir\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The folder directory to use to store media in. Can be either an absolute path or relative to the directory that contains your config. Defaults to your collection slug\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"trimOptions\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"An object passed to the the Sharp image library to trim the uploaded file. \", _jsx(_components.a, {\n              href: \"https://sharp.pixelplumbing.com/api-resize#trim\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"withMetadata\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"If specified, appends metadata to the output image file. Accepts a boolean or a function that receives \", _jsx(_components.code, {\n              children: \"metadata\"\n            }), \" and \", _jsx(_components.code, {\n              children: \"req\"\n            }), \", returning a boolean.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hideFileInputOnCreate\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Set to \", _jsx(_components.code, {\n              children: \"true\"\n            }), \" to prevent the admin UI from showing file inputs during document creation, useful for programmatic file generation.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hideRemoveFile\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Set to \", _jsx(_components.code, {\n              children: \"true\"\n            }), \" to prevent the admin UI having a way to remove an existing file while editing.\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Payload-wide Upload Options\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Upload options are specifiable on a Collection by Collection basis, you can also control app wide options by passing your base Payload Config an \", _jsx(_components.code, {\n        children: \"upload\"\n      }), \" property containing an object supportive of all \", _jsx(_components.code, {\n        children: \"Busboy\"\n      }), \" configuration options.\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"abortOnLimit\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"A boolean that, if \", _jsx(_components.code, {\n              children: \"true\"\n            }), \", returns HTTP 413 if a file exceeds the file size limit. If \", _jsx(_components.code, {\n              children: \"false\"\n            }), \", the file is truncated. Defaults to \", _jsx(_components.code, {\n              children: \"false\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"createParentPath\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Set to \", _jsx(_components.code, {\n              children: \"true\"\n            }), \" to automatically create a directory path when moving files from a temporary directory or buffer. Defaults to \", _jsx(_components.code, {\n              children: \"false\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"debug\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"A boolean that turns upload process logging on if \", _jsx(_components.code, {\n              children: \"true\"\n            }), \", or off if \", _jsx(_components.code, {\n              children: \"false\"\n            }), \". Useful for troubleshooting. Defaults to \", _jsx(_components.code, {\n              children: \"false\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"limitHandler\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"A function which is invoked if the file is greater than configured limits.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"parseNested\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Set to \", _jsx(_components.code, {\n              children: \"true\"\n            }), \" to turn \", _jsx(_components.code, {\n              children: \"req.body\"\n            }), \" and \", _jsx(_components.code, {\n              children: \"req.files\"\n            }), \" into nested structures. By default \", _jsx(_components.code, {\n              children: \"req.body\"\n            }), \" and \", _jsx(_components.code, {\n              children: \"req.files\"\n            }), \" are flat objects. Defaults to \", _jsx(_components.code, {\n              children: \"false\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"preserveExtension\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Preserves file extensions with the \", _jsx(_components.code, {\n              children: \"safeFileNames\"\n            }), \" option. Limits file names to 3 characters if \", _jsx(_components.code, {\n              children: \"true\"\n            }), \" or a custom length if a \", _jsx(_components.code, {\n              children: \"number\"\n            }), \", trimming from the start of the extension.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"responseOnLimit\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"A \", _jsx(_components.code, {\n              children: \"string\"\n            }), \" that is sent in the Response to a client if the file size limit is exceeded when used with \", _jsx(_components.code, {\n              children: \"abortOnLimit\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"safeFileNames\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Set to \", _jsx(_components.code, {\n              children: \"true\"\n            }), \" to strip non-alphanumeric characters except dashes and underscores. Can also be set to a regex to determine what to strip. Defaults to \", _jsx(_components.code, {\n              children: \"false\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"tempFileDir\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"A \", _jsx(_components.code, {\n              children: \"string\"\n            }), \" path to store temporary files used when the \", _jsx(_components.code, {\n              children: \"useTempFiles\"\n            }), \" option is set to \", _jsx(_components.code, {\n              children: \"true\"\n            }), \". Defaults to \", _jsx(_components.code, {\n              children: \"'./tmp'\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"uploadTimeout\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"A \", _jsx(_components.code, {\n              children: \"number\"\n            }), \" that defines how long to wait for data before aborting, specified in milliseconds. Set to \", _jsx(_components.code, {\n              children: \"0\"\n            }), \" to disable timeout checks. Defaults to \", _jsx(_components.code, {\n              children: \"60000\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"uriDecodeFileNames\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Set to \", _jsx(_components.code, {\n              children: \"true\"\n            }), \" to apply uri decoding to file names. Defaults to \", _jsx(_components.code, {\n              children: \"false\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"useTempFiles\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Set to \", _jsx(_components.code, {\n              children: \"true\"\n            }), \" to store files to a temporary directory instead of in RAM, reducing memory usage for large files or many files.\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"https://github.com/mscdex/busboy#api\",\n        children: \"Click here\"\n      }), \" for more documentation about what you can control with \", _jsx(_components.code, {\n        children: \"Busboy\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"A common example of what you might want to customize within Payload-wide Upload options would be to increase the allowed \", _jsx(_components.code, {\n        children: \"fileSize\"\n      }), \" of uploads sent to Payload:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { buildConfig } from 'payload'\\n\\nexport default buildConfig({\\n  collections: [\\n    {\\n      slug: 'media',\\n      fields: [\\n        {\\n          name: 'alt',\\n          type: 'text',\\n        },\\n      ],\\n      upload: true,\\n    },\\n  ],\\n  upload: {\\n    limits: {\\n      fileSize: 5000000, // 5MB, written in bytes\\n    },\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Custom filename via hooks\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can customize the filename before it's uploaded to the server by using a \", _jsx(_components.code, {\n        children: \"beforeOperation\"\n      }), \" hook.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"beforeOperation: [\\n  ({ req, operation }) => {\\n    if ((operation === 'create' || operation === 'update') && req.file) {\\n      req.file.name = 'test.jpg'\\n    }\\n  },\\n],\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"req.file\"\n      }), \" object will have additional information about the file, such as mimeType and extension, and you also have full access to the file data itself.\\nThe filename from here will also be threaded to image sizes if they're enabled.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Image Sizes\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you specify an array of \", _jsx(_components.code, {\n        children: \"imageSizes\"\n      }), \" to your \", _jsx(_components.code, {\n        children: \"upload\"\n      }), \" config, Payload will automatically crop and resize your uploads to fit each of the sizes specified by your config.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.a, {\n        href: \"../admin/overview\",\n        children: \"Admin Panel\"\n      }), \" will also automatically display all available files, including width, height, and file size, for each of your uploaded files.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Behind the scenes, Payload relies on \", _jsx(_components.a, {\n        href: \"https://sharp.pixelplumbing.com/api-resize#resize\",\n        children: _jsx(_components.code, {\n          children: \"sharp\"\n        })\n      }), \" to perform its image resizing. You can specify additional options for \", _jsx(_components.code, {\n        children: \"sharp\"\n      }), \" to use while resizing your images.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Note that for image resizing to work, \", _jsx(_components.code, {\n        children: \"sharp\"\n      }), \" must be specified in your \", _jsx(_components.a, {\n        href: \"../configuration/overview\",\n        children: \"Payload Config\"\n      }), \". This is configured by default if you created your Payload project with \", _jsx(_components.code, {\n        children: \"create-payload-app\"\n      }), \". See \", _jsx(_components.code, {\n        children: \"sharp\"\n      }), \" in \", _jsx(_components.a, {\n        href: \"../configuration/overview#config-options\",\n        children: \"Config Options\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Accessing the resized images in hooks\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"All auto-resized images are exposed to be re-used in hooks and similar via an object that is bound to \", _jsx(_components.code, {\n        children: \"req.payloadUploadSizes\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The object will have keys for each size generated, and each key will be set equal to a buffer containing the file data.\"\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Handling Image Enlargement\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When an uploaded image is smaller than the defined image size, we have 3 options:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"withoutEnlargement: undefined | false | true\"\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"undefined\"\n        }), \" [default]: uploading images with smaller width AND height than the image size will return null\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"false\"\n        }), \": always enlarge images to the image size\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"true\"\n        }), \": if the image is smaller than the image size, return the original image\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(Banner, {\n      type: \"error\",\n      children: [_jsx(_components.p, {\n        children: _jsx(_components.strong, {\n          children: \"Note:\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"By default, the image size will return NULL when the uploaded image is smaller than the defined\\nimage size. Use the \", _jsx(_components.code, {\n          children: \"withoutEnlargement\"\n        }), \" prop to change this.\"]\n      })]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Custom file name per size\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Each image size supports a \", _jsx(_components.code, {\n        children: \"generateImageName\"\n      }), \" function that can be used to generate a custom file name for the resized image.\\nThis function receives the original file name, the resize name, the extension, height and width as arguments.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"{\\n  name: 'thumbnail',\\n  width: 400,\\n  height: 300,\\n  generateImageName: ({ height, sizeName, extension, width }) => {\\n    return `custom-${sizeName}-${height}-${width}.${extension}`\\n  },\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Crop and Focal Point Selector\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This feature is only available for image file types.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Setting \", _jsx(_components.code, {\n        children: \"crop: false\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"focalPoint: false\"\n      }), \" in your Upload config will be disable the respective selector in the \", _jsx(_components.a, {\n        href: \"../admin/overview\",\n        children: \"Admin Panel\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Image cropping occurs before any resizing, the resized images will therefore be generated from the cropped image (\", _jsx(_components.strong, {\n        children: \"not\"\n      }), \" the original image).\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If no resizing options are specified (\", _jsx(_components.code, {\n        children: \"imageSizes\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"resizeOptions\"\n      }), \"), the focal point selector will not be displayed.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Disabling Local Upload Storage\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you are using a plugin to send your files off to a third-party file storage host or CDN, like Amazon S3 or similar, you may not want to store your files locally at all. You can prevent Payload from writing files to disk by specifying \", _jsx(_components.code, {\n        children: \"disableLocalStorage: true\"\n      }), \" on your collection's upload config.\"]\n    }), \"\\n\", _jsxs(Banner, {\n      type: \"warning\",\n      children: [_jsx(_components.p, {\n        children: _jsx(_components.strong, {\n          children: \"Note:\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"This is a fairly advanced feature. If you do disable local file storage, by default, your admin\\npanel's thumbnails will be broken as you will not have stored a file. It will be totally up to you\\nto use either a plugin or your own hooks to store your files in a permanent manner, as well as\\nprovide your own admin thumbnail using \", _jsx(_components.strong, {\n          children: \"upload.adminThumbnail\"\n        }), \".\"]\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Admin Thumbnails\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can specify how Payload retrieves admin thumbnails for your upload-enabled Collections with one of the following:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"adminThumbnail\"\n        }), \" as a \", _jsx(_components.strong, {\n          children: \"string\"\n        }), \", equal to one of your provided image size names.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { CollectionConfig } from 'payload'\\n\\nexport const Media: CollectionConfig = {\\n  slug: 'media',\\n  upload: {\\n    // highlight-start\\n    adminThumbnail: 'small',\\n    // highlight-end\\n    imageSizes: [\\n      {\\n        name: 'small',\\n        fit: 'cover',\\n        height: 300,\\n        width: 900,\\n      },\\n      {\\n        name: 'large',\\n        fit: 'cover',\\n        height: 600,\\n        width: 1800,\\n      },\\n    ],\\n  },\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"2\",\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"adminThumbnail\"\n        }), \" as a \", _jsx(_components.strong, {\n          children: \"function\"\n        }), \" that takes the document's data and sends back a full URL to load the thumbnail.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { CollectionConfig } from 'payload'\\n\\nexport const Media: CollectionConfig = {\\n  slug: 'media',\\n  upload: {\\n    // highlight-start\\n    adminThumbnail: ({ doc }) =>\\n      `https://google.com/custom-path-to-file/${doc.filename}`,\\n    // highlight-end\\n  },\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"MimeTypes\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Specifying the \", _jsx(_components.code, {\n        children: \"mimeTypes\"\n      }), \" property can restrict what files are allowed from the user's file picker. This accepts an array of strings, which can be any valid mimetype or mimetype wildcards\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Some example values are: \", _jsx(_components.code, {\n        children: \"image/*\"\n      }), \", \", _jsx(_components.code, {\n        children: \"audio/*\"\n      }), \", \", _jsx(_components.code, {\n        children: \"video/*\"\n      }), \", \", _jsx(_components.code, {\n        children: \"image/png\"\n      }), \", \", _jsx(_components.code, {\n        children: \"application/pdf\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example mimeTypes usage:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { CollectionConfig } from 'payload'\\n\\nexport const Media: CollectionConfig = {\\n  slug: 'media',\\n  upload: {\\n    mimeTypes: ['image/*', 'application/pdf'], // highlight-line\\n  },\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Uploading Files\"\n    }), \"\\n\", _jsxs(Banner, {\n      type: \"warning\",\n      children: [_jsx(_components.p, {\n        children: _jsx(_components.strong, {\n          children: \"Important:\"\n        })\n      }), _jsx(_components.p, {\n        children: \"Uploading files is currently only possible through the REST and Local APIs due to how GraphQL\\nworks. It's difficult and fairly nonsensical to support uploading files through GraphQL.\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To upload a file, use your collection's \", _jsx(_components.a, {\n        href: \"/docs/rest-api/overview#collections\",\n        children: _jsx(_components.code, {\n          children: \"create\"\n        })\n      }), \" endpoint. Send it all the data that your Collection requires, as well as a \", _jsx(_components.code, {\n        children: \"file\"\n      }), \" key containing the file that you'd like to upload.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Send your request as a \", _jsx(_components.code, {\n        children: \"multipart/form-data\"\n      }), \" request, using \", _jsx(_components.a, {\n        href: \"https://developer.mozilla.org/en-US/docs/Web/API/FormData\",\n        children: _jsx(_components.code, {\n          children: \"FormData\"\n        })\n      }), \" if possible.\"]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"info\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Note:\"\n        }), \" To include any additional fields (like \", _jsx(_components.code, {\n          children: \"title\"\n        }), \", \", _jsx(_components.code, {\n          children: \"alt\"\n        }), \", etc.), append\\na \", _jsx(_components.code, {\n          children: \"_payload\"\n        }), \" field containing a JSON-stringified object of the required\\nvalues. These values must match the schema of your upload-enabled collection.\"]\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const fileInput = document.querySelector('#your-file-input')\\nconst formData = new FormData()\\n\\nformData.append('file', fileInput.files[0])\\n\\n// Replace with the fields defined in your upload-enabled collection.\\n// The example below includes an optional field like 'title'.\\nformData.append(\\n  '_payload',\\n  JSON.stringify({\\n    title: 'Example Title',\\n    description: 'An optional description for the file',\\n  }),\\n)\\n\\nfetch('api/:upload-slug', {\\n  method: 'POST',\\n  body: formData,\\n  /**\\n   * Do not manually add the Content-Type Header\\n   * the browser will handle this.\\n   *\\n   * headers: {\\n   *  'Content-Type': 'multipart/form-data'\\n   * }\\n   */\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Uploading Files stored locally\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you want to upload a file stored on your machine directly using the \", _jsx(_components.code, {\n        children: \"payload.create\"\n      }), \" method, for example, during a seed script,\\nyou can use the \", _jsx(_components.code, {\n        children: \"filePath\"\n      }), \" property to specify the local path of the file.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const localFilePath = path.resolve(__dirname, filename)\\n\\nawait payload.create({\\n  collection: 'media',\\n  data: {\\n    alt,\\n  },\\n  filePath: localFilePath,\\n})\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"data\"\n      }), \" property should still include all the required fields of your \", _jsx(_components.code, {\n        children: \"media\"\n      }), \" collection.\"]\n    }), \"\\n\", _jsxs(Banner, {\n      type: \"warning\",\n      children: [_jsx(_components.p, {\n        children: _jsx(_components.strong, {\n          children: \"Important:\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"Remember that all custom hooks attached to the \", _jsx(_components.code, {\n          children: \"media\"\n        }), \" collection will still trigger.\\nEnsure that files match the specified mimeTypes or sizes defined in the collection's \", _jsx(_components.code, {\n          children: \"formatOptions\"\n        }), \" or custom \", _jsx(_components.code, {\n          children: \"hooks\"\n        }), \".\"]\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Uploading Files from Remote URLs\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"pasteURL\"\n      }), \" option allows users to fetch files from remote URLs by pasting them into an Upload field. This option is \", _jsx(_components.strong, {\n        children: \"enabled by default\"\n      }), \" and can be configured to either \", _jsx(_components.strong, {\n        children: \"allow unrestricted client-side fetching\"\n      }), \" or \", _jsx(_components.strong, {\n        children: \"restrict server-side fetching\"\n      }), \" to specific trusted domains.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By default, Payload uses \", _jsx(_components.strong, {\n        children: \"client-side fetching\"\n      }), \", where the browser downloads the file directly from the provided URL. However, \", _jsx(_components.strong, {\n        children: \"client-side fetching will fail if the URLâ€™s server has CORS restrictions\"\n      }), \", making it suitable only for internal URLs or public URLs without CORS blocks.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To fetch files from \", _jsx(_components.strong, {\n        children: \"restricted URLs\"\n      }), \" that would otherwise be blocked by CORS, use \", _jsx(_components.strong, {\n        children: \"server-side fetching\"\n      }), \" by configuring the \", _jsx(_components.code, {\n        children: \"pasteURL\"\n      }), \" option with an \", _jsx(_components.code, {\n        children: \"allowList\"\n      }), \" of trusted domains. This method ensures that Payload downloads the file on the server and streams it to the browser. However, for security reasons, only URLs that match the specified \", _jsx(_components.code, {\n        children: \"allowList\"\n      }), \" will be allowed.\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Configuration Example\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Hereâ€™s how to configure the pasteURL option to control remote URL fetching:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"import type { CollectionConfig } from 'payload'\\n\\nexport const Media: CollectionConfig = {\\n  slug: 'media',\\n  upload: {\\n    pasteURL: {\\n      allowList: [\\n        {\\n          hostname: 'payloadcms.com', // required\\n          pathname: '',\\n          port: '',\\n          protocol: 'https',\\n          search: ''\\n        },\\n        {\\n          hostname: 'example.com',\\n          pathname: '/images/*',\\n        },\\n      ],\\n    },\\n  },\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h5, {\n      children: [\"Accepted Values for \", _jsx(_components.code, {\n        children: \"pasteURL\"\n      })]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"undefined\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Default behavior. Enables client-side fetching for internal or public URLs.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"false\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Disables the ability to paste URLs into Upload fields.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"allowList\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Enables server-side fetching for specific trusted URLs. Requires an array of objects defining trusted domains. See the table below for details on \", _jsx(_components.code, {\n              children: \"AllowItem\"\n            }), \".\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.h5, {\n      children: [_jsx(_components.code, {\n        children: \"AllowItem\"\n      }), \" Properties\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"An asterisk denotes that an option is required.\"\n      })\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          }), _jsx(_components.th, {\n            children: \"Example\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hostname\"\n              })\n            }), \" *\"]\n          }), _jsx(_components.td, {\n            children: \"The hostname of the allowed URL. This is required to ensure the URL is coming from a trusted source.\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"example.com\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"pathname\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The path portion of the URL. Supports wildcards to match multiple paths.\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"/images/*\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"port\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The port number of the URL. If not specified, the default port for the protocol will be used.\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"3000\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"protocol\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The protocol to match. Must be either \", _jsx(_components.code, {\n              children: \"http\"\n            }), \" or \", _jsx(_components.code, {\n              children: \"https\"\n            }), \". Defaults to \", _jsx(_components.code, {\n              children: \"https\"\n            }), \".\"]\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"https\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"search\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The query string of the URL. If specified, the URL must match this exact query string.\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"?version=1\"\n            })\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Access Control\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"All files that are uploaded to each Collection automatically support the \", _jsx(_components.code, {\n        children: \"read\"\n      }), \" \", _jsx(_components.a, {\n        href: \"/docs/access-control/overview\",\n        children: \"Access Control\"\n      }), \" function from the Collection itself. You can use this to control who should be allowed to see your uploads, and who should not.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}},"__N_SSG":true}