{"pageProps":{"frontMatter":{"title":"Environment Variables","label":"Environment Variables","order":100,"desc":"Learn how to use Environment Variables in your Payload project"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    code: \"code\",\n    pre: \"pre\",\n    strong: \"strong\",\n    em: \"em\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"Environment Variables are a way to store sensitive information that your application needs to function. This could be anything from API keys to \", _jsx(_components.a, {\n        href: \"../database/overview\",\n        children: \"Database\"\n      }), \" credentials. Payload allows you to easily use Environment Variables within your config and throughout your application.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Next.js Applications\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you are using Next.js, no additional setup is required other than creating your \", _jsx(_components.code, {\n        children: \".env\"\n      }), \" file.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To use Environment Variables, add a \", _jsx(_components.code, {\n        children: \".env\"\n      }), \" file to the root of your project:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-plaintext\",\n        children: \"project-name/\\n├─ .env\\n├─ package.json\\n├─ payload.config.ts\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here is an example of what an \", _jsx(_components.code, {\n        children: \".env\"\n      }), \" file might look like:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-plaintext\",\n        children: \"SERVER_URL=localhost:3000\\nDATABASE_URI=mongodb://localhost:27017/my-database\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To use Environment Variables in your Payload Config, you can access them directly from \", _jsx(_components.code, {\n        children: \"process.env\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { buildConfig } from 'payload'\\n\\nexport default buildConfig({\\n  serverURL: process.env.SERVER_URL, // highlight-line\\n  // ...\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Client-side Environments\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For security and safety reasons, the \", _jsx(_components.a, {\n        href: \"../admin/overview\",\n        children: \"Admin Panel\"\n      }), \" does \", _jsx(_components.strong, {\n        children: \"not\"\n      }), \" include Environment Variables in its \", _jsx(_components.em, {\n        children: \"client-side\"\n      }), \" bundle by default. But, Next.js provides a mechanism to expose Environment Variables to the client-side bundle when needed.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you are building a \", _jsx(_components.a, {\n        href: \"../custom-components/overview\",\n        children: \"Custom Component\"\n      }), \" and need to access Environment Variables from the client-side, you can do so by prefixing them with \", _jsx(_components.code, {\n        children: \"NEXT_PUBLIC_\"\n      }), \".\"]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Important:\"\n        }), \" Be careful about what variables you provide to your client-side\\ncode. Analyze every single one to make sure that you're not accidentally\\nleaking sensitive information. Only ever include keys that are safe for the\\npublic to read in plain text.\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For example, if you've got the following Environment Variable:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_test_XXXXXXXXXXXXXXXXXX\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This key will automatically be made available to the client-side Payload bundle and can be referenced in your Custom Component as follows:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"'use client'\\nimport React from 'react'\\n\\nconst stripeKey = process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY // highlight-line\\n\\nconst MyClientComponent = () => {\\n  // do something with the key\\n\\n  return <div>My Client Component</div>\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For more information, check out the \", _jsx(_components.a, {\n        href: \"https://nextjs.org/docs/app/building-your-application/configuring/environment-variables\",\n        children: \"Next.js Documentation\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Outside of Next.js\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you are using Payload outside of Next.js, we suggest using the \", _jsx(_components.a, {\n        href: \"https://www.npmjs.com/package/dotenv\",\n        children: _jsx(_components.code, {\n          children: \"dotenv\"\n        })\n      }), \" package to handle Environment Variables from \", _jsx(_components.code, {\n        children: \".env\"\n      }), \" files. This will automatically load your Environment Variables into \", _jsx(_components.code, {\n        children: \"process.env\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To do this, import the package as high up in your application as possible:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import dotenv from 'dotenv'\\ndotenv.config() // highlight-line\\n\\nimport { buildConfig } from 'payload'\\n\\nexport default buildConfig({\\n  serverURL: process.env.SERVER_URL,\\n  // ...\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Tip:\"\n        }), \" Be sure that \", _jsx(_components.code, {\n          children: \"dotenv\"\n        }), \" can find your \", _jsx(_components.code, {\n          children: \".env\"\n        }), \" file. By default, it will\\nlook for a file named \", _jsx(_components.code, {\n          children: \".env\"\n        }), \" in the root of your project. If you need to\\nspecify a different file, pass the path into the config options.\"]\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}},"__N_SSG":true}