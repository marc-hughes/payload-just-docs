{"pageProps":{"frontMatter":{"title":"Generating TypeScript Interfaces","label":"Generating Types","order":20,"desc":"Generate your own TypeScript interfaces based on your collections and globals.","keywords":"headless cms, typescript, documentation, Content Management System, cms, headless, javascript, node, react, nextjs"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    strong: \"strong\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"While building your own custom functionality into Payload, like \", _jsx(_components.a, {\n        href: \"../plugins/overview\",\n        children: \"Plugins\"\n      }), \", \", _jsx(_components.a, {\n        href: \"../hooks/overview\",\n        children: \"Hooks\"\n      }), \", \", _jsx(_components.a, {\n        href: \"../access-control/overview\",\n        children: \"Access Control\"\n      }), \" functions, \", _jsx(_components.a, {\n        href: \"../custom-components/custom-views\",\n        children: \"Custom Views\"\n      }), \", \", _jsx(_components.a, {\n        href: \"../graphql/overview\",\n        children: \"GraphQL queries / mutations\"\n      }), \", or anything else, you may benefit from generating your own TypeScript types dynamically from your Payload Config itself.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Types generation script\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Run the following command in a Payload project to generate types based on your Payload Config:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"payload generate:types\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can run this command whenever you need to regenerate your types, and then you can use these types in your Payload code directly.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Disable declare statement\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By default, \", _jsx(_components.code, {\n        children: \"generate:types\"\n      }), \" will add a \", _jsx(_components.code, {\n        children: \"declare\"\n      }), \" statement to your types file, which automatically enables type inference within Payload.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you are using your \", _jsx(_components.code, {\n        children: \"payload-types.ts\"\n      }), \" file in other repos, though, it might be better to disable this \", _jsx(_components.code, {\n        children: \"declare\"\n      }), \" statement, so that you don't get any TS errors in projects that use your Payload types, but do not have Payload installed.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"// payload.config.ts\\n{\\n  // ...\\n  typescript: {\\n    declare: false, // defaults to true if not set\\n  },\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you do disable the \", _jsx(_components.code, {\n        children: \"declare\"\n      }), \" pattern, you'll need to manually add a \", _jsx(_components.code, {\n        children: \"declare\"\n      }), \" statement to your code in order for Payload types to be recognized. Here's an example showing how to declare your types in your \", _jsx(_components.code, {\n        children: \"payload.config.ts\"\n      }), \" file:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { Config } from './payload-types'\\n\\ndeclare module 'payload' {\\n  export interface GeneratedTypes extends Config {}\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Custom output file path\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can specify where you want your types to be generated by adding a property to your Payload Config:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"// payload.config.ts\\n{\\n  // ...\\n\\ttypescript: {\\n    // defaults to: path.resolve(__dirname, './payload-types.ts')\\n\\t\\toutputFile: path.resolve(__dirname, './generated-types.ts'),\\n\\t},\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The above example places your types next to your Payload Config itself as the file \", _jsx(_components.code, {\n        children: \"generated-types.ts\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Custom generated types\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Payload generates your types based on a JSON schema. You can extend that JSON schema, and thus the generated types, by passing a function to \", _jsx(_components.code, {\n        children: \"typescript.schema\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"// payload.config.ts\\n{\\n  // ...\\n  typescript: {\\n    schema: [\\n      ({ jsonSchema }) => {\\n        // Modify the JSON schema here\\n        jsonSchema.definitions.Test = {\\n          type: 'object',\\n          properties: {\\n            title: { type: 'string' },\\n            content: { type: 'string' },\\n          },\\n          required: ['title', 'content'],\\n        }\\n        return jsonSchema\\n      },\\n    ]\\n  }\\n}\\n\\n// This will generate the following type in your payload-types.ts:\\n\\nexport interface Test {\\n  title: string\\n  content: string\\n  [k: string]: unknown\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This function takes the existing JSON schema as an argument and returns the modified JSON schema. It can be useful for plugins that wish to generate their own types.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Example Usage\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For example, let's look at the following simple Payload Config:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { Config } from 'payload'\\n\\nconst config: Config = {\\n  serverURL: process.env.NEXT_PUBLIC_SERVER_URL,\\n  admin: {\\n    user: 'users',\\n  },\\n  collections: [\\n    {\\n      slug: 'users',\\n      fields: [\\n        {\\n          name: 'name',\\n          type: 'text',\\n          required: true,\\n        },\\n      ],\\n    },\\n    {\\n      slug: 'posts',\\n      admin: {\\n        useAsTitle: 'title',\\n      },\\n      fields: [\\n        {\\n          name: 'title',\\n          type: 'text',\\n        },\\n        {\\n          name: 'author',\\n          type: 'relationship',\\n          relationTo: 'users',\\n        },\\n      ],\\n    },\\n  ],\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"By generating types, we'll end up with a file containing the following two TypeScript interfaces:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"export interface User {\\n  id: string\\n  name: string\\n  email?: string\\n  resetPasswordToken?: string\\n  resetPasswordExpiration?: string\\n  loginAttempts?: number\\n  lockUntil?: string\\n}\\n\\nexport interface Post {\\n  id: string\\n  title?: string\\n  author?: string | User\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Custom Field Interfaces\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For \", _jsx(_components.code, {\n        children: \"array\"\n      }), \", \", _jsx(_components.code, {\n        children: \"block\"\n      }), \", \", _jsx(_components.code, {\n        children: \"group\"\n      }), \" and named \", _jsx(_components.code, {\n        children: \"tab\"\n      }), \" fields, you can generate top level reusable interfaces. The following group field config:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"{\\n  type: 'group',\\n  name: 'meta',\\n  interfaceName: 'SharedMeta', <-- here!!\\n  fields: [\\n    {\\n      name: 'title',\\n      type: 'text',\\n    },\\n    {\\n      name: 'description',\\n      type: 'text',\\n    },\\n  ],\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"will generate:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"// a top level reusable interface!!\\nexport interface SharedMeta {\\n  title?: string\\n  description?: string\\n}\\n\\n// example usage inside collection interface\\nexport interface Collection1 {\\n  // ...other fields\\n  meta?: SharedMeta\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(Banner, {\n      type: \"warning\",\n      children: [_jsx(_components.p, {\n        children: _jsx(_components.strong, {\n          children: \"Naming Collisions\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"Since these types are hoisted to the top level, you need to be aware that naming collisions can\\noccur. For example, if you have a collection with the name of \", _jsx(_components.code, {\n          children: \"Meta\"\n        }), \" and you also create a\\ninterface with the name \", _jsx(_components.code, {\n          children: \"Meta\"\n        }), \" they will collide. It is recommended to scope your interfaces by\\nappending the field type to the end, i.e. \", _jsx(_components.code, {\n          children: \"MetaGroup\"\n        }), \" or similar.\"]\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Using your types\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now that your types have been generated, Payload's Local API will now be typed. It is common for users to want to use this in their frontend code, we recommend generating them with Payload and then copying the file over to your frontend codebase. This is the simplest way to get your types into your frontend codebase.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Adding an npm script\"\n    }), \"\\n\", _jsxs(Banner, {\n      type: \"warning\",\n      children: [_jsx(_components.p, {\n        children: _jsx(_components.strong, {\n          children: \"Important\"\n        })\n      }), _jsx(_components.p, {\n        children: \"Payload needs to be able to find your config to generate your types.\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Payload will automatically try and locate your config, but might not always be able to find it. For example, if you are working in a \", _jsx(_components.code, {\n        children: \"/src\"\n      }), \" directory or similar, you need to tell Payload where to find your config manually by using an environment variable. If this applies to you, you can create an npm script to make generating your types easier.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To add an npm script to generate your types and show Payload where to find your config, open your \", _jsx(_components.code, {\n        children: \"package.json\"\n      }), \" and update the \", _jsx(_components.code, {\n        children: \"scripts\"\n      }), \" property to the following:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"{\\n  \\\"scripts\\\": {\\n    \\\"generate:types\\\": \\\"PAYLOAD_CONFIG_PATH=src/payload.config.ts payload generate:types\\\",\\n  },\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Now you can run \", _jsx(_components.code, {\n        children: \"pnpm generate:types\"\n      }), \" to easily generate your types.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}},"__N_SSG":true}