{"pageProps":{"frontMatter":{"title":"Payload Concepts","label":"Concepts","order":20,"desc":"Payload is based around a small and intuitive set of concepts. Key concepts include collections, globals, fields and more.","keywords":"documentation, getting started, guide, Content Management System, cms, headless, javascript, node, react, nextjs"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\",\n    strong: \"strong\",\n    h3: \"h3\",\n    em: \"em\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Payload is based around a small and intuitive set of high-level concepts. Before starting to work with Payload, it's a good idea to familiarize yourself with these concepts in order to establish a common language and understanding when discussing Payload.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Config\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The Payload Config is central to everything that Payload does. It allows for the deep configuration of your application through a simple and intuitive API. The Payload Config is a fully-typed JavaScript object that can be infinitely extended upon. \", _jsx(_components.a, {\n        href: \"../configuration/overview\",\n        children: \"More details\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Database\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Payload is database agnostic, meaning you can use any type of database behind Payload's familiar APIs through what is known as a Database Adapter. \", _jsx(_components.a, {\n        href: \"../database/overview\",\n        children: \"More details\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Collections\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"A Collection is a group of records, called Documents, that all share a common schema. Each Collection is stored in the \", _jsx(_components.a, {\n        href: \"../database/overview\",\n        children: \"Database\"\n      }), \" based on the \", _jsx(_components.a, {\n        href: \"../fields/overview\",\n        children: \"Fields\"\n      }), \" that you define. \", _jsx(_components.a, {\n        href: \"../configuration/collections\",\n        children: \"More details\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Globals\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Globals are in many ways similar to \", _jsx(_components.a, {\n        href: \"../configuration/collections\",\n        children: \"Collections\"\n      }), \", except they correspond to only a single Document. Each Global is stored in the \", _jsx(_components.a, {\n        href: \"../database/overview\",\n        children: \"Database\"\n      }), \" based on the \", _jsx(_components.a, {\n        href: \"../fields/overview\",\n        children: \"Fields\"\n      }), \" that you define. \", _jsx(_components.a, {\n        href: \"../configuration/globals\",\n        children: \"More details\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Fields\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Fields are the building blocks of Payload. They define the schema of the Documents that will be stored in the \", _jsx(_components.a, {\n        href: \"../database/overview\",\n        children: \"Database\"\n      }), \", as well as automatically generate the corresponding UI within the Admin Panel. \", _jsx(_components.a, {\n        href: \"../fields/overview\",\n        children: \"More details\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Hooks\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Hooks allow you to execute your own side effects during specific events of the Document lifecycle, such as before read, after create, etc. \", _jsx(_components.a, {\n        href: \"../hooks/overview\",\n        children: \"More details\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Authentication\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Payload provides a secure, portable way to manage user accounts out of the box. Payload Authentication is designed to be used in both the Admin Panel, as well as your own external applications. \", _jsx(_components.a, {\n        href: \"../authentication/overview\",\n        children: \"More details\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Access Control\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Access Control determines what a user can and cannot do with any given Document, such as read, update, etc., as well as what they can and cannot see within the Admin Panel. \", _jsx(_components.a, {\n        href: \"../access-control/overview\",\n        children: \"More details\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Admin Panel\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Payload dynamically generates a beautiful, fully type-safe interface to manage your users and data. The Admin Panel is a React application built using the Next.js App Router. \", _jsx(_components.a, {\n        href: \"../admin/overview\",\n        children: \"More details\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Retrieving Data\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Everything Payload does (create, read, update, delete, login, logout, etc.) is exposed to you via three APIs:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"#local-api\",\n          children: \"Local API\"\n        }), \" - Extremely fast, direct-to-database access\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"#rest-api\",\n          children: \"REST API\"\n        }), \" - Standard HTTP endpoints for querying and mutating data\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"#graphql-api\",\n          children: \"GraphQL\"\n        }), \" - A full GraphQL API with a GraphQL Playground\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"success\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Note:\"\n        }), \" All of these APIs share the exact same query language. \", _jsx(_components.a, {\n          href: \"../queries/overview\",\n          children: \"More\\ndetails\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Local API\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By far one of the most powerful aspects of Payload is the fact that it gives you direct-to-database access to your data through the \", _jsx(_components.a, {\n        href: \"../local-api/overview\",\n        children: \"Local API\"\n      }), \". It's \", _jsx(_components.em, {\n        children: \"extremely\"\n      }), \" fast and does not incur any typical HTTP overheadâ€”you query your database directly in Node.js.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The Local API is written in TypeScript, and so it is strongly typed and extremely nice to use. It works anywhere on the server, including custom Next.js Routes, Payload Hooks, Payload Access Control, and React Server Components.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here's a quick example of a React Server Component fetching data using the Local API:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import React from 'react'\\nimport config from '@payload-config'\\nimport { getPayload } from 'payload'\\n\\nconst MyServerComponent: React.FC = () => {\\n  const payload = await getPayload({ config })\\n\\n  // The `findResult` here will be fully typed as `PaginatedDocs<Page>`,\\n  // where you will have the `docs` that are returned as well as\\n  // information about how many items are returned / are available in total / etc\\n  const findResult = await payload.find({ collection: 'pages' })\\n\\n  return (\\n    <ul>\\n      {findResult.docs.map((page) => {\\n        // Render whatever here!\\n        // The `page` is fully typed as your Pages collection!\\n      })}\\n    </ul>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"info\",\n      children: _jsxs(_components.p, {\n        children: [\"For more information about the Local API, \", _jsx(_components.a, {\n          href: \"../local-api/overview\",\n          children: \"click here\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"REST API\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By default, the Payload \", _jsx(_components.a, {\n        href: \"../rest-api/overview\",\n        children: \"REST API\"\n      }), \" is mounted automatically for you at the \", _jsx(_components.code, {\n        children: \"/api\"\n      }), \" path of your app.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For example, if you have a Collection called \", _jsx(_components.code, {\n        children: \"pages\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"fetch('https://localhost:3000/api/pages') // highlight-line\\n  .then((res) => res.json())\\n  .then((data) => console.log(data))\\n\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"info\",\n      children: _jsxs(_components.p, {\n        children: [\"For more information about the REST API, \", _jsx(_components.a, {\n          href: \"../rest-api/overview\",\n          children: \"click here\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"GraphQL API\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Payload automatically exposes GraphQL queries and mutations through a dedicated \", _jsx(_components.a, {\n        href: \"../graphql/overview\",\n        children: \"GraphQL API\"\n      }), \". By default, the GraphQL route handler is mounted at the \", _jsx(_components.code, {\n        children: \"/api/graphql\"\n      }), \" path of your app. You'll also find a full GraphQL Playground which can be accessible at the \", _jsx(_components.code, {\n        children: \"/api/graphql-playground\"\n      }), \" path of your app.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can use any GraphQL client with Payload's GraphQL endpoint. Here are a few packages:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"https://www.npmjs.com/package/graphql-request\",\n          children: _jsx(_components.code, {\n            children: \"graphql-request\"\n          })\n        }), \" - a very lightweight GraphQL client\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"https://www.apollographql.com/docs/react/api/core/ApolloClient/\",\n          children: _jsx(_components.code, {\n            children: \"@apollo/client\"\n          })\n        }), \" - an industry-standard GraphQL client with lots of nice features\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"info\",\n      children: _jsxs(_components.p, {\n        children: [\"For more information about the GraphQL API, \", _jsx(_components.a, {\n          href: \"../graphql/overview\",\n          children: \"click here\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Package Structure\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Payload is abstracted into a set of dedicated packages to keep the core \", _jsx(_components.code, {\n        children: \"payload\"\n      }), \" package as lightweight as possible. This allows you to only install the parts of Payload based on your unique project requirements.\"]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Important:\"\n        }), \" Version numbers of all official Payload packages are always\\npublished in sync. You should make sure that you always use matching versions\\nfor all official Payload packages.\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"payload\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"payload\"\n      }), \" package is where core business logic for Payload lives. You can think of Payload as an ORM with superpowersâ€”it contains the logic for all Payload \\\"operations\\\" like \", _jsx(_components.code, {\n        children: \"find\"\n      }), \", \", _jsx(_components.code, {\n        children: \"create\"\n      }), \", \", _jsx(_components.code, {\n        children: \"update\"\n      }), \", and \", _jsx(_components.code, {\n        children: \"delete\"\n      }), \" and exposes a \", _jsx(_components.a, {\n        href: \"../local-api/overview\",\n        children: \"Local API\"\n      }), \". It executes \", _jsx(_components.a, {\n        href: \"../access-control/overview\",\n        children: \"Access Control\"\n      }), \", \", _jsx(_components.a, {\n        href: \"../hooks/overview\",\n        children: \"Hooks\"\n      }), \", \", _jsx(_components.a, {\n        href: \"../fields/overview#validation\",\n        children: \"Validation\"\n      }), \", and more.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Payload itself is extremely compact, and can be used in any Node environment. As long as you have \", _jsx(_components.code, {\n        children: \"payload\"\n      }), \" installed and you have access to your Payload Config, you can query and mutate your database directly without going through an unnecessary HTTP layer.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Payload also contains all TypeScript definitions, which can be imported from \", _jsx(_components.code, {\n        children: \"payload\"\n      }), \" directly.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here's how to import some common Payload types:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { Config, CollectionConfig, GlobalConfig, Field } from 'payload'\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"@payloadcms/next\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Whereas Payload itself is responsible for direct database access, and control over Payload business logic, the \", _jsx(_components.code, {\n        children: \"@payloadcms/next\"\n      }), \" package is responsible for the Admin Panel and the entire HTTP layer that Payload exposes, including the \", _jsx(_components.a, {\n        href: \"../rest-api/overview\",\n        children: \"REST API\"\n      }), \" and \", _jsx(_components.a, {\n        href: \"../graphql/overview\",\n        children: \"GraphQL API\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"@payloadcms/graphql\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"All of Payload's GraphQL functionality is abstracted into a separate package. Payload, its Admin UI, and REST API have absolutely no overlap with GraphQL, and you will incur no performance overhead from GraphQL if you are not using it. However, it's installed within the \", _jsx(_components.code, {\n        children: \"@payloadcms/next\"\n      }), \" package so you don't have to install it manually. You do, however, need to have GraphQL installed separately in your \", _jsx(_components.code, {\n        children: \"package.json\"\n      }), \" if you are using GraphQL.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"@payloadcms/ui\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This is the UI library that Payload's Admin Panel uses. All components are exported from this package and can be re-used as you build extensions to the Payload admin UI, or want to use Payload components in your own React apps. Some exports are server components and some are client components.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"@payloadcms/db-postgres\"\n      }), \", \", _jsx(_components.code, {\n        children: \"@payloadcms/db-vercel-postgres\"\n      }), \", \", _jsx(_components.code, {\n        children: \"@payloadcms/db-mongodb\"\n      }), \", \", _jsx(_components.code, {\n        children: \"@payloadcms/db-sqlite\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can choose which Database Adapter you'd like to use for your project, and no matter which you choose, the entire data layer for Payload is contained within these packages. You can only use one at a time for any given project.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"@payloadcms/richtext-lexical\"\n      }), \", \", _jsx(_components.code, {\n        children: \"@payloadcms/richtext-slate\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Payload's Rich Text functionality is abstracted into separate packages and if you want to enable Rich Text in your project, you'll need to install one of these packages. We recommend Lexical for all new projects, and this is where Payload will focus its efforts on from this point, but Slate is still supported if you have already built with it.\"\n    }), \"\\n\", _jsx(Banner, {\n      type: \"info\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Note:\"\n        }), \" Rich Text is entirely optional and you may not need it for your\\nproject.\"]\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}},"__N_SSG":true}