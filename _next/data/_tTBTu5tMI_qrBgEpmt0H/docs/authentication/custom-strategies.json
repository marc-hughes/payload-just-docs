{"pageProps":{"frontMatter":{"title":"Custom Strategies","label":"Custom Strategies","order":60,"desc":"Create custom authentication strategies to handle everything auth in Payload.","keywords":"authentication, config, configuration, overview, documentation, Content Management System, cms, headless, javascript, node, react, nextjs"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h3: \"h3\",\n    code: \"code\",\n    a: \"a\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    strong: \"strong\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(Banner, {\n      type: \"warning\",\n      children: _jsx(_components.p, {\n        children: \"This is an advanced feature, so only attempt this if you are an experienced\\ndeveloper. Otherwise, just let Payload's built-in authentication handle user\\nauth for you.\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Creating a strategy\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"At the core, a strategy is a way to authenticate a user making a request. As of \", _jsx(_components.code, {\n        children: \"3.0\"\n      }), \" we moved away from \", _jsx(_components.a, {\n        href: \"https://www.passportjs.org\",\n        children: \"Passport\"\n      }), \" in favor of pulling back the curtain and putting you in full control.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A strategy is made up of the following:\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Parameter\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"name\"\n              })\n            }), \" *\"]\n          }), _jsx(_components.td, {\n            children: \"The name of your strategy\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"authenticate\"\n              })\n            }), \" *\"]\n          }), _jsx(_components.td, {\n            children: \"A function that takes in the parameters below and returns a user or null.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"authenticate\"\n      }), \" function is passed the following arguments:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Argument\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"headers\"\n              })\n            }), \" *\"]\n          }), _jsx(_components.td, {\n            children: \"The headers on the incoming request. Useful for retrieving identifiable information on a request.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"payload\"\n              })\n            }), \" *\"]\n          }), _jsx(_components.td, {\n            children: \"The Payload class. Useful for authenticating the identifiable information against Payload.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"isGraphQL\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Whether or not the request was made from a GraphQL endpoint. Default is \", _jsx(_components.code, {\n              children: \"false\"\n            }), \".\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Example Strategy\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"At its core a strategy simply takes information from the incoming request and returns a user. This is exactly how Payload's built-in strategies function.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Your \", _jsx(_components.code, {\n        children: \"authenticate\"\n      }), \" method should return an object containing a Payload user document and any optional headers that you'd like Payload to set for you when we return a response.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { CollectionConfig } from 'payload'\\n\\nexport const Users: CollectionConfig = {\\n  slug: 'users',\\n  auth: {\\n    disableLocalStrategy: true,\\n    // highlight-start\\n    strategies: [\\n      {\\n        name: 'custom-strategy',\\n        authenticate: ({ payload, headers }) => {\\n          const usersQuery = await payload.find({\\n            collection: 'users',\\n            where: {\\n              code: {\\n                equals: headers.get('code'),\\n              },\\n              secret: {\\n                equals: headers.get('secret'),\\n              },\\n            },\\n          })\\n\\n          return {\\n            // Send the user with the collection slug back to authenticate,\\n            // or send null if no user should be authenticated\\n            user: usersQuery.docs[0] ? {\\n              collection: 'users'\\n              ...usersQuery.docs[0],\\n            } : null,\\n\\n            // Optionally, you can return headers\\n            // that you'd like Payload to set here when\\n            // it returns the response\\n            responseHeaders: new Headers({\\n              'some-header': 'my header value'\\n            })\\n          }\\n        }\\n      }\\n    ]\\n    // highlight-end\\n  },\\n  fields: [\\n    {\\n      name: 'code',\\n      type: 'text',\\n      index: true,\\n      unique: true,\\n    },\\n    {\\n      name: 'secret',\\n      type: 'text',\\n    },\\n  ]\\n}\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}},"__N_SSG":true}