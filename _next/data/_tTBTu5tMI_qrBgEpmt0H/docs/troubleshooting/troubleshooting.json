{"pageProps":{"frontMatter":{"title":"Troubleshooting","label":"Troubleshooting","order":10,"desc":"Troubleshooting Common Issues in Payload","keywords":"admin, components, custom, customize, documentation, Content Management System, cms, headless, javascript, node, react, nextjs, troubleshooting"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Common Issues\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"\\\"Unauthorized, you must be logged in to make this request\\\" when attempting to log in\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This means that your auth cookie is not being set or accepted correctly upon logging in. To resolve check the following settings in your Payload Config:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"CORS - If you are using the '*', try to explicitly only allow certain domains instead including the one you have specified.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"CSRF - Do you have this set? if so, make sure your domain is whitelisted within the csrf domains. If not, probably not the issue, but probably can't hurt to whitelist it anyway.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Cookie settings. If these are completely undefined, then that's fine. but if you have cookie domain set, or anything similar, make sure you don't have the domain misconfigured\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This error likely means that the auth cookie that Payload sets after logging in successfully is being rejected because of misconfiguration.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To further investigate the issue:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Go to the login screen. Open your inspector. Go to the Network tab.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Log in and then find the login request that should appear in your network panel. Click the login request.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"The login request should have a Set-Cookie header on the response, and the cookie should be getting set successfully. If it is not, most browsers generally have a little yellow ⚠️ symbol that you can hover over to see why the cookie was rejected.\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}