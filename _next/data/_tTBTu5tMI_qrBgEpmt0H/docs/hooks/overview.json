{"pageProps":{"frontMatter":{"title":"Hooks Overview","label":"Overview","order":10,"desc":"Hooks allow you to add your own logic to Payload, including integrating with third-party APIs, adding auto-generated data, or modifying Payload's base functionality.","keywords":"hooks, overview, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, nextjs"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    strong: \"strong\",\n    em: \"em\",\n    h2: \"h2\",\n    code: \"code\",\n    pre: \"pre\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    h3: \"h3\",\n    h4: \"h4\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Hooks allow you to execute your own side effects during specific events of the Document lifecycle. They allow you to do things like mutate data, perform business logic, integrate with third-parties, or anything else, all during precise moments within your application.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"With Hooks, you can transform Payload from a traditional CMS into a fully-fledged application framework. There are many use cases for Hooks, including:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Modify data before it is read or updated\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Encrypt and decrypt sensitive data\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Integrate with a third-party CRM like HubSpot or Salesforce\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Send a copy of uploaded files to Amazon S3 or similar\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Process orders through a payment provider like Stripe\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Send emails when contact forms are submitted\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Track data ownership or changes over time\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"There are four main types of Hooks in Payload:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#root-hooks\",\n          children: \"Root Hooks\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/docs/hooks/collections\",\n          children: \"Collection Hooks\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/docs/hooks/globals\",\n          children: \"Global Hooks\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/docs/hooks/fields\",\n          children: \"Field Hooks\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Reminder:\"\n        }), \" Payload also ships a set of \", _jsx(_components.em, {\n          children: \"React\"\n        }), \" hooks that you can use in\\nyour frontend application. Although they share a common name, these are very\\ndifferent things and should not be confused. \", _jsx(_components.a, {\n          href: \"../admin/react-hooks\",\n          children: \"More\\ndetails\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Root Hooks\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Root Hooks are not associated with any specific Collection, Global, or Field. They are useful for globally-oriented side effects, such as when an error occurs at the application level.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To add Root Hooks, use the \", _jsx(_components.code, {\n        children: \"hooks\"\n      }), \" property in your \", _jsx(_components.a, {\n        href: \"/docs/configuration/overview\",\n        children: \"Payload Config\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { buildConfig } from 'payload'\\n\\nexport default buildConfig({\\n  // ...\\n  // highlight-start\\n  hooks: {\\n    afterError:[() => {...}]\\n  },\\n  // highlight-end\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The following options are available:\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsx(_components.tbody, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"afterError\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Runs after an error occurs in the Payload application.\"\n          })]\n        })\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"afterError\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"afterError\"\n      }), \" Hook is triggered when an error occurs in the Payload application. This can be useful for logging errors to a third-party service, sending an email to the development team, logging the error to Sentry or DataDog, etc. The output can be used to transform the result object / status code.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { buildConfig } from 'payload'\\n\\nexport default buildConfig({\\n  // ...\\n  hooks: {\\n    afterError: [\\n      async ({ error }) => {\\n        // Do something\\n      },\\n    ],\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The following arguments are provided to the \", _jsx(_components.code, {\n        children: \"afterError\"\n      }), \" Hook:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Argument\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"error\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The error that occurred.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"context\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Custom context passed between Hooks. \", _jsx(_components.a, {\n              href: \"./context\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"graphqlResult\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The GraphQL result object, available if the hook is executed within a GraphQL context.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"req\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The \", _jsx(_components.code, {\n              children: \"PayloadRequest\"\n            }), \" object that extends \", _jsx(_components.a, {\n              href: \"https://developer.mozilla.org/en-US/docs/Web/API/Request\",\n              children: \"Web Request\"\n            }), \". Contains currently authenticated \", _jsx(_components.code, {\n              children: \"user\"\n            }), \" and the Local API instance \", _jsx(_components.code, {\n              children: \"payload\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"collection\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The \", _jsx(_components.a, {\n              href: \"../configuration/collections\",\n              children: \"Collection\"\n            }), \" in which this Hook is running against. This will be \", _jsx(_components.code, {\n              children: \"undefined\"\n            }), \" if the hook is executed from a non-collection endpoint or GraphQL.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"result\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The formatted error result object, available if the hook is executed from a REST context.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Async vs. Synchronous\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"All Hooks can be written as either synchronous or asynchronous functions. Choosing the right type depends on your use case, but switching between the two is as simple as adding or removing the \", _jsx(_components.code, {\n        children: \"async\"\n      }), \" keyword.\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Asynchronous\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If the Hook should modify data before a Document is updated or created, and it relies on asynchronous actions such as fetching data from a third party, it might make sense to define your Hook as an asynchronous function. This way you can be sure that your Hook completes before the operation's lifecycle continues. Async hooks are run in series - so if you have two async hooks defined, the second hook will wait for the first to complete before it starts.\"\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Synchronous\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If your Hook simply performs a side-effect, such as updating a CRM, it might be okay to define it synchronously, so the Payload operation does not have to wait for your hook to complete.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Server-only Execution\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Hooks are only triggered on the server and are automatically excluded from the client-side bundle. This means that you can safely use sensitive business logic in your Hooks without worrying about exposing it to the client.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}},"__N_SSG":true}