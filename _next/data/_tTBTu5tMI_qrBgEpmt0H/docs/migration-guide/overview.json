{"pageProps":{"frontMatter":{"title":"2.0 to 3.0 Migration Guide","label":"2.0 to 3.0 Migration Guide","order":10,"desc":"Upgrade guide for Payload 2.x projects migrating to 3.0.","keywords":"local api, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    em: \"em\",\n    a: \"a\",\n    h2: \"h2\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    pre: \"pre\",\n    ol: \"ol\",\n    strong: \"strong\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Payload 2.0 to 3.0 Migration Guide\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Payload 3.0 completely replatforms the Admin Panel from a React Router single-page application onto the Next.js App Router with full support for React Server Components. This change completely separates Payload \\\"core\\\" from its rendering and HTTP layers, making it truly Node-safe and portable.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you are upgrading from a \", _jsx(_components.em, {\n        children: \"previous beta\"\n      }), \", please see the \", _jsx(_components.a, {\n        href: \"#upgrade-from-previous-beta\",\n        children: \"Upgrade From Previous Beta\"\n      }), \" section.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"What has changed?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The core logic and principles of Payload remain the same from 2.0 to 3.0, with the majority of changes affecting specifically the HTTP layer and the Admin Panel, which is now built upon Next.js. With this change, your entire application can be served within a single repo, with Payload endpoints are now opened within your own Next.js application, directly alongside your frontend. Payload is still headless, you will still be able to leverage it completely headlessly just as you do now with Sveltekit, etc. All Payload APIs remain exactly the same (with a few new features), and the Payload Config is generally the same, with the breaking changes detailed below.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Table of Contents\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"All breaking changes are listed below. If you encounter changes that are not explicitly listed here, please consider contributing to this documentation by submitting a PR.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#installation\",\n          children: \"Installation\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#breaking-changes\",\n          children: \"Breaking Changes\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#custom-components\",\n          children: \"Custom Components\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#endpoints\",\n          children: \"Endpoints\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#react-hooks\",\n          children: \"React Hooks\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#types\",\n          children: \"Types\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#email-adapters\",\n          children: \"Email Adapters\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#plugins\",\n          children: \"Plugins\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#upgrade-from-previous-beta\",\n          children: \"Upgrade From Previous Beta\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Installation\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Payload 3.0 requires a set of auto-generated files that you will need to bring into your existing project. The easiest way of acquiring these is by initializing a new project via \", _jsx(_components.code, {\n        children: \"create-payload-app\"\n      }), \", then replace the provided Payload Config with your own.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"  npx create-payload-app\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For more details, see the \", _jsx(_components.a, {\n        href: \"https://payloadcms.com/docs/getting-started/installation\",\n        children: \"Documentation\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"Install new dependencies of Payload, Next.js and React\"\n          }), \":\"]\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"Refer to the package.json file made in the create-payload-app, including peerDependencies, devDependencies, and dependencies. The core package and plugins require all versions to be synced. Previously, on 2.x it was possible to be running the latest version of Payload 2.x with an older version of db-mongodb for example. This is no longer the case.\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-bash\",\n            children: \"  pnpm i next react react-dom payload @payloadcms/ui @payloadcms/next\\n\"\n          })\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"Also install the other @payloadcms packages specific to the plugins and adapters you are using. Depending on your project, these may include:\"\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"@payloadcms/db-mongodb\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"@payloadcms/db-postgres\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"@payloadcms/richtext-slate\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"@payloadcms/richtext-lexical\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"@payloadcms/plugin-form-builder\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"@payloadcms/plugin-nested-docs\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"@payloadcms/plugin-redirects\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"@payloadcms/plugin-relationship\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"@payloadcms/plugin-search\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"@payloadcms/plugin-sentry\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"@payloadcms/plugin-seo\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"@payloadcms/plugin-stripe\"\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"@payloadcms/plugin-cloud-storage - Read \", _jsx(_components.a, {\n              href: \"#@payloadcms/plugin-cloud-storage\",\n              children: \"More\"\n            }), \".\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Uninstall deprecated packages:\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-bash\",\n            children: \"pnpm remove express nodemon @payloadcms/bundler-webpack @payloadcms/bundler-vite\\n\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Database Adapter Migrations\"\n        }), \"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.em, {\n            children: \"If you have existing data\"\n          }), \" and are using the MongoDB or Postgres adapters, you will need to run the database migrations to ensure your database schema is up-to-date.\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: _jsx(_components.a, {\n              href: \"https://github.com/payloadcms/payload/releases/tag/v3.0.0-beta.39\",\n              children: \"postgres\"\n            })\n          }), \"\\n\", _jsx(_components.li, {\n            children: _jsx(_components.a, {\n              href: \"https://github.com/payloadcms/payload/releases/tag/v3.0.0-beta.131\",\n              children: \"mongodb\"\n            })\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"For Payload Cloud users, the plugin has changed.\"\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"Uninstall the old package:\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-bash\",\n            children: \"pnpm remove @payloadcms/plugin-cloud\\n\"\n          })\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"Install the new package:\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-bash\",\n            children: \"pnpm i @payloadcms/payload-cloud\\n\"\n          })\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            children: \"// payload.config.ts\\n- import { payloadCloud } from '@payloadcms/plugin-cloud'\\n+ import { payloadCloudPlugin } from '@payloadcms/payload-cloud'\\n\\nbuildConfig({\\n  // ...\\n  plugins: [\\n-   payloadCloud()\\n+   payloadCloudPlugin()\\n  ]\\n})\\n\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"Optional\"\n          }), \" sharp dependency\"]\n        }), \"\\n\", _jsxs(_components.p, {\n          children: [\"If you have upload enabled collections that use \", _jsx(_components.code, {\n            children: \"formatOptions\"\n          }), \", \", _jsx(_components.code, {\n            children: \"imageSizes\"\n          }), \", or \", _jsx(_components.code, {\n            children: \"resizeOptions\"\n          }), \"—payload expects to have \", _jsx(_components.code, {\n            children: \"sharp\"\n          }), \" installed. In 2.0 this was a dependency was installed for you. Now it is only installed if needed. If you have any of these options set, you will need to install \", _jsx(_components.code, {\n            children: \"sharp\"\n          }), \" and add it to your payload.config.ts:\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-bash\",\n            children: \"pnpm i sharp\\n\"\n          })\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            children: \"// payload.config.ts\\nimport sharp from 'sharp'\\nbuildConfig({\\n// ...\\n+   sharp,\\n})\\n\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Breaking Changes\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"Delete the \", _jsx(_components.code, {\n            children: \"admin.bundler\"\n          }), \" property from your Payload Config. Payload no longer bundles the Admin Panel. Instead, we rely directly on Next.js for bundling.\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            children: \"// payload.config.ts\\n- import { webpackBundler } from '@payloadcms/bundler-webpack'\\n\\nbuildConfig({\\n  // ...\\n  admin: {\\n    // ...\\n-   bundler: webpackBundler(),\\n  }\\n})\\n\"\n          })\n        }), \"\\n\", _jsxs(_components.p, {\n          children: [\"This also means that the \", _jsx(_components.code, {\n            children: \"@payloadcms/bundler-webpack\"\n          }), \" and \", _jsx(_components.code, {\n            children: \"@payloadcms/bundler-vite\"\n          }), \" packages have been deprecated. You can completely uninstall those from your project by removing them from your \", _jsx(_components.code, {\n            children: \"package.json\"\n          }), \" file and re-running your package manager’s installation process, i.e. \", _jsx(_components.code, {\n            children: \"pnpm i\"\n          }), \".\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"Add the \", _jsx(_components.code, {\n            children: \"secret\"\n          }), \" property to your Payload Config. This used to be set in the \", _jsx(_components.code, {\n            children: \"payload.init()\"\n          }), \" function of your \", _jsx(_components.code, {\n            children: \"server.ts\"\n          }), \" file. Instead, move it to \", _jsx(_components.code, {\n            children: \"payload.config.ts\"\n          }), \":\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            children: \"// payload.config.ts\\n\\nbuildConfig({\\n  // ...\\n+ secret: process.env.PAYLOAD_SECRET\\n})\\n\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"Environment variables prefixed with \", _jsx(_components.code, {\n            children: \"PAYLOAD_PUBLIC\"\n          }), \" will no longer be available on the client. In order to access them on the client, those will now have to be prefixed with \", _jsx(_components.code, {\n            children: \"NEXT_PUBLIC\"\n          }), \" instead.\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            children: \"'use client'\\n- const var = process.env.PAYLOAD_PUBLIC_MY_ENV_VAR\\n+ const var = process.env.NEXT_PUBLIC_MY_ENV_VAR\\n\"\n          })\n        }), \"\\n\", _jsxs(_components.p, {\n          children: [\"For more details, see the \", _jsx(_components.a, {\n            href: \"https://payloadcms.com/docs/configuration/environment-vars\",\n            children: \"Documentation\"\n          }), \".\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"The \", _jsx(_components.code, {\n            children: \"req\"\n          }), \" object used to extend the \", _jsx(_components.a, {\n            href: \"https://expressjs.com/\",\n            children: \"Express Request\"\n          }), \", but now extends the \", _jsx(_components.a, {\n            href: \"https://developer.mozilla.org/en-US/docs/Web/API/Request\",\n            children: \"Web Request\"\n          }), \". You may need to update your code accordingly to reflect this change. For example:\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            children: \"- req.headers['content-type']\\n+ req.headers.get('content-type')\\n\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"The \", _jsx(_components.code, {\n            children: \"admin.css\"\n          }), \" and \", _jsx(_components.code, {\n            children: \"admin.scss\"\n          }), \" properties in the Payload Config have been removed.\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            children: \"// payload.config.ts\\n\\nbuildConfig({\\n  // ...\\n  admin: {\\n    // ...\\n-   css: '',\\n-   scss: ''\\n  }\\n})\\n\"\n          })\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"To migrate, choose one of the following options:\"\n        }), \"\\n\", _jsxs(_components.ol, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"\\n\", _jsxs(_components.p, {\n              children: [\"For most use cases, you can simply customize the file located at \", _jsx(_components.code, {\n                children: \"(payload)/custom.scss\"\n              }), \". You can import or add your own styles here, such as for Tailwind.\"]\n            }), \"\\n\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"\\n\", _jsxs(_components.p, {\n              children: [\"For plugins author, you can use a Custom Provider at \", _jsx(_components.code, {\n                children: \"admin.components.providers\"\n              }), \" to import your stylesheet:\"]\n            }), \"\\n\", _jsx(_components.pre, {\n              children: _jsx(_components.code, {\n                className: \"language-tsx\",\n                children: \"// payload.config.js\\n\\n//...\\nadmin: {\\n  components: {\\n    providers: [\\n      MyProvider: './providers/MyProvider.tsx'\\n    ]\\n  }\\n},\\n//...\\n\\n// providers/MyProvider.tsx\\n\\n'use client'\\nimport React from 'react'\\nimport './globals.css'\\n\\nexport const MyProvider: React.FC<{children?: any}= ({ children }) ={\\n  return (\\n    <React.fragment>\\n      {children}\\n    </React.fragment>\\n  )\\n}\\n\"\n              })\n            }), \"\\n\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"The \", _jsx(_components.code, {\n            children: \"admin.indexHTML\"\n          }), \" property has been removed. Delete this from your Payload Config.\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            children: \"// payload.config.ts\\n\\nbuildConfig({\\n  // ...\\n  admin: {\\n    // ...\\n-   indexHTML: ''\\n  }\\n})\\n\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"The \", _jsx(_components.code, {\n            children: \"collection.admin.hooks\"\n          }), \" property has been removed. Instead, use the new \", _jsx(_components.code, {\n            children: \"beforeDuplicate\"\n          }), \" field-level hook which take the usual field hook arguments.\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            children: \"// collections/Posts.ts\\nimport type { CollectionConfig } from 'payload'\\n\\nexport const PostsCollection: CollectionConfig = {\\n  slug: 'posts',\\n  admin: {\\n    hooks: {\\n-     beforeDuplicate: ({ data }) => {\\n-       return {\\n-         ...data,\\n-         title: `${data.title}-duplicate`\\n-       }\\n-     }\\n    }\\n  },\\n  fields: [\\n    {\\n      name: 'title',\\n      type: 'text',\\n      hooks: {\\n+      beforeDuplicate: [\\n+        ({ data }) => `${data.title}-duplicate`\\n+      ],\\n      },\\n    },\\n  ],\\n}\\n\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"Fields with \", _jsx(_components.code, {\n            children: \"unique: true\"\n          }), \" now automatically be appended with “- Copy” through the new \", _jsx(_components.code, {\n            children: \"admin.beforeDuplicate\"\n          }), \" field hooks (see previous bullet).\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"The \", _jsx(_components.code, {\n            children: \"upload.staticDir\"\n          }), \" property must now be an absolute path. Before it would attempt to use the location of the Payload Config and merge the relative path set for staticDir.\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            children: \"// collections/Media.ts\\nimport type { CollectionConfig } from 'payload'\\nimport path from 'path'\\n+ import { fileURLToPath } from 'url'\\n\\n+ const filename = fileURLToPath(import.meta.url)\\n+ const dirname = path.dirname(filename)\\n\\nexport const MediaCollection: CollectionConfig = {\\n  slug: 'media',\\n  upload: {\\n-   staticDir: path.resolve(__dirname, './uploads'),\\n+   staticDir: path.resolve(dirname, '../uploads'),\\n  },\\n}\\n\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"The \", _jsx(_components.code, {\n            children: \"upload.staticURL\"\n          }), \" property has been removed. If you were using this format URLs when using an external provider, you can leverage the \", _jsx(_components.code, {\n            children: \"generateFileURL\"\n          }), \" functions in order to do the same.\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            children: \"// collections/Media.ts\\nimport type { CollectionConfig } from 'payload'\\n\\nexport const MediaCollection: CollectionConfig = {\\n  slug: 'media',\\n  upload: {\\n-   staticURL: '',\\n  },\\n}\\n\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"The \", _jsx(_components.code, {\n            children: \"admin.favicon\"\n          }), \" property is now \", _jsx(_components.code, {\n            children: \"admin.icons\"\n          }), \" and the types have changed:\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            children: \"// payload.config.ts\\nimport { buildConfig } from 'payload'\\n\\nconst config = buildConfig({\\n  // ...\\n  admin: {\\n-   favicon: 'path-to-favicon.svg',\\n+   icons: [{\\n+     path: 'path-to-favicon.svg',\\n+     sizes: '32x32'\\n+   }]\\n  }\\n})\\n\"\n          })\n        }), \"\\n\", _jsxs(_components.p, {\n          children: [\"For more details, see the \", _jsx(_components.a, {\n            href: \"https://payloadcms.com/docs/admin/metadata#icons\",\n            children: \"Documentation\"\n          }), \".\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"The \", _jsx(_components.code, {\n            children: \"admin.meta.ogImage\"\n          }), \" property has been replaced by \", _jsx(_components.code, {\n            children: \"admin.meta.openGraph.images\"\n          }), \":\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            children: \"// payload.config.ts\\nimport { buildConfig } from 'payload'\\n\\nconst config = buildConfig({\\n  // ...\\n  admin: {\\n    meta: {\\n-     ogImage: '',\\n+     openGraph: {\\n+       images: []\\n+     }\\n    }\\n  }\\n})\\n\"\n          })\n        }), \"\\n\", _jsxs(_components.p, {\n          children: [\"For more details, see the \", _jsx(_components.a, {\n            href: \"https://payloadcms.com/docs/admin/metadata#open-graph\",\n            children: \"Documentation\"\n          }), \".\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"The args of the \", _jsx(_components.code, {\n            children: \"admin.livePreview.url\"\n          }), \" function have changed. It no longer receives \", _jsx(_components.code, {\n            children: \"documentInfo\"\n          }), \" as an arg, and instead, now has \", _jsx(_components.code, {\n            children: \"collectionConfig\"\n          }), \" and \", _jsx(_components.code, {\n            children: \"globalConfig\"\n          }), \".\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            children: \"// payload.config.ts\\nimport { buildConfig } from 'payload'\\n\\nexport default buildConfig({\\n  // ...\\n  admin: {\\n    // ...\\n    livePreview: ({\\n-     documentInfo,\\n+     collectionConfig,\\n+     globalConfig\\n    }) => ''\\n  }\\n})\\n\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"The \", _jsx(_components.code, {\n            children: \"admin.logoutRoute\"\n          }), \" and \", _jsx(_components.code, {\n            children: \"admin.inactivityRoute\"\n          }), \" properties have been consolidated into a single \", _jsx(_components.code, {\n            children: \"admin.routes\"\n          }), \" property. To migrate, simply move those two keys as follows:\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            children: \"// payload.config.ts\\nimport { buildConfig } from 'payload'\\n\\nconst config = buildConfig({\\n  // ...\\n  admin: {\\n-   logoutRoute: '/custom-logout',\\n+   inactivityRoute: '/custom-inactivity'\\n+   routes: {\\n+     logout: '/custom-logout',\\n+     inactivity: '/custom-inactivity'\\n+   }\\n  }\\n})\\n\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"The \", _jsx(_components.code, {\n            children: \"custom\"\n          }), \" property in the Payload Config, i.e. Collections, Globals, and Fields is now \", _jsx(_components.strong, {\n            children: \"server only\"\n          }), \" and will \", _jsx(_components.strong, {\n            children: \"not\"\n          }), \" appear in the client-side bundle. To add custom properties to the client bundle, use the new \", _jsx(_components.code, {\n            children: \"admin.custom\"\n          }), \" property, which will be available on \", _jsx(_components.em, {\n            children: \"both\"\n          }), \" the server and the client.\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            children: \"// payload.config.ts\\nimport { buildConfig } from 'payload'\\n\\nexport default buildConfig({\\n  custom: {\\n    someProperty: 'My Server Prop' // Now server only!\\n  },\\n  admin: {\\n+   custom: {\\n+     name: 'My Client Prop' // Available in server AND client\\n+   }\\n  },\\n})\\n\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.code, {\n            children: \"hooks.afterError\"\n          }), \" is now an array of functions instead of a single function. The args have also been expanded. Read \", _jsx(_components.a, {\n            href: \"https://payloadcms.com/docs/hooks/overview#root-hooks\",\n            children: \"More\"\n          }), \".\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            children: \"// payload.config.ts\\nimport { buildConfig } from 'payload'\\n\\nexport default buildConfig({\\n  hooks: {\\n-   afterError: async ({ error }) => {\\n+   afterError: [\\n+     async ({ error, req, res }) => {\\n+       // ...\\n+     }\\n+   ]\\n  }\\n})\\n\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"The \", _jsx(_components.code, {\n            children: \"./src/public\"\n          }), \" directory is now located directly at root level \", _jsx(_components.code, {\n            children: \"./public\"\n          }), \" \", _jsx(_components.a, {\n            href: \"https://nextjs.org/docs/pages/building-your-application/optimizing/static-assets\",\n            children: \"see Next.js docs for details\"\n          })]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"Payload now automatically removes \", _jsx(_components.code, {\n            children: \"localized: true\"\n          }), \" property from sub-fields if a parent is localized, as it's redunant and unnecessary. If you have some existing data in this structure and you want to disable that behavior, you need to enable \", _jsx(_components.code, {\n            children: \"allowLocalizedWithinLocalized\"\n          }), \" flag in your payload.config \", _jsx(_components.a, {\n            href: \"https://payloadcms.com/docs/configuration/overview#compatibility-flags\",\n            children: \"read more in documentation\"\n          }), \", or create a migration script that aligns your data.\\nMongodb example for a link in a page layout.\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            children: \"- layout.columns.en.link.en.type.en\\n+ layout.columns.en.link.type\\n\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Custom Components\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"All Payload React components have been moved from the \", _jsx(_components.code, {\n            children: \"payload\"\n          }), \" package to \", _jsx(_components.code, {\n            children: \"@payloadcms/ui\"\n          }), \". If you were previously importing components into your app from the \", _jsx(_components.code, {\n            children: \"payload\"\n          }), \" package, for example to create Custom Components, you will need to change your import paths:\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            children: \"- import { TextField, useField, etc. } from 'payload'\\n+ import { TextField, useField, etc. } from '@payloadcms/ui'\\n\"\n          })\n        }), \"\\n\", _jsx(_components.p, {\n          children: _jsxs(_components.em, {\n            children: [\"Note: for brevity, not \", _jsx(_components.em, {\n              children: \"all\"\n            }), \" modules are listed here\"]\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"All Custom Components are now defined as \", _jsx(_components.em, {\n            children: \"file paths\"\n          }), \" instead of direct imports. If you are using Custom Components in your Payload Config, remove the imported module and point to the file's path instead:\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            children: \"import { buildConfig } from 'payload'\\n- import { MyComponent } from './src/components/Logout'\\n\\nconst config = buildConfig({\\n  // ...\\n  admin: {\\n    components: {\\n      logout: {\\n-       Button: MyComponent,\\n+       Button: '/src/components/Logout#MyComponent'\\n      }\\n    }\\n  },\\n})\\n\"\n          })\n        }), \"\\n\", _jsxs(_components.p, {\n          children: [\"For more details, see the \", _jsx(_components.a, {\n            href: \"https://payloadcms.com/docs/custom-components/overview#component-paths\",\n            children: \"Documentation\"\n          }), \".\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"All Custom Components are now server-rendered by default, and therefore, cannot use state or hooks directly. If you’re using Custom Components in your app that requires state or hooks, add the \", _jsx(_components.code, {\n            children: \"'use client'\"\n          }), \" directive at the top of the file.\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            children: \"// components/MyClientComponent.tsx\\n+ 'use client'\\nimport React, { useState } from 'react'\\n\\nexport const MyClientComponent = () => {\\n  const [state, setState] = useState()\\n\\n  return (\\n    <div>\\n      {state}\\n    </div>\\n  )\\n}\\n\"\n          })\n        }), \"\\n\", _jsxs(_components.p, {\n          children: [\"For more details, see the \", _jsx(_components.a, {\n            href: \"https://payloadcms.com/docs/custom-components/overview#client-components\",\n            children: \"Documentation\"\n          }), \".\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"The \", _jsx(_components.code, {\n            children: \"admin.description\"\n          }), \" property within Collection, Globals, and Fields no longer accepts a React Component. Instead, you must define it as a Custom Component.\"]\n        }), \"\\n\", _jsxs(_components.ol, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"For Collections, use the \", _jsx(_components.code, {\n              children: \"admin.components.edit.Description\"\n            }), \" key:\"]\n          }), \"\\n\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            children: \"// collections/Posts.ts\\nimport type { CollectionConfig } from 'payload'\\n- import { MyCustomDescription } from '../components/MyCustomDescription'\\n\\nexport const PostsCollection: CollectionConfig = {\\n  slug: 'posts',\\n  admin: {\\n-    description: MyCustomDescription,\\n+    components: {\\n+      edit: {\\n+        Description: 'path/to/MyCustomDescription'\\n+      }\\n+    }\\n  }\\n}\\n\"\n          })\n        }), \"\\n\", _jsxs(_components.ol, {\n          start: \"2\",\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"For Globals, use the \", _jsx(_components.code, {\n              children: \"admin.components.elements.Description\"\n            }), \" key:\"]\n          }), \"\\n\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            children: \"// globals/Site.ts\\nimport type { GlobalConfig } from 'payload'\\n- import { MyCustomDescription } from '../components/MyCustomDescription'\\n\\nexport const SiteGlobal: GlobalConfig = {\\n  slug: 'site',\\n  admin: {\\n-    description: MyCustomDescription,\\n+    components: {\\n+      elements: {\\n+        Description: 'path/to/MyCustomDescription'\\n+      }\\n+    }\\n  }\\n}\\n\"\n          })\n        }), \"\\n\", _jsxs(_components.ol, {\n          start: \"3\",\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"For Fields, use the \", _jsx(_components.code, {\n              children: \"admin.components.Description\"\n            }), \" key:\"]\n          }), \"\\n\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            children: \"// fields/MyField.ts\\nimport type { FieldConfig } from 'payload'\\n- import { MyCustomDescription } from '../components/MyCustomDescription'\\n\\nexport const MyField: FieldConfig = {\\n  type: 'text',\\n  admin: {\\n-    description: MyCustomDescription,\\n+    components: {\\n+      Description: 'path/to/MyCustomDescription'\\n+    }\\n  }\\n}\\n\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"Array Field row labels and Collapsible Field label now \", _jsx(_components.em, {\n            children: \"only\"\n          }), \" accepts a React Component, and no longer accepts a plain string or record:\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            children: \"// file: Collection.tsx\\nimport type { CollectionConfig } from 'payload'\\n- import { MyCustomRowLabel } from './components/MyCustomRowLabel.tsx'\\n\\nexport const MyCollection: CollectionConfig = {\\n  slug: 'my-collection',\\n  fields: [\\n    {\\n      name: 'my-array',\\n      type: 'array',\\n      admin: {\\n        components: {\\n-         RowLabel: 'My Array Row Label,\\n+         RowLabel: './components/RowLabel.ts'\\n        }\\n      },\\n      fields: [...]\\n    },\\n    {\\n      name: 'my-collapsible',\\n      type: 'collapsible',\\n      admin: {\\n        components: {\\n-         Label: 'My Collapsible Label',\\n+         Label: './components/RowLabel.ts'\\n        }\\n      },\\n      fields: [...]\\n    }\\n  ]\\n}\\n\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"All default view keys are now camelcase:\"\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"For example, for Root Views:\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            children: \"// file: payload.config.ts\\n\\nimport { buildConfig } from 'payload'\\n\\nexport default buildConfig({\\nadmin: {\\n  views: {\\n-    Account: ...\\n+    account: ...\\n  }\\n})\\n\"\n          })\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"Or Document Views:\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            children: \"// file: Collection.tsx\\n\\nimport type { CollectionConfig } from 'payload'\\n\\nexport const MyCollection: CollectionConfig = {\\n  slug: 'my-collection',\\n  admin: {\\n    views: {\\n-     Edit: {\\n-       Default: ...\\n-     }\\n+     edit: {\\n+       default: ...\\n+     }\\n    }\\n  }\\n}\\n\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"Custom Views within the config no longer accept React Components directly, instead, you must use their \", _jsx(_components.code, {\n            children: \"Component\"\n          }), \" property:\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            children: \"// file: Collection.tsx\\nimport type { CollectionConfig } from 'payload'\\n- import { MyCustomView } from './components/MyCustomView.tsx'\\n\\nexport const MyCollection: CollectionConfig = {\\n  slug: 'my-collection',\\n  admin: {\\n    views: {\\n-     Edit: MyCustomView\\n+     edit: {\\n+       Component: './components/MyCustomView.tsx'\\n+     }\\n    }\\n  }\\n}\\n\"\n          })\n        }), \"\\n\", _jsxs(_components.p, {\n          children: [\"This also means that Custom Root Views are no longer defined on the \", _jsx(_components.code, {\n            children: \"edit\"\n          }), \" key. Instead, use the new \", _jsx(_components.code, {\n            children: \"views.root\"\n          }), \" key:\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            children: \"// file: Collection.tsx\\nimport type { CollectionConfig } from 'payload'\\n- import { MyCustomRootView } from './components/MyCustomRootView.tsx'\\n\\nexport const MyCollection: CollectionConfig = {\\n  slug: 'my-collection',\\n  admin: {\\n    views: {\\n-     Edit: MyCustomRootView\\n      edit: {\\n+       root: {\\n+         Component: './components/MyCustomRootView.tsx'\\n+       }\\n      }\\n    }\\n  }\\n}\\n\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"The \", _jsx(_components.code, {\n            children: \"href\"\n          }), \" and \", _jsx(_components.code, {\n            children: \"isActive\"\n          }), \" functions on View Tabs no longer includes the \", _jsx(_components.code, {\n            children: \"match\"\n          }), \" or \", _jsx(_components.code, {\n            children: \"location\"\n          }), \" arguments. This is is a property specific to React Router, not Next.js. If you need to do URL matching similar to this, use a custom tab that fires of some hooks, i.e. \", _jsx(_components.code, {\n            children: \"usePathname()\"\n          }), \" and run it through your own utility functions:\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            children: \"// collections/Posts.ts\\nimport type { CollectionConfig } from 'payload'\\n\\nexport const PostsCollection: CollectionConfig = {\\n  slug: 'posts',\\n  admin: {\\n    components: {\\n      views: {\\n-        Edit: {\\n-          Tab: {\\n-            isActive: ({ href, location, match }) => true,\\n-            href: ({ href, location, match }) => ''\\n-          },\\n-       },\\n+       edit: {\\n+         tab: {\\n+           isActive: ({ href }) => true,\\n+           href: ({ href }) => '' // or use a Custom Component (see below)\\n+           // Component: './path/to/CustomComponent.tsx'\\n+         }\\n+       },\\n      },\\n    },\\n  },\\n}\\n\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"The \", _jsx(_components.code, {\n            children: \"admin.components.views[key].Tab.pillLabel\"\n          }), \" has been replaced with \", _jsx(_components.code, {\n            children: \"admin.components.views[key].tab.Pill\"\n          }), \":\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            children: \"// collections/Posts.ts\\nimport type { CollectionConfig } from 'payload'\\n\\nexport const PostsCollection: CollectionConfig = {\\n  slug: 'posts',\\n  admin: {\\n    components: {\\n-     views: {\\n-       Edit: {\\n-         Tab: {\\n-           pillLabel: 'Hello, world!',\\n-         },\\n-       },\\n+       edit: {\\n+         tab: {\\n+           Pill: './path/to/CustomPill.tsx',\\n+         }\\n+       },\\n      },\\n    },\\n  },\\n}\\n\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.code, {\n            children: \"react-i18n\"\n          }), \" was removed, the \", _jsx(_components.code, {\n            children: \"Trans\"\n          }), \" component from \", _jsx(_components.code, {\n            children: \"react-i18n\"\n          }), \" has been replaced with a Payload-provided solution:\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            children: \"'use client'\\n- import { Trans } from \\\"react-i18n\\\"\\n+ import { Translation } from \\\"@payloadcms/ui\\\"\\n\\n// Example string to translate:\\n// \\\"loggedInChangePassword\\\": \\\"To change your password, go to your <0>account</0> and edit your password there.\\\"\\n\\nexport const MyComponent = () => {\\n  return (\\n-     <Trans i18nKey=\\\"loggedInChangePassword\\\" t={t}>\\n-       <Link to={`${admin}/account`}>account</Link>\\n-     </Trans>\\n\\n+     <Translation\\n+       t={t}\\n+       i18nKey=\\\"authentication:loggedInChangePassword\\\"\\n+       elements={{\\n+         '0': ({ children }) => <Link href={`${admin}/account`} children={children} />,\\n+       }}\\n+     />\\n  )\\n}\\n\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Endpoints\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"All endpoint handlers have changed. The args no longer include \", _jsx(_components.code, {\n            children: \"res\"\n          }), \", and \", _jsx(_components.code, {\n            children: \"next\"\n          }), \", and the return type now expects a valid HTTP \", _jsx(_components.a, {\n            href: \"https://developer.mozilla.org/en-US/docs/Web/API/Response\",\n            children: _jsx(_components.code, {\n              children: \"Response\"\n            })\n          }), \" instead of \", _jsx(_components.code, {\n            children: \"res.json\"\n          }), \", \", _jsx(_components.code, {\n            children: \"res.send\"\n          }), \", etc.:\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            children: \"// collections/Posts.ts\\nimport type { CollectionConfig } from 'payload'\\n\\nexport const PostsCollection: CollectionConfig = {\\n  slug: 'posts',\\n  endpoints: [\\n-   {\\n-     path: '/whoami/:parameter',\\n-     method: 'post',\\n-     handler: (req, res) => {\\n-       res.json({\\n-         parameter: req.params.parameter,\\n-         name: req.body.name,\\n-         age: req.body.age,\\n-       })\\n-     }\\n-   },\\n+   {\\n+     path: '/whoami/:parameter',\\n+     method: 'post',\\n+     handler: (req) => {\\n+       return Response.json({\\n+         parameter: req.routeParams.parameter,\\n+         // ^^ `params` is now `routeParams`\\n+         name: req.data.name,\\n+         age: req.data.age,\\n+       })\\n+     }\\n+   }\\n  ]\\n}\\n\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"Endpoint handlers no longer resolves \", _jsx(_components.code, {\n            children: \"data\"\n          }), \", \", _jsx(_components.code, {\n            children: \"locale\"\n          }), \", or \", _jsx(_components.code, {\n            children: \"fallbackLocale\"\n          }), \" for you on the request. Instead, you must resolve them yourself or use the Payload-provided utilities:\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            children: \"// collections/Posts.ts\\nimport type { CollectionConfig } from 'payload'\\n+ import { addDataAndFileToRequest } from '@payloadcms/next/utilities'\\n+ import { addLocalesToRequest } from '@payloadcms/next/utilities'\\n\\nexport const PostsCollection: CollectionConfig = {\\n  slug: 'posts',\\n  endpoints: [\\n-   {\\n-     path: '/whoami/:parameter',\\n-     method: 'post',\\n-     handler: async (req) => {\\n-       return Response.json({\\n-         name: req.data.name, // data will be undefined\\n-       })\\n-     }\\n-   },\\n+   {\\n+     path: '/whoami/:parameter',\\n+     method: 'post',\\n+     handler: async (req) => {\\n+       // mutates req, must be awaited\\n+       await addDataAndFileToRequest(req)\\n+       await addLocalesToRequest(req)\\n+\\n+       return Response.json({\\n+         name: req.data.name, // data is now available\\n+    \\t    fallbackLocale: req.fallbackLocale,\\n+         locale: req.locale,\\n+       })\\n+     }\\n+   }\\n  ]\\n}\\n\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"React Hooks\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"The \", _jsx(_components.code, {\n            children: \"useTitle\"\n          }), \" hook has been consolidated into the \", _jsx(_components.code, {\n            children: \"useDocumentInfo\"\n          }), \" hook. Instead, you can get title directly from document info context:\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            children: \"'use client'\\n- import { useTitle } from 'payload'\\n+ import { useDocumentInfo } from '@payloadcms/ui'\\n\\nexport const MyComponent = () => {\\n- const title = useTitle()\\n+ const { title } = useDocumentInfo()\\n\\n  // ...\\n}\\n\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"The \", _jsx(_components.code, {\n            children: \"useDocumentInfo\"\n          }), \" hook no longer returns \", _jsx(_components.code, {\n            children: \"collection\"\n          }), \" or \", _jsx(_components.code, {\n            children: \"global\"\n          }), \". Instead, various properties of the config are passed, like \", _jsx(_components.code, {\n            children: \"collectionSlug\"\n          }), \" and \", _jsx(_components.code, {\n            children: \"globalSlug\"\n          }), \". You can use these to access a client-side config, if needed, through the \", _jsx(_components.code, {\n            children: \"useConfig\"\n          }), \" hook (see next bullet).\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            children: \"'use client'\\nimport { useDocumentInfo } from '@payloadcms/ui'\\n\\nexport const MyComponent = () => {\\n  const {\\n-   collection,\\n-   global,\\n+   collectionSlug,\\n+   globalSlug\\n  } = useDocumentInfo()\\n\\n  // ...\\n}\\n\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"The \", _jsx(_components.code, {\n            children: \"useConfig\"\n          }), \" hook now returns a \", _jsx(_components.code, {\n            children: \"ClientConfig\"\n          }), \" and not a \", _jsx(_components.code, {\n            children: \"SanitizedConfig\"\n          }), \". This is because the config itself is not serializable and so it is not able to be thread through to the client. This means that all non-serializable props have been omitted from the Client Config, such as \", _jsx(_components.code, {\n            children: \"db\"\n          }), \", \", _jsx(_components.code, {\n            children: \"bundler\"\n          }), \", etc.\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            children: \"'use client'\\n- import { useConfig } from 'payload'\\n+ import { useConfig } from '@payloadcms/ui'\\n\\nexport const MyComponent = () => {\\n- const config = useConfig() // used to be a 'SanitizedConfig'\\n+ const { config } = useConfig() // now is a 'ClientConfig'\\n\\n  // ...\\n}\\n\"\n          })\n        }), \"\\n\", _jsxs(_components.p, {\n          children: [\"For more details, see the \", _jsx(_components.a, {\n            href: \"https://payloadcms.com/docs/admin/custom-components/overview#accessing-the-payload-config\",\n            children: \"Documentation\"\n          }), \".\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"The \", _jsx(_components.code, {\n            children: \"useCollapsible\"\n          }), \" hook has had slight changes to its property names. \", _jsx(_components.code, {\n            children: \"collapsed\"\n          }), \" is now \", _jsx(_components.code, {\n            children: \"isCollapsed\"\n          }), \" and \", _jsx(_components.code, {\n            children: \"withinCollapsible\"\n          }), \" is now \", _jsx(_components.code, {\n            children: \"isWithinCollapsible\"\n          }), \".\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            children: \"'use client'\\nimport { useCollapsible } from '@payloadcms/ui'\\n\\nexport const MyComponent = () => {\\n- const { collapsed, withinCollapsible } = useCollapsible()\\n+ const { isCollapsed, isWithinCollapsible } = useCollapsible()\\n}\\n\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"The \", _jsx(_components.code, {\n            children: \"useTranslation\"\n          }), \" hook no longer takes any options, any translations using shorthand accessors will need to use the entire \", _jsx(_components.code, {\n            children: \"group:key\"\n          })]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            children: \"'use client'\\n- import { useTranslation } from 'payload'\\n+ import { useTranslation } from '@payloadcms/ui'\\n\\nexport const MyComponent = () => {\\n- const { i18n, t } = useTranslation('general')\\n+ const { i18n, t } = useTranslation()\\n\\n- return <p>{t('cancel')}</p>\\n+ return <p>{t('general:cancel')}</p>\\n}\\n\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Types\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"The \", _jsx(_components.code, {\n            children: \"Fields\"\n          }), \" type was renamed to \", _jsx(_components.code, {\n            children: \"FormState\"\n          }), \" for improved semantics. If you were previously importing this type in your own application, simply change the import name:\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            children: \"- import type { Fields } from 'payload'\\n+ import type { FormState } from 'payload'\\n\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"The \", _jsx(_components.code, {\n            children: \"BlockField\"\n          }), \" and related types have been renamed to \", _jsx(_components.code, {\n            children: \"BlocksField\"\n          }), \" for semantic accuracy.\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            children: \"- import type { BlockField, BlockFieldProps } from 'payload'\\n+ import type { BlocksField, BlocksFieldProps } from 'payload'\\n\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Email Adapters\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Email functionality has been abstracted out into email adapters.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"All existing nodemailer functionality was abstracted into the \", _jsx(_components.code, {\n          children: \"@payloadcms/email-nodemailer\"\n        }), \" package\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"No longer configured with ethereal.email by default.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Ability to pass email into the \", _jsx(_components.code, {\n          children: \"init\"\n        }), \" function has been removed.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Warning will be given on startup if email not configured. Any \", _jsx(_components.code, {\n          children: \"sendEmail\"\n        }), \" call will simply log the To address and subject.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"A Resend adapter is now also available via the \", _jsx(_components.code, {\n          children: \"@payloadcms/email-resend\"\n        }), \" package.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"If you used the default email configuration in 2.0 (nodemailer):\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"// ❌ Before\\n\\n// via payload.init\\npayload.init({\\n  email: {\\n    transport: someNodemailerTransport\\n    fromName: 'hello',\\n    fromAddress: 'hello@example.com',\\n  },\\n})\\n// or via email in payload.config.ts\\nexport default buildConfig({\\n  email: {\\n    transport: someNodemailerTransport\\n    fromName: 'hello',\\n    fromAddress: 'hello@example.com',\\n  },\\n})\\n\\n// ✅ After\\n\\n// Using new nodemailer adapter package\\n\\nimport { nodemailerAdapter } from '@payloadcms/email-nodemailer'\\n\\nexport default buildConfig({\\n  email: nodemailerAdapter() // This will be the old ethereal.email functionality\\n})\\n\\n// or pass in transport\\n\\nexport default buildConfig({\\n  email: nodemailerAdapter({\\n    defaultFromAddress: 'info@payloadcms.com',\\n    defaultFromName: 'Payload',\\n    transport: await nodemailer.createTransport({\\n      host: process.env.SMTP_HOST,\\n      port: 587,\\n      auth: {\\n        user: process.env.SMTP_USER,\\n        pass: process.env.SMTP_PASS,\\n      },\\n    })\\n  })\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Removal of rate-limiting\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Now only available if using custom server and using express or similar\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Plugins\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.em, {\n            children: \"All\"\n          }), \" plugins have been standardized to use \", _jsx(_components.em, {\n            children: \"named exports\"\n          }), \" (as opposed to default exports). Most also have a suffix of \", _jsx(_components.code, {\n            children: \"Plugin\"\n          }), \" to make it clear what is being imported.\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            children: \"- import seo from '@payloadcms/plugin-seo'\\n+ import { seoPlugin } from '@payloadcms/plugin-seo'\\n\\n- import stripePlugin from '@payloadcms/plugin-stripe'\\n+ import { stripePlugin } from '@payloadcms/plugin-stripe'\\n\\n// and so on for every plugin\\n\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.code, {\n        children: \"@payloadcms/plugin-cloud-storage\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"The adapters that are exported from \", _jsx(_components.code, {\n          children: \"@payloadcms/plugin-cloud-storage\"\n        }), \" (ie. \", _jsx(_components.code, {\n          children: \"@payloadcms/plugin-cloud-storage/s3\"\n        }), \") package have been removed.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"New \", _jsx(_components.em, {\n          children: \"standalone\"\n        }), \" packages have been created for each of the existing adapters. Please see the documentation for the one that you use.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"@payloadcms/plugin-cloud-storage\"\n        }), \" is still fully supported but should only to be used if you are providing a custom adapter that does not have a dedicated package.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"If you have created a custom adapter, the type must now provide a \", _jsx(_components.code, {\n          children: \"name\"\n        }), \" property.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Service\"\n          }), _jsx(_components.th, {\n            children: \"Package\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Vercel Blob\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.a, {\n              href: \"https://github.com/payloadcms/payload/tree/main/packages/storage-vercel-blob\",\n              children: \"https://github.com/payloadcms/payload/tree/main/packages/storage-vercel-blob\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"AWS S3\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.a, {\n              href: \"https://github.com/payloadcms/payload/tree/main/packages/storage-s3\",\n              children: \"https://github.com/payloadcms/payload/tree/main/packages/storage-s3\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Azure\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.a, {\n              href: \"https://github.com/payloadcms/payload/tree/main/packages/storage-azure\",\n              children: \"https://github.com/payloadcms/payload/tree/main/packages/storage-azure\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Google Cloud Storage\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.a, {\n              href: \"https://github.com/payloadcms/payload/tree/main/packages/storage-gcs\",\n              children: \"https://github.com/payloadcms/payload/tree/main/packages/storage-gcs\"\n            })\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"// ❌ Before (required peer dependencies depending on adapter)\\n\\nimport { cloudStorage } from '@payloadcms/plugin-cloud-storage'\\nimport { s3Adapter } from '@payloadcms/plugin-cloud-storage/s3'\\n\\nplugins: [\\n    cloudStorage({\\n      collections: {\\n        media: {\\n          adapter: s3Adapter({\\n            bucket: process.env.S3_BUCKET,\\n            config: {\\n              credentials: {\\n                accessKeyId: process.env.S3_ACCESS_KEY_ID,\\n                secretAccessKey: process.env.S3_SECRET_ACCESS_KEY,\\n              },\\n              region: process.env.S3_REGION,\\n            },\\n          }),\\n        },\\n      },\\n    }),\\n  ],\\n\\n // ✅ After\\n\\n import { s3Storage } from '@payloadcms/storage-s3'\\n\\n plugins: [\\n    s3Storage({\\n      collections: {\\n        media: true,\\n      },\\n      bucket: process.env.S3_BUCKET,\\n      config: {\\n        credentials: {\\n          accessKeyId: process.env.S3_ACCESS_KEY_ID,\\n          secretAccessKey: process.env.S3_SECRET_ACCESS_KEY,\\n        },\\n        region: process.env.S3_REGION,\\n      },\\n    }),\\n  ],\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.code, {\n        children: \"@payloadcms/plugin-form-builder\"\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"Field overrides for form and form submission collections now accept a function with a \", _jsx(_components.code, {\n            children: \"defaultFields\"\n          }), \" inside the args instead of an array of config\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            children: \"// payload.config.ts\\nimport { buildConfig } from 'payload'\\nimport { formBuilderPlugin } from '@payloadcms/plugin-form-builder'\\n\\nconst config = buildConfig({\\n  // ...\\n  plugins: formBuilderPlugin({\\n-   fields: [\\n-     {\\n-       name: 'custom',\\n-       type: 'text',\\n-     }\\n-   ],\\n+   fields: ({ defaultFields }) => {\\n+     return [\\n+       ...defaultFields,\\n+       {\\n+         name: 'custom',\\n+         type: 'text',\\n+       },\\n+     ]\\n+   }\\n  })\\n})\\n\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.code, {\n        children: \"@payloadcms/plugin-redirects\"\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"Field overrides for the redirects collection now accepts a function with a \", _jsx(_components.code, {\n            children: \"defaultFields\"\n          }), \" inside the args instead of an array of config\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            children: \"// payload.config.ts\\nimport { buildConfig } from 'payload'\\nimport { redirectsPlugin } from '@payloadcms/plugin-redirects'\\n\\nconst config = buildConfig({\\n  // ...\\n  plugins: redirectsPlugin({\\n-   fields: [\\n-     {\\n-       name: 'custom',\\n-       type: 'text',\\n-     }\\n-   ],\\n+   fields: ({ defaultFields }) => {\\n+     return [\\n+       ...defaultFields,\\n+       {\\n+         name: 'custom',\\n+         type: 'text',\\n+       },\\n+     ]\\n+   }\\n  })\\n})\\n\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.code, {\n        children: \"@payloadcms/richtext-lexical\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you have custom features for \", _jsx(_components.code, {\n        children: \"@payloadcms/richtext-lexical\"\n      }), \" you will need to migrate your code to the new API. Read more about the new API in the \", _jsx(_components.a, {\n        href: \"https://payloadcms.com/docs/rich-text/building-custom-features\",\n        children: \"documentation\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Reserved Field names\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Payload reserves certain field names for internal use. Using any of the following names in your collections or globals will result in those fields being sanitized from the config, which can cause deployment errors. Ensure that any conflicting fields are renamed before migrating.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"General Reserved Names\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"file\"\n        })\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"_id\"\n        }), \" (MongoDB only)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"__v\"\n        }), \" (MongoDB only)\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Important Note\"\n      }), \": It is recommended to avoid using field names with an underscore (\", _jsx(_components.code, {\n        children: \"_\"\n      }), \") prefix unless explicitly required by a plugin. Payload uses this prefix for internal columns, which can lead to conflicts in certain SQL conditions. The following are examples of reserved internal columns (this list is not exhaustive and other internal fields may also apply):\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"_order\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"_path\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"_uuid\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"_parent_id\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"_locale\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Auth-Related Reserved Names\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"These are restricted if your collection uses \", _jsx(_components.code, {\n        children: \"auth: true\"\n      }), \" and does not have \", _jsx(_components.code, {\n        children: \"disableAuthStrategy: true\"\n      }), \":\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"salt\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"hash\"\n        })\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"apiKey\"\n        }), \" (when \", _jsx(_components.code, {\n          children: \"auth.useAPIKey: true\"\n        }), \" is enabled)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"useAPIKey\"\n        }), \" (when \", _jsx(_components.code, {\n          children: \"auth.useAPIKey: true\"\n        }), \" is enabled)\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"resetPasswordToken\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"resetPasswordExpiration\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"password\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"email\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"username\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Upload-Related Reserved Names\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"These apply if your collection has \", _jsx(_components.code, {\n        children: \"upload: true\"\n      }), \" configured:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"filename\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"mimetype\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"filesize\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"width\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"height\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"focalX\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"focalY\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"url\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"thumbnailURL\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If \", _jsx(_components.code, {\n        children: \"imageSizes\"\n      }), \" is configured, the following are also reserved:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"sizes\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If any of these names are found in your collection / global fields, update them before migrating to avoid unexpected issues.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Upgrade from previous beta\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Reference this \", _jsx(_components.a, {\n        href: \"https://payload-releases-filter.vercel.app/?version=3&from=152429656&to=188243150&sort=asc&breaking=on\",\n        children: \"community-made site\"\n      }), \". Set your version, sort by oldest first, enable breaking changes only.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Then go through each one of the breaking changes and make the adjustments. You can optionally reference the \", _jsx(_components.a, {\n        href: \"https://github.com/payloadcms/payload/tree/main/templates/blank\",\n        children: \"blank template\"\n      }), \" for how things should end up.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}