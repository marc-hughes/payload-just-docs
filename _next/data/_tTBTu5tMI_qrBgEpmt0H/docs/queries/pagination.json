{"pageProps":{"frontMatter":{"title":"Pagination","label":"Pagination","order":40,"desc":"Payload queries are equipped with automatic pagination so you create paginated lists of documents within your app.","keywords":"query, documents, pagination, documentation, Content Management System, cms, headless, javascript, node, react, nextjs"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    strong: \"strong\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    pre: \"pre\",\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"All collection \", _jsx(_components.code, {\n        children: \"find\"\n      }), \" queries are paginated automatically. Responses are returned with top-level meta data related to pagination, and returned documents are nested within a \", _jsx(_components.code, {\n        children: \"docs\"\n      }), \" array.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsxs(_components.strong, {\n        children: [_jsx(_components.code, {\n          children: \"Find\"\n        }), \" response properties:\"]\n      })\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Property\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"docs\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Array of documents in the collection\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"totalDocs\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Total available documents within the collection\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"limit\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Limit query parameter - defaults to \", _jsx(_components.code, {\n              children: \"10\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"totalPages\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Total pages available, based upon the \", _jsx(_components.code, {\n              children: \"limit\"\n            }), \" queried for\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"page\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Current page number\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"pagingCounter\"\n            })\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.code, {\n              children: \"number\"\n            }), \" of the first doc on the current page\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"hasPrevPage\"\n            })\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.code, {\n              children: \"true/false\"\n            }), \" if previous page exists\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"hasNextPage\"\n            })\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.code, {\n              children: \"true/false\"\n            }), \" if next page exists\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"prevPage\"\n            })\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.code, {\n              children: \"number\"\n            }), \" of previous page, \", _jsx(_components.code, {\n              children: \"null\"\n            }), \" if it doesn't exist\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"nextPage\"\n            })\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.code, {\n              children: \"number\"\n            }), \" of next page, \", _jsx(_components.code, {\n              children: \"null\"\n            }), \" if it doesn't exist\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example response:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-json\",\n        children: \"{\\n  // Document Array // highlight-line\\n  \\\"docs\\\": [\\n    {\\n      \\\"title\\\": \\\"Page Title\\\",\\n      \\\"description\\\": \\\"Some description text\\\",\\n      \\\"priority\\\": 1,\\n      \\\"createdAt\\\": \\\"2020-10-17T01:19:29.858Z\\\",\\n      \\\"updatedAt\\\": \\\"2020-10-17T01:19:29.858Z\\\",\\n      \\\"id\\\": \\\"5f8a46a1dd05db75c3c64760\\\"\\n    }\\n  ],\\n  // Metadata // highlight-line\\n  \\\"totalDocs\\\": 6,\\n  \\\"limit\\\": 1,\\n  \\\"totalPages\\\": 6,\\n  \\\"page\\\": 1,\\n  \\\"pagingCounter\\\": 1,\\n  \\\"hasPrevPage\\\": false,\\n  \\\"hasNextPage\\\": true,\\n  \\\"prevPage\\\": null,\\n  \\\"nextPage\\\": 2\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Pagination controls\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"All Payload APIs support the pagination controls below. With them, you can create paginated lists of documents within your application:\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Control\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"limit\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Limits the number of documents returned\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"page\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Get a specific page number\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Disabling pagination within Local API\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For \", _jsx(_components.code, {\n        children: \"find\"\n      }), \" operations within the Local API, you can disable pagination to retrieve all documents from a collection by passing \", _jsx(_components.code, {\n        children: \"pagination: false\"\n      }), \" to the \", _jsx(_components.code, {\n        children: \"find\"\n      }), \" local operation.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}