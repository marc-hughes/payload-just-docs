{"pageProps":{"frontMatter":{"title":"Tasks","label":"Tasks","order":20,"desc":"A Task is a distinct function declaration that can be run within Payload's Jobs Queue.","keywords":"jobs queue, application framework, typescript, node, react, nextjs"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    a: \"a\",\n    code: \"code\",\n    h3: \"h3\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    pre: \"pre\",\n    em: \"em\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(Banner, {\n      type: \"default\",\n      children: _jsxs(_components.p, {\n        children: [\"A \", _jsx(_components.strong, {\n          children: \"\\\"Task\\\"\"\n        }), \" is a function definition that performs business logic and whose\\ninput and output are both strongly typed.\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can register Tasks on the Payload config, and then create \", _jsx(_components.a, {\n        href: \"/docs/jobs-queue/jobs\",\n        children: \"Jobs\"\n      }), \" or \", _jsx(_components.a, {\n        href: \"/docs/jobs-queue/workflows\",\n        children: \"Workflows\"\n      }), \" that use them. Think of Tasks like tidy, isolated \\\"functions that do one specific thing\\\".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Payload Tasks can be configured to automatically retried if they fail, which makes them valuable for \\\"durable\\\" workflows like AI applications where LLMs can return non-deterministic results, and might need to be retried.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Tasks can either be defined within the \", _jsx(_components.code, {\n        children: \"jobs.tasks\"\n      }), \" array in your Payload config, or they can be defined inline within a workflow.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Defining tasks in the config\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Simply add a task to the \", _jsx(_components.code, {\n        children: \"jobs.tasks\"\n      }), \" array in your Payload config. A task consists of the following fields:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"slug\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Define a slug-based name for this job. This slug needs to be unique among both tasks and workflows.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"handler\"\n            })\n          }), _jsx(_components.td, {\n            children: \"The function that should be responsible for running the job. You can either pass a string-based path to the job function file, or the job function itself. If you are using large dependencies within your job, you might prefer to pass the string path because that will avoid bundling large dependencies in your Next.js app. Passing a string path is an advanced feature that may require a sophisticated build pipeline in order to work.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"inputSchema\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Define the input field schema - Payload will generate a type for this schema.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"interfaceName\"\n            })\n          }), _jsx(_components.td, {\n            children: \"You can use interfaceName to change the name of the interface that is generated for this task. By default, this is \\\"Task\\\" + the capitalized task slug.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"outputSchema\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Define the output field schema - Payload will generate a type for this schema.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"label\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Define a human-friendly label for this task.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"onFail\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Function to be executed if the task fails.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"onSuccess\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Function to be executed if the task succeeds.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"retries\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Specify the number of times that this step should be retried if it fails. If this is undefined, the task will either inherit the retries from the workflow or have no retries. If this is 0, the task will not be retried. By default, this is undefined.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The logic for the Task is defined in the \", _jsx(_components.code, {\n        children: \"handler\"\n      }), \" - which can be defined as a function, or a path to a function. The \", _jsx(_components.code, {\n        children: \"handler\"\n      }), \" will run once a worker picks picks up a Job that includes this task.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"It should return an object with an \", _jsx(_components.code, {\n        children: \"output\"\n      }), \" key, which should contain the output of the task as you've defined.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Example:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"export default buildConfig({\\n  // ...\\n  jobs: {\\n    tasks: [\\n      {\\n        // Configure this task to automatically retry\\n        // up to two times\\n        retries: 2,\\n\\n        // This is a unique identifier for the task\\n\\n        slug: 'createPost',\\n\\n        // These are the arguments that your Task will accept\\n        inputSchema: [\\n          {\\n            name: 'title',\\n            type: 'text',\\n            required: true,\\n          },\\n        ],\\n\\n        // These are the properties that the function should output\\n        outputSchema: [\\n          {\\n            name: 'postID',\\n            type: 'text',\\n            required: true,\\n          },\\n        ],\\n\\n        // This is the function that is run when the task is invoked\\n        handler: async ({ input, job, req }) => {\\n          const newPost = await req.payload.create({\\n            collection: 'post',\\n            req,\\n            data: {\\n              title: input.title,\\n            },\\n          })\\n          return {\\n            output: {\\n              postID: newPost.id,\\n            },\\n          }\\n        },\\n      } as TaskConfig<'createPost'>,\\n    ],\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In addition to defining handlers as functions directly provided to your Payload config, you can also pass an \", _jsx(_components.em, {\n        children: \"absolute path\"\n      }), \" to where the handler is defined. If your task has large dependencies, and you are planning on executing your jobs in a separate process that has access to the filesystem, this could be a handy way to make sure that your Payload + Next.js app remains quick to compile and has minimal dependencies.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Keep in mind that this is an advanced feature that may require a sophisticated build pipeline, especially when using it in production or within Next.js, e.g. by calling opening the \", _jsx(_components.code, {\n        children: \"/api/payload-jobs/run\"\n      }), \" endpoint. You will have to transpile the handler files separately and ensure they are available in the same location when the job is run. If you're using an endpoint to execute your jobs, it's recommended to define your handlers as functions directly in your Payload Config, or use import paths handlers outside of Next.js.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In general, this is an advanced use case. Here's how this would look:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"payload.config.ts:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { fileURLToPath } from 'node:url'\\nimport path from 'path'\\n\\nconst filename = fileURLToPath(import.meta.url)\\nconst dirname = path.dirname(filename)\\n\\nexport default buildConfig({\\n  jobs: {\\n    tasks: [\\n      {\\n        // ...\\n        // The #createPostHandler is a named export within the `createPost.ts` file\\n        handler:\\n          path.resolve(dirname, 'src/tasks/createPost.ts') +\\n          '#createPostHandler',\\n      },\\n    ],\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Then, the \", _jsx(_components.code, {\n        children: \"createPost\"\n      }), \" file itself:\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"src/tasks/createPost.ts:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { TaskHandler } from 'payload'\\n\\nexport const createPostHandler: TaskHandler<'createPost'> = async ({\\n  input,\\n  job,\\n  req,\\n}) => {\\n  const newPost = await req.payload.create({\\n    collection: 'post',\\n    req,\\n    data: {\\n      title: input.title,\\n    },\\n  })\\n  return {\\n    output: {\\n      postID: newPost.id,\\n    },\\n  }\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Configuring task restoration\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"By default, if a task has passed previously and a workflow is re-run, the task will not be re-run. Instead, the output from the previous task run will be returned. This is to prevent unnecessary re-runs of tasks that have already passed.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can configure this behavior through the \", _jsx(_components.code, {\n        children: \"retries.shouldRestore\"\n      }), \" property. This property accepts a boolean or a function.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If \", _jsx(_components.code, {\n        children: \"shouldRestore\"\n      }), \" is set to true, the task will only be re-run if it previously failed. This is the default behavior.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If \", _jsx(_components.code, {\n        children: \"shouldRestore\"\n      }), \" this is set to false, the task will be re-run even if it previously succeeded, ignoring the maximum number of retries.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If \", _jsx(_components.code, {\n        children: \"shouldRestore\"\n      }), \" is a function, the return value of the function will determine whether the task should be re-run. This can be used for more complex restore logic, e.g you may want to re-run a task up to X amount of times and then restore it for consecutive runs, or only re-run a task if the input has changed.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Example:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"export default buildConfig({\\n  // ...\\n  jobs: {\\n    tasks: [\\n      {\\n        slug: 'myTask',\\n        retries: {\\n          shouldRestore: false,\\n        },\\n        // ...\\n      } as TaskConfig<'myTask'>,\\n    ],\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Example - determine whether a task should be restored based on the input data:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"export default buildConfig({\\n  // ...\\n  jobs: {\\n    tasks: [\\n      {\\n        slug: 'myTask',\\n        inputSchema: [\\n          {\\n            name: 'someDate',\\n            type: 'date',\\n            required: true,\\n          },\\n        ],\\n        retries: {\\n          shouldRestore: ({ input }) => {\\n            if (new Date(input.someDate) > new Date()) {\\n              return false\\n            }\\n            return true\\n          },\\n        },\\n        // ...\\n      } as TaskConfig<'myTask'>,\\n    ],\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Nested tasks\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can run sub-tasks within an existing task, by using the \", _jsx(_components.code, {\n        children: \"tasks\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"ìnlineTask\"\n      }), \" arguments passed to the task \", _jsx(_components.code, {\n        children: \"handler\"\n      }), \" function:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"export default buildConfig({\\n  // ...\\n  jobs: {\\n    // It is recommended to set `addParentToTaskLog` to `true` when using nested tasks, so that the parent task is included in the task log\\n    // This allows for better observability and debugging of the task execution\\n    addParentToTaskLog: true,\\n    tasks: [\\n      {\\n        slug: 'parentTask',\\n        inputSchema: [\\n          {\\n            name: 'text',\\n            type: 'text',\\n          },\\n        ],\\n        handler: async ({ input, req, tasks, inlineTask }) => {\\n          await inlineTask('Sub Task 1', {\\n            task: () => {\\n              // Do something\\n              return {\\n                output: {},\\n              }\\n            },\\n          })\\n\\n          await tasks.CreateSimple('Sub Task 2', {\\n            input: { message: 'hello' },\\n          })\\n\\n          return {\\n            output: {},\\n          }\\n        },\\n      } as TaskConfig<'parentTask'>,\\n    ],\\n  },\\n})\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}},"__N_SSG":true}