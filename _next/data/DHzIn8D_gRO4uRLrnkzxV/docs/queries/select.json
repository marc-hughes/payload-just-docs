{"pageProps":{"frontMatter":{"title":"Select","label":"Select","order":30,"desc":"Payload select determines which fields are selected to the result.","keywords":"query, documents, pagination, documentation, Content Management System, cms, headless, javascript, node, react, nextjs"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    em: \"em\",\n    code: \"code\",\n    h2: \"h2\",\n    a: \"a\",\n    pre: \"pre\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"By default, Payload's APIs will return \", _jsx(_components.em, {\n        children: \"all fields\"\n      }), \" for a given collection or global. But, you may not need all of that data for all of your queries. Sometimes, you might want just a few fields from the response, which can speed up the Payload API and reduce the amount of JSON that is sent to you from the API.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This is where Payload's \", _jsx(_components.code, {\n        children: \"select\"\n      }), \" feature comes in. Here, you can define exactly which fields you'd like to retrieve from the API.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Local API\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To specify \", _jsx(_components.code, {\n        children: \"select\"\n      }), \" in the \", _jsx(_components.a, {\n        href: \"../local-api/overview\",\n        children: \"Local API\"\n      }), \", you can use the \", _jsx(_components.code, {\n        children: \"select\"\n      }), \" option in your query:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { Payload } from 'payload'\\n\\n// Include mode\\nconst getPosts = async (payload: Payload) => {\\n  const posts = await payload.find({\\n    collection: 'posts',\\n    select: {\\n      text: true,\\n      // select a specific field from group\\n      group: {\\n        number: true,\\n      },\\n      // select all fields from array\\n      array: true,\\n    }, // highlight-line\\n  })\\n\\n  return posts\\n}\\n\\n// Exclude mode\\nconst getPosts = async (payload: Payload) => {\\n  const posts = await payload.find({\\n    collection: 'posts',\\n    // Select everything except for array and group.number\\n    select: {\\n      array: false,\\n      group: {\\n        number: false,\\n      },\\n    }, // highlight-line\\n  })\\n\\n  return posts\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Important:\"\n        }), \" To perform querying with \", _jsx(_components.code, {\n          children: \"select\"\n        }), \" efficiently, Payload\\nimplements your \", _jsx(_components.code, {\n          children: \"select\"\n        }), \" query on the database level. Because of that, your\\n\", _jsx(_components.code, {\n          children: \"beforeRead\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"afterRead\"\n        }), \" hooks may not receive the full \", _jsx(_components.code, {\n          children: \"doc\"\n        }), \". To ensure\\nthat some fields are always selected for your hooks / access control,\\nregardless of the \", _jsx(_components.code, {\n          children: \"select\"\n        }), \" query you can use \", _jsx(_components.code, {\n          children: \"forceSelect\"\n        }), \" collection config\\nproperty.\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"REST API\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To specify select in the \", _jsx(_components.a, {\n        href: \"../rest-api/overview\",\n        children: \"REST API\"\n      }), \", you can use the \", _jsx(_components.code, {\n        children: \"select\"\n      }), \" parameter in your query:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"fetch(\\n  'https://localhost:3000/api/posts?select[color]=true&select[group][number]=true',\\n) // highlight-line\\n  .then((res) => res.json())\\n  .then((data) => console.log(data))\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To understand the syntax, you need to understand that complex URL search strings are parsed into a JSON object. This one isn't too bad, but more complex queries get unavoidably more difficult to write.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For this reason, we recommend to use the extremely helpful and ubiquitous \", _jsx(_components.a, {\n        href: \"https://www.npmjs.com/package/qs-esm\",\n        children: _jsx(_components.code, {\n          children: \"qs-esm\"\n        })\n      }), \" package to parse your JSON / object-formatted queries into query strings:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { stringify } from 'qs-esm'\\nimport type { Where } from 'payload'\\n\\nconst select: Where = {\\n  text: true,\\n  group: {\\n    number: true,\\n  },\\n  // This query could be much more complex\\n  // and QS would handle it beautifully\\n}\\n\\nconst getPosts = async () => {\\n  const stringifiedQuery = stringify(\\n    {\\n      select, // ensure that `qs` adds the `select` property, too!\\n    },\\n    { addQueryPrefix: true },\\n  )\\n\\n  const response = await fetch(\\n    `http://localhost:3000/api/posts${stringifiedQuery}`,\\n  )\\n  // Continue to handle the response below...\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"info\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Reminder:\"\n        }), \" This is the same for \", _jsx(_components.a, {\n          href: \"../configuration/globals\",\n          children: \"Globals\"\n        }), \" using\\nthe \", _jsx(_components.code, {\n          children: \"/api/globals\"\n        }), \" endpoint.\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"defaultPopulate collection config property\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"defaultPopulate\"\n      }), \" property allows you specify which fields to select when populating the collection from another document.\\nThis is especially useful for links where only the \", _jsx(_components.code, {\n        children: \"slug\"\n      }), \" is needed instead of the entire document.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"With this feature, you can dramatically reduce the amount of JSON that is populated from \", _jsx(_components.a, {\n        href: \"/docs/fields/relationship\",\n        children: \"Relationship\"\n      }), \" or \", _jsx(_components.a, {\n        href: \"/docs/fields/upload\",\n        children: \"Upload\"\n      }), \" fields.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For example, in your content model, you might have a \", _jsx(_components.code, {\n        children: \"Link\"\n      }), \" field which links out to a different page. When you go to retrieve these links, you really only need the \", _jsx(_components.code, {\n        children: \"slug\"\n      }), \" of the page.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Loading all of the page content, its related links, and everything else is going to be overkill and will bog down your Payload APIs. Instead, you can define the \", _jsx(_components.code, {\n        children: \"defaultPopulate\"\n      }), \" property on your \", _jsx(_components.code, {\n        children: \"Pages\"\n      }), \" collection, so that when Payload \\\"populates\\\" a related Page, it only selects the \", _jsx(_components.code, {\n        children: \"slug\"\n      }), \" field and therefore returns significantly less JSON:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { CollectionConfig } from 'payload'\\n\\n// The TSlug generic can be passed to have type safety for `defaultPopulate`.\\n// If avoided, the `defaultPopulate` type resolves to `SelectType`.\\nexport const Pages: CollectionConfig<'pages'> = {\\n  slug: 'pages',\\n  // Specify `select`.\\n  defaultPopulate: {\\n    slug: true,\\n  },\\n  fields: [\\n    {\\n      name: 'slug',\\n      type: 'text',\\n      required: true,\\n    },\\n  ],\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Important:\"\n        }), \" When using \", _jsx(_components.code, {\n          children: \"defaultPopulate\"\n        }), \" on a collection with\\n\", _jsx(_components.a, {\n          href: \"/docs/fields/upload\",\n          children: \"Uploads\"\n        }), \" enabled and you want to select the \", _jsx(_components.code, {\n          children: \"url\"\n        }), \" field,\\nit is important to specify \", _jsx(_components.code, {\n          children: \"filename: true\"\n        }), \" as well, otherwise Payload will\\nnot be able to construct the correct file URL, instead returning \", _jsx(_components.code, {\n          children: \"url: null\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"populate\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Setting \", _jsx(_components.code, {\n        children: \"defaultPopulate\"\n      }), \" will enforce that each time Payload performs a \\\"population\\\" of a related document, only the fields specified will be queried and returned. However, you can override \", _jsx(_components.code, {\n        children: \"defaultPopulate\"\n      }), \" with the \", _jsx(_components.code, {\n        children: \"populate\"\n      }), \" property in the Local and REST API:\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Local API:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { Payload } from 'payload'\\n\\nconst getPosts = async (payload: Payload) => {\\n  const posts = await payload.find({\\n    collection: 'posts',\\n    populate: {\\n      // Select only `text` from populated docs in the \\\"pages\\\" collection\\n      // Now, no matter what the `defaultPopulate` is set to on the \\\"pages\\\" collection,\\n      // it will be overridden, and the `text` field will be returned instead.\\n      pages: {\\n        text: true,\\n      }, // highlight-line\\n    },\\n  })\\n\\n  return posts\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"REST API:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"fetch('https://localhost:3000/api/posts?populate[pages][text]=true') // highlight-line\\n  .then((res) => res.json())\\n  .then((data) => console.log(data))\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}},"__N_SSG":true}