{"pageProps":{"frontMatter":{"title":"Custom Features","label":"Custom Features","order":40,"desc":"Building custom features","keywords":"lexical, rich text, editor, headless cms, feature, features"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    code: \"code\",\n    strong: \"strong\",\n    h2: \"h2\",\n    h3: \"h3\",\n    pre: \"pre\",\n    ul: \"ul\",\n    li: \"li\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    ol: \"ol\",\n    em: \"em\",\n    h4: \"h4\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"Before you begin building custom features for Lexical, it is crucial to familiarize yourself with the \", _jsx(_components.a, {\n        href: \"https://lexical.dev/docs/intro\",\n        children: \"Lexical docs\"\n      }), \", particularly the \\\"Concepts\\\" section. This foundation is necessary for understanding Lexical's core principles, such as nodes, editor state, and commands.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Lexical features are designed to be modular, meaning each piece of functionality is encapsulated within just two specific interfaces: one for server-side code and one for client-side code.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By convention, these are named \", _jsx(_components.code, {\n        children: \"feature.server.ts\"\n      }), \" for server-side functionality and \", _jsx(_components.code, {\n        children: \"feature.client.ts\"\n      }), \" for client-side functionality. The primary functionality is housed within \", _jsx(_components.code, {\n        children: \"feature.server.ts\"\n      }), \", which users will import into their projects. The client-side feature, although defined separately, is integrated and rendered server-side through the server feature.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"That way, we still maintain a clear boundary between server and client code, while also centralizing the code needed for a feature in basically one place. This approach is beneficial for managing all the bits and pieces which make up your feature as a whole, such as toolbar entries, buttons, or new nodes, allowing each feature to be neatly contained and managed independently.\"\n    }), \"\\n\", _jsxs(Banner, {\n      type: \"warning\",\n      children: [_jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Important:\"\n        }), \"\\nDo not import directly from core lexical packages - this may break in minor Payload version bumps.\"]\n      }), _jsxs(_components.p, {\n        children: [\"Instead, import the re-exported versions from \", _jsx(_components.code, {\n          children: \"@payloadcms/richtext-lexical\"\n        }), \". For example, change \", _jsx(_components.code, {\n          children: \"import { $insertNodeToNearestRoot } from '@lexical/utils'\"\n        }), \" to \", _jsx(_components.code, {\n          children: \"import { $insertNodeToNearestRoot } from '@payloadcms/richtext-lexical/lexical/utils'\"\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Do I need a custom feature?\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Before you start building a custom feature, consider whether you can achieve your desired functionality using the existing \", _jsx(_components.code, {\n        children: \"BlocksFeature\"\n      }), \". The \", _jsx(_components.code, {\n        children: \"BlocksFeature\"\n      }), \" is a powerful feature that allows you to create custom blocks with a variety of options, including custom React components, markdown converters, and more. If you can achieve your desired functionality using the \", _jsx(_components.code, {\n        children: \"BlocksFeature\"\n      }), \", it is recommended to use it instead of building a custom feature.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Using the BlocksFeature, you can add both inline blocks (= can be inserted into a paragraph, in between text) and block blocks (= take up the whole line) to the editor. If you simply want to bring custom react components into the editor, this is the way to go.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Example: Code Field Block with language picker\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This example demonstrates how to create a custom code field block with a language picker using the \", _jsx(_components.code, {\n        children: \"BlocksFeature\"\n      }), \". First, make sure to explicitly install \", _jsx(_components.code, {\n        children: \"@payloadcms/ui\"\n      }), \" in your project.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Field Config:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import {\\n  BlocksFeature,\\n  lexicalEditor,\\n} from '@payloadcms/richtext-lexical'\\n\\nexport const languages = {\\n  ts: 'TypeScript',\\n  plaintext: 'Plain Text',\\n  tsx: 'TSX',\\n  js: 'JavaScript',\\n  jsx: 'JSX',\\n}\\n\\n// ...\\n{\\n  name: 'richText',\\n  type: 'richText',\\n  editor: lexicalEditor({\\n    features: ({ defaultFeatures }) => [\\n      ...defaultFeatures,\\n      BlocksFeature({\\n        blocks: [\\n          {\\n            slug: 'Code',\\n            fields: [\\n              {\\n                type: 'select',\\n                name: 'language',\\n                options: Object.entries(languages).map(([key, value]) => ({\\n                  label: value,\\n                  value: key,\\n                })),\\n                defaultValue: 'ts',\\n              },\\n              {\\n                admin: {\\n                  components: {\\n                    Field: './path/to/CodeComponent#Code',\\n                  },\\n                },\\n                name: 'code',\\n                type: 'code',\\n              },\\n            ],\\n          }\\n        ],\\n        inlineBlocks: [],\\n      }),\\n    ],\\n  }),\\n},\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"CodeComponent.tsx:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"'use client'\\nimport type { CodeFieldClient, CodeFieldClientProps } from 'payload'\\n\\nimport { CodeField, useFormFields } from '@payloadcms/ui'\\nimport React, { useMemo } from 'react'\\n\\nimport { languages } from './yourFieldConfig'\\n\\nconst languageKeyToMonacoLanguageMap = {\\n  plaintext: 'plaintext',\\n  ts: 'typescript',\\n  tsx: 'typescript',\\n}\\n\\ntype Language = keyof typeof languageKeyToMonacoLanguageMap\\n\\nexport const Code: React.FC<CodeFieldClientProps> = ({\\n  autoComplete,\\n  field,\\n  forceRender,\\n  path,\\n  permissions,\\n  readOnly,\\n  renderedBlocks,\\n  schemaPath,\\n  validate,\\n}) => {\\n  const languageField = useFormFields(([fields]) => fields['language'])\\n\\n  const language: Language =\\n    (languageField?.value as Language) ||\\n    (languageField?.initialValue as Language) ||\\n    'ts'\\n\\n  const label = languages[language]\\n\\n  const props: CodeFieldClient = useMemo<CodeFieldClient>(\\n    () => ({\\n      ...field,\\n      type: 'code',\\n      admin: {\\n        ...field.admin,\\n        editorOptions: undefined,\\n        language: languageKeyToMonacoLanguageMap[language] || language,\\n      },\\n      label,\\n    }),\\n    [field, language, label],\\n  )\\n\\n  const key = `${field.name}-${language}-${label}`\\n\\n  return (\\n    <CodeField\\n      autoComplete={autoComplete}\\n      field={props}\\n      forceRender={forceRender}\\n      key={key}\\n      path={path}\\n      permissions={permissions}\\n      readOnly={readOnly}\\n      renderedBlocks={renderedBlocks}\\n      schemaPath={schemaPath}\\n      validate={validate}\\n    />\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Server Feature\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Custom Blocks are not enough? To start building a custom feature, you should start with the server feature, which is the entry-point.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example myFeature/feature.server.ts:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { createServerFeature } from '@payloadcms/richtext-lexical'\\n\\nexport const MyFeature = createServerFeature({\\n  feature: {},\\n  key: 'myFeature',\\n})\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"createServerFeature\"\n      }), \" is a helper function which lets you create new features without boilerplate code.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now, the feature is ready to be used in the editor:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { MyFeature } from './myFeature/feature.server';\\nimport { lexicalEditor } from '@payloadcms/richtext-lexical';\\n\\n//...\\n {\\n    name: 'richText',\\n    type: 'richText',\\n    editor: lexicalEditor({\\n      features: [\\n        MyFeature(),\\n      ],\\n    }),\\n },\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"By default, this server feature does nothing - you haven't added any functionality yet. Depending on what you want your feature to do, the ServerFeature type exposes various properties you can set to inject custom functionality into the lexical editor.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"i18n\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Each feature can register their own translations, which are automatically scoped to the feature key:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { createServerFeature } from '@payloadcms/richtext-lexical'\\n\\nexport const MyFeature = createServerFeature({\\n  feature: {\\n    i18n: {\\n      en: {\\n        label: 'My Feature',\\n      },\\n      de: {\\n        label: 'Mein Feature',\\n      },\\n    },\\n  },\\n  key: 'myFeature',\\n})\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This allows you to add i18n translations scoped to your feature. This specific example translation will be available under \", _jsx(_components.code, {\n        children: \"lexical:myFeature:label\"\n      }), \" - \", _jsx(_components.code, {\n        children: \"myFeature\"\n      }), \" being your feature key.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Markdown Transformers#server-feature-markdown-transformers\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The Server Feature, just like the Client Feature, allows you to add markdown transformers. Markdown transformers on the server are used when \", _jsx(_components.a, {\n        href: \"/docs/rich-text/converting-markdown\",\n        children: \"converting the editor from or to markdown\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { createServerFeature } from '@payloadcms/richtext-lexical'\\nimport type { ElementTransformer } from '@payloadcms/richtext-lexical/lexical/markdown'\\nimport { $createMyNode, $isMyNode, MyNode } from './nodes/MyNode'\\n\\nconst MyMarkdownTransformer: ElementTransformer = {\\n  type: 'element',\\n  dependencies: [MyNode],\\n  export: (node, exportChildren) => {\\n    if (!$isMyNode(node)) {\\n      return null\\n    }\\n    return '+++'\\n  },\\n  // match ---\\n  regExp: /^+++\\\\s*$/,\\n  replace: (parentNode) => {\\n    const node = $createMyNode()\\n    if (node) {\\n      parentNode.replace(node)\\n    }\\n  },\\n}\\n\\nexport const MyFeature = createServerFeature({\\n  feature: {\\n    markdownTransformers: [MyMarkdownTransformer],\\n  },\\n  key: 'myFeature',\\n})\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In this example, the node will be outputted as \", _jsx(_components.code, {\n        children: \"+++\"\n      }), \" in Markdown, and the markdown \", _jsx(_components.code, {\n        children: \"+++\"\n      }), \" will be converted to a \", _jsx(_components.code, {\n        children: \"MyNode\"\n      }), \" node in the editor.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Nodes#server-feature-nodes\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"While nodes added to the server feature do not control how the node is rendered in the editor, they control other aspects of the node:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"HTML conversion\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Node Hooks\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Sub fields\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Behavior in a headless editor\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"createNode\"\n      }), \" helper function is used to create nodes with proper typing. It is recommended to use this function to create nodes.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { createServerFeature, createNode } from '@payloadcms/richtext-lexical'\\nimport { MyNode } from './nodes/MyNode'\\n\\nexport const MyFeature = createServerFeature({\\n  feature: {\\n    nodes: [\\n      // Use the createNode helper function to more easily create nodes with proper typing\\n      createNode({\\n        converters: {\\n          html: {\\n            converter: () => {\\n              return `<hr/>`\\n            },\\n            nodeTypes: [MyNode.getType()],\\n          },\\n        },\\n        // Here you can add your actual node. On the server, they will be\\n        // used to initialize a headless editor which can be used to perform\\n        // operations on the editor, like markdown / html conversion.\\n        node: MyNode,\\n      }),\\n    ],\\n  },\\n  key: 'myFeature',\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"While nodes in the client feature are added by themselves to the nodes array, nodes in the server feature can be added together with the following sibling options:\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"getSubFields\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"If a node includes sub-fields (e.g. block and link nodes), passing the subFields schema here will make Payload automatically populate & run hooks for them.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"getSubFieldsData\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"If a node includes sub-fields, the sub-fields data needs to be returned here, alongside \", _jsx(_components.code, {\n              children: \"getSubFields\"\n            }), \" which returns their schema.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"graphQLPopulationPromises\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Allows you to run population logic when a node's data was requested from GraphQL. While \", _jsx(_components.code, {\n              children: \"getSubFields\"\n            }), \" and \", _jsx(_components.code, {\n              children: \"getSubFieldsData\"\n            }), \" automatically handle populating sub-fields (since they run hooks on them), those are only populated in the Rest API. This is because the Rest API hooks do not have access to the 'depth' property provided by GraphQL. In order for them to be populated correctly in GraphQL, the population logic needs to be provided here.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"node\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The actual lexical node needs to be provided here. This also supports \", _jsx(_components.a, {\n              href: \"https://lexical.dev/docs/concepts/node-replacement\",\n              children: \"lexical node replacements\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"validations\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"This allows you to provide node validations, which are run when your document is being validated, alongside other Payload fields. You can use it to throw a validation error for a specific node in case its data is incorrect.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"converters\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Allows you to define how a node can be serialized into different formats. Currently, only supports HTML. Markdown converters are defined in \", _jsx(_components.code, {\n              children: \"markdownTransformers\"\n            }), \" and not here.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hooks\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Just like Payload fields, you can provide hooks which are run for this specific node. These are called Node Hooks.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Feature load order\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Server features can also accept a function as the \", _jsx(_components.code, {\n        children: \"feature\"\n      }), \" property (useful for sanitizing props, as mentioned below). This function will be called when the feature is loaded during the Payload sanitization process:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { createServerFeature } from '@payloadcms/richtext-lexical'\\n\\ncreateServerFeature({\\n  //...\\n  feature: async ({\\n    config,\\n    isRoot,\\n    props,\\n    resolvedFeatures,\\n    unSanitizedEditorConfig,\\n    featureProviderMap,\\n  }) => {\\n    return {\\n      //Actual server feature here...\\n    }\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"\\\"Loading\\\" here means the process of calling this \", _jsx(_components.code, {\n        children: \"feature\"\n      }), \" function. By default, features are called in the order in which they are added to the editor.\\nHowever, sometimes you might want to load a feature after another feature has been loaded, or require a different feature to be loaded, throwing an error if this is not the case.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Within lexical, one example where this is done are our list features. Both \", _jsx(_components.code, {\n        children: \"UnorderedListFeature\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"OrderedListFeature\"\n      }), \" register the same \", _jsx(_components.code, {\n        children: \"ListItem\"\n      }), \" node. Within \", _jsx(_components.code, {\n        children: \"UnorderedListFeature\"\n      }), \" we register it normally, but within \", _jsx(_components.code, {\n        children: \"OrderedListFeature\"\n      }), \" we want to only register the \", _jsx(_components.code, {\n        children: \"ListItem\"\n      }), \" node if the \", _jsx(_components.code, {\n        children: \"UnorderedListFeature\"\n      }), \" is not present - otherwise, we would have two features registering the same node.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here is how we do it:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { createServerFeature, createNode } from '@payloadcms/richtext-lexical'\\n\\nexport const OrderedListFeature = createServerFeature({\\n  feature: ({ featureProviderMap }) => {\\n    return {\\n      // ...\\n      nodes: featureProviderMap.has('unorderedList')\\n        ? []\\n        : [\\n            createNode({\\n              // ...\\n            }),\\n          ],\\n    }\\n  },\\n  key: 'orderedList',\\n})\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"featureProviderMap\"\n      }), \" will always be available and contain all the features, even yet-to-be-loaded ones, so we can check if a feature is loaded by checking if its \", _jsx(_components.code, {\n        children: \"key\"\n      }), \" present in the map.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you wanted to make sure a feature is loaded before another feature, you can use the \", _jsx(_components.code, {\n        children: \"dependenciesPriority\"\n      }), \" property:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { createServerFeature } from '@payloadcms/richtext-lexical'\\n\\nexport const MyFeature = createServerFeature({\\n  feature: ({ featureProviderMap }) => {\\n    return {\\n      // ...\\n    }\\n  },\\n  key: 'myFeature',\\n  dependenciesPriority: ['otherFeature'],\\n})\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"dependenciesSoft\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Keys of soft-dependencies needed for this feature. These are optional. Payload will attempt to load them before this feature, but doesn't throw an error if that's not possible.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"dependencies\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Keys of dependencies needed for this feature. These dependencies do not have to be loaded first, but they have to exist, otherwise an error will be thrown.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"dependenciesPriority\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Keys of priority dependencies needed for this feature. These dependencies have to be loaded first AND have to exist, otherwise an error will be thrown. They will be available in the \", _jsx(_components.code, {\n              children: \"feature\"\n            }), \" property.\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Client Feature\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Most of the functionality which the user actually sees and interacts with, like toolbar items and React components for nodes, resides on the client-side.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To set up your client-side feature, follow these three steps:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Create a Separate File\"\n        }), \": Start by creating a new file specifically for your client feature, such as \", _jsx(_components.code, {\n          children: \"myFeature/feature.client.ts\"\n        }), \". It's important to keep client and server features in separate files to maintain a clean boundary between server and client code.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"'use client'\"\n        }), \": Mark that file with a 'use client' directive at the top of the file\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Register the Client Feature\"\n        }), \": Register the client feature within your server feature, by passing it to the \", _jsx(_components.code, {\n          children: \"ClientFeature\"\n        }), \" prop. This is needed because the server feature is the sole entry-point of your feature. This also means you are not able to create a client feature without a server feature, as you will not be able to register it otherwise.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example myFeature/feature.client.ts:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"'use client'\\n\\nimport { createClientFeature } from '@payloadcms/richtext-lexical/client'\\n\\nexport const MyClientFeature = createClientFeature({})\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Explore the APIs available through ClientFeature to add the specific functionality you need. Remember, do not import directly from \", _jsx(_components.code, {\n        children: \"'@payloadcms/richtext-lexical'\"\n      }), \" when working on the client-side, as it will cause errors with webpack or turbopack. Instead, use \", _jsx(_components.code, {\n        children: \"'@payloadcms/richtext-lexical/client'\"\n      }), \" for all client-side imports. Type-imports are excluded from this rule and can always be imported.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Adding a client feature to the server feature\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Inside of your server feature, you can provide an \", _jsx(_components.a, {\n        href: \"/docs/custom-components/overview#component-paths\",\n        children: \"import path\"\n      }), \" to the client feature like this:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { createServerFeature } from '@payloadcms/richtext-lexical'\\n\\nexport const MyFeature = createServerFeature({\\n  feature: {\\n    ClientFeature: './path/to/feature.client#MyClientFeature',\\n  },\\n  key: 'myFeature',\\n  dependenciesPriority: ['otherFeature'],\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Nodes#client-feature-nodes\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Add nodes to the \", _jsx(_components.code, {\n        children: \"nodes\"\n      }), \" array in \", _jsx(_components.strong, {\n        children: \"both\"\n      }), \" your client & server feature. On the server side, nodes are utilized for backend operations like HTML conversion in a headless editor. On the client side, these nodes are integral to how content is displayed and managed in the editor, influencing how they are rendered, behave, and saved in the database.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Example:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"myFeature/feature.client.ts:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"'use client'\\n\\nimport { createClientFeature } from '@payloadcms/richtext-lexical/client'\\nimport { MyNode } from './nodes/MyNode'\\n\\nexport const MyClientFeature = createClientFeature({\\n  nodes: [MyNode],\\n})\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This also supports \", _jsx(_components.a, {\n        href: \"https://lexical.dev/docs/concepts/node-replacement\",\n        children: \"lexical node replacements\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"myFeature/nodes/MyNode.tsx:\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here is a basic DecoratorNode example:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type {\\n  DOMConversionMap,\\n  DOMConversionOutput,\\n  DOMExportOutput,\\n  EditorConfig,\\n  LexicalNode,\\n  SerializedLexicalNode,\\n} from '@payloadcms/richtext-lexical/lexical'\\n\\nimport { $applyNodeReplacement, DecoratorNode } from '@payloadcms/richtext-lexical/lexical'\\n\\n// SerializedLexicalNode is the default lexical node.\\n// By setting your SerializedMyNode type to SerializedLexicalNode,\\n// you are basically saying that this node does not save any additional data.\\n// If you want your node to save data, feel free to extend it\\nexport type SerializedMyNode = SerializedLexicalNode\\n\\n// Lazy-import the React component to your node here\\nconst MyNodeComponent = React.lazy(() =>\\n  import('../component/index.js').then((module) => ({\\n    default: module.MyNodeComponent,\\n  })),\\n)\\n\\n/**\\n * This node is a DecoratorNode. DecoratorNodes allow you to render React components in the editor.\\n *\\n * They need both createDom and decorate functions. createDom => outside of the html. decorate => React Component inside of the html.\\n *\\n * If we used DecoratorBlockNode instead, we would only need a decorate method\\n */\\nexport class MyNode extends DecoratorNode<React.ReactElement> {\\n  static clone(node: MyNode): MyNode {\\n    return new MyNode(node.__key)\\n  }\\n\\n  static getType(): string {\\n    return 'myNode'\\n  }\\n\\n  /**\\n   * Defines what happens if you copy a div element from another page and paste it into the lexical editor\\n   *\\n   * This also determines the behavior of lexical's internal HTML -> Lexical converter\\n   */\\n  static importDOM(): DOMConversionMap | null {\\n    return {\\n      div: () => ({\\n        conversion: $yourConversionMethod,\\n        priority: 0,\\n      }),\\n    }\\n  }\\n\\n  /**\\n   * The data for this node is stored serialized as JSON. This is the \\\"load function\\\" of that node: it takes the saved data and converts it into a node.\\n   */\\n  static importJSON(serializedNode: SerializedMyNode): MyNode {\\n    return $createMyNode()\\n  }\\n\\n  /**\\n   * Determines how the hr element is rendered in the lexical editor. This is only the \\\"initial\\\" / \\\"outer\\\" HTML element.\\n   */\\n  createDOM(config: EditorConfig): HTMLElement {\\n    const element = document.createElement('div')\\n    return element\\n  }\\n\\n  /**\\n   * Allows you to render a React component within whatever createDOM returns.\\n   */\\n  decorate(): React.ReactElement {\\n    return <MyNodeComponent nodeKey={this.__key} />\\n  }\\n\\n  /**\\n   * Opposite of importDOM, this function defines what happens when you copy a div element from the lexical editor and paste it into another page.\\n   *\\n   * This also determines the behavior of lexical's internal Lexical -> HTML converter\\n   */\\n  exportDOM(): DOMExportOutput {\\n    return { element: document.createElement('div') }\\n  }\\n  /**\\n   * Opposite of importJSON. This determines what data is saved in the database / in the lexical editor state.\\n   */\\n  exportJSON(): SerializedLexicalNode {\\n    return {\\n      type: 'myNode',\\n      version: 1,\\n    }\\n  }\\n\\n  getTextContent(): string {\\n    return '\\\\n'\\n  }\\n\\n  isInline(): false {\\n    return false\\n  }\\n\\n  updateDOM(): boolean {\\n    return false\\n  }\\n}\\n\\n// This is used in the importDOM method. Totally optional if you do not want your node to be created automatically when copy & pasting certain dom elements\\n// into your editor.\\nfunction $yourConversionMethod(): DOMConversionOutput {\\n  return { node: $createMyNode() }\\n}\\n\\n// This is a utility method to create a new MyNode. Utility methods prefixed with $ make it explicit that this should only be used within lexical\\nexport function $createMyNode(): MyNode {\\n  return $applyNodeReplacement(new MyNode())\\n}\\n\\n// This is just a utility method you can use to check if a node is a MyNode. This also ensures correct typing.\\nexport function $isMyNode(\\n  node: LexicalNode | null | undefined,\\n): node is MyNode {\\n  return node instanceof MyNode\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Please do not add any 'use client' directives to your nodes, as the node class can be used on the server.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Plugins\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"One small part of a feature are plugins. The name stems from the lexical playground plugins and is just a small part of a lexical feature.\\nPlugins are simply React components which are added to the editor, within all the lexical context providers. They can be used to add any functionality\\nto the editor, by utilizing the lexical API.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Most commonly, they are used to register \", _jsx(_components.a, {\n        href: \"https://lexical.dev/docs/concepts/listeners\",\n        children: \"lexical listeners\"\n      }), \", \", _jsx(_components.a, {\n        href: \"https://lexical.dev/docs/concepts/transforms\",\n        children: \"node transforms\"\n      }), \" or \", _jsx(_components.a, {\n        href: \"https://lexical.dev/docs/concepts/commands\",\n        children: \"commands\"\n      }), \".\\nFor example, you could add a drawer to your plugin and register a command which opens it. That command can then be called from anywhere within lexical, e.g. from within your custom lexical node.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To add a plugin, simply add it to the \", _jsx(_components.code, {\n        children: \"plugins\"\n      }), \" array in your client feature:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"'use client'\\n\\nimport { createClientFeature } from '@payloadcms/richtext-lexical/client'\\nimport { MyPlugin } from './plugin'\\n\\nexport const MyClientFeature = createClientFeature({\\n  plugins: [MyPlugin],\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Example plugin.tsx:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"'use client'\\nimport type { LexicalCommand } from '@payloadcms/richtext-lexical/lexical'\\n\\nimport {\\n  createCommand,\\n  $getSelection,\\n  $isRangeSelection,\\n  COMMAND_PRIORITY_EDITOR,\\n} from '@payloadcms/richtext-lexical/lexical'\\n\\nimport { useLexicalComposerContext } from '@payloadcms/richtext-lexical/lexical/react/LexicalComposerContext'\\nimport { $insertNodeToNearestRoot } from '@payloadcms/richtext-lexical/lexical/utils'\\nimport { useEffect } from 'react'\\n\\nimport type { PluginComponent } from '@payloadcms/richtext-lexical' // type imports can be imported from @payloadcms/richtext-lexical - even on the client\\n\\nimport { $createMyNode } from '../nodes/MyNode'\\nimport './index.scss'\\n\\nexport const INSERT_MYNODE_COMMAND: LexicalCommand<void> = createCommand(\\n  'INSERT_MYNODE_COMMAND',\\n)\\n\\n/**\\n * Plugin which registers a lexical command to insert a new MyNode into the editor\\n */\\nexport const MyNodePlugin: PluginComponent = () => {\\n  // The useLexicalComposerContext hook can be used to access the lexical editor instance\\n  const [editor] = useLexicalComposerContext()\\n\\n  useEffect(() => {\\n    return editor.registerCommand(\\n      INSERT_MYNODE_COMMAND,\\n      (type) => {\\n        const selection = $getSelection()\\n\\n        if (!$isRangeSelection(selection)) {\\n          return false\\n        }\\n\\n        const focusNode = selection.focus.getNode()\\n\\n        if (focusNode !== null) {\\n          const newMyNode = $createMyNode()\\n          $insertNodeToNearestRoot(newMyNode)\\n        }\\n\\n        return true\\n      },\\n      COMMAND_PRIORITY_EDITOR,\\n    )\\n  }, [editor])\\n\\n  return null\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this example, we register a lexical command, which simply inserts a new MyNode into the editor. This command can be called from anywhere within lexical, e.g. from within a custom node.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Toolbar groups\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Toolbar groups are visual containers which hold toolbar items. There are different toolbar group types which determine \", _jsx(_components.em, {\n        children: \"how\"\n      }), \" a toolbar item is displayed: \", _jsx(_components.code, {\n        children: \"dropdown\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"buttons\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"All the default toolbar groups are exported from \", _jsx(_components.code, {\n        children: \"@payloadcms/richtext-lexical/client\"\n      }), \". You can use them to add your own toolbar items to the editor:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Dropdown: \", _jsx(_components.code, {\n          children: \"toolbarAddDropdownGroupWithItems\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Dropdown: \", _jsx(_components.code, {\n          children: \"toolbarTextDropdownGroupWithItems\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Buttons: \", _jsx(_components.code, {\n          children: \"toolbarFormatGroupWithItems\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Buttons: \", _jsx(_components.code, {\n          children: \"toolbarFeatureButtonsGroupWithItems\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Within dropdown groups, items are positioned vertically when the dropdown is opened and include the icon & label. Within button groups, items are positioned horizontally and only include the icon. If a toolbar group with the same key is declared twice, all its items will be merged into one group.\"\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Custom buttons toolbar group\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"items\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"All toolbar items part of this toolbar group need to be added here.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"key\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Each toolbar group needs to have a unique key. Groups with the same keys will have their items merged together.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"order\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Determines where the toolbar group will be.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"type\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Controls the toolbar group type. Set to \", _jsx(_components.code, {\n              children: \"buttons\"\n            }), \" to create a buttons toolbar group, which displays toolbar items horizontally using only their icons.\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Example:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type {\\n  ToolbarGroup,\\n  ToolbarGroupItem,\\n} from '@payloadcms/richtext-lexical'\\n\\nexport const toolbarFormatGroupWithItems = (\\n  items: ToolbarGroupItem[],\\n): ToolbarGroup => {\\n  return {\\n    type: 'buttons',\\n    items,\\n    key: 'myButtonsToolbar',\\n    order: 10,\\n  }\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Custom dropdown toolbar group\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"items\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"All toolbar items part of this toolbar group need to be added here.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"key\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Each toolbar group needs to have a unique key. Groups with the same keys will have their items merged together.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"order\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Determines where the toolbar group will be.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"type\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Controls the toolbar group type. Set to \", _jsx(_components.code, {\n              children: \"dropdown\"\n            }), \" to create a buttons toolbar group, which displays toolbar items vertically using their icons and labels, if the dropdown is open.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"ChildComponent\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The dropdown toolbar ChildComponent allows you to pass in a React Component which will be displayed within the dropdown button.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Example:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type {\\n  ToolbarGroup,\\n  ToolbarGroupItem,\\n} from '@payloadcms/richtext-lexical'\\n\\nimport { MyIcon } from './icons/MyIcon'\\n\\nexport const toolbarAddDropdownGroupWithItems = (\\n  items: ToolbarGroupItem[],\\n): ToolbarGroup => {\\n  return {\\n    type: 'dropdown',\\n    ChildComponent: MyIcon,\\n    items,\\n    key: 'myDropdownToolbar',\\n    order: 10,\\n  }\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Toolbar items\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Custom nodes and features on its own are pointless, if they can't be added to the editor. You will need to hook in one of our interfaces which allow the user to interact with the editor:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Fixed toolbar which stays fixed at the top of the editor\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Inline, floating toolbar which appears when selecting text\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Slash menu which appears when typing \", _jsx(_components.code, {\n          children: \"/\"\n        }), \" in the editor\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Markdown transformers, which are triggered when a certain text pattern is typed in the editor\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Or any other interfaces which can be added via your own plugins. Our toolbars are a prime example of this - they are just plugins.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To add a toolbar item to either the floating or the inline toolbar, you can add a ToolbarGroup with a ToolbarItem to the \", _jsx(_components.code, {\n        children: \"toolbarFixed\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"toolbarInline\"\n      }), \" props of your client feature:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"'use client'\\n\\nimport {\\n  createClientFeature,\\n  toolbarAddDropdownGroupWithItems,\\n} from '@payloadcms/richtext-lexical/client'\\nimport { IconComponent } from './icon'\\nimport { $isHorizontalRuleNode } from './nodes/MyNode'\\nimport { INSERT_MYNODE_COMMAND } from './plugin'\\nimport { $isNodeSelection } from '@payloadcms/richtext-lexical/lexical'\\n\\nexport const MyClientFeature = createClientFeature({\\n  toolbarFixed: {\\n    groups: [\\n      toolbarAddDropdownGroupWithItems([\\n        {\\n          ChildComponent: IconComponent,\\n          isActive: ({ selection }) => {\\n            if (!$isNodeSelection(selection) || !selection.getNodes().length) {\\n              return false\\n            }\\n\\n            const firstNode = selection.getNodes()[0]\\n            return $isHorizontalRuleNode(firstNode)\\n          },\\n          key: 'myNode',\\n          label: ({ i18n }) => {\\n            return i18n.t('lexical:myFeature:label')\\n          },\\n          onSelect: ({ editor }) => {\\n            editor.dispatchCommand(INSERT_MYNODE_COMMAND, undefined)\\n          },\\n        },\\n      ]),\\n    ],\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You will have to provide a toolbar group first, and then the items for that toolbar group (more on that above).\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"A \", _jsx(_components.code, {\n        children: \"ToolbarItem\"\n      }), \" various props you can use to customize its behavior:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"ChildComponent\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"A React component which is rendered within your toolbar item's default button component. Usually, you want this to be an icon.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"Component\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"A React component which is rendered in place of the toolbar item's default button component, thus completely replacing it. The \", _jsx(_components.code, {\n              children: \"ChildComponent\"\n            }), \" and \", _jsx(_components.code, {\n              children: \"onSelect\"\n            }), \" properties will be ignored.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"label\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The label will be displayed in your toolbar item, if it's within a dropdown group. To make use of i18n, this can be a function.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"key\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Each toolbar item needs to have a unique key.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"onSelect\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"A function which is called when the toolbar item is clicked.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"isEnabled\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"This is optional and controls if the toolbar item is clickable or not. If \", _jsx(_components.code, {\n              children: \"false\"\n            }), \" is returned here, it will be grayed out and unclickable.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"isActive\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"This is optional and controls if the toolbar item is highlighted or not\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The API for adding an item to the floating inline toolbar (\", _jsx(_components.code, {\n        children: \"toolbarInline\"\n      }), \") is identical. If you wanted to add an item to both the fixed and inline toolbar, you can extract it into its own variable\\n(typed as \", _jsx(_components.code, {\n        children: \"ToolbarGroup[]\"\n      }), \") and add it to both the \", _jsx(_components.code, {\n        children: \"toolbarFixed\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"toolbarInline\"\n      }), \" props.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Slash Menu groups\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We're exporting \", _jsx(_components.code, {\n        children: \"slashMenuBasicGroupWithItems\"\n      }), \" from \", _jsx(_components.code, {\n        children: \"@payloadcms/richtext-lexical/client\"\n      }), \" which you can use to add items to the slash menu labelled \\\"Basic\\\". If you want to create your own slash menu group, here is an example:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type {\\n  SlashMenuGroup,\\n  SlashMenuItem,\\n} from '@payloadcms/richtext-lexical'\\n\\nexport function mwnSlashMenuGroupWithItems(\\n  items: SlashMenuItem[],\\n): SlashMenuGroup {\\n  return {\\n    items,\\n    key: 'myGroup',\\n    label: 'My Group', // <= This can be a function to make use of i18n\\n  }\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"By creating a helper function like this, you can easily re-use it and add items to it. All Slash Menu groups with the same keys will have their items merged together.\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"items\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"An array of \", _jsx(_components.code, {\n              children: \"SlashMenuItem\"\n            }), \"'s which will be displayed in the slash menu.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"label\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The label will be displayed before your Slash Menu group. In order to make use of i18n, this can be a function.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"key\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Used for class names and, if label is not provided, for display. Slash menus with the same key will have their items merged together.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Slash Menu items\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The API for adding items to the slash menu is similar. There are slash menu groups, and each slash menu groups has items. Here is an example:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"'use client'\\n\\nimport {\\n  createClientFeature,\\n  slashMenuBasicGroupWithItems,\\n} from '@payloadcms/richtext-lexical/client'\\nimport { INSERT_MYNODE_COMMAND } from './plugin'\\nimport { IconComponent } from './icon'\\n\\nexport const MyClientFeature = createClientFeature({\\n  slashMenu: {\\n    groups: [\\n      slashMenuBasicGroupWithItems([\\n        {\\n          Icon: IconComponent,\\n          key: 'myNode',\\n          keywords: ['myNode', 'myFeature', 'someOtherKeyword'],\\n          label: ({ i18n }) => {\\n            return i18n.t('lexical:myFeature:label')\\n          },\\n          onSelect: ({ editor }) => {\\n            editor.dispatchCommand(INSERT_MYNODE_COMMAND, undefined)\\n          },\\n        },\\n      ]),\\n    ],\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"Icon\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The icon which is rendered in your slash menu item.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"label\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The label will be displayed in your slash menu item. In order to make use of i18n, this can be a function.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"key\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Each slash menu item needs to have a unique key. The key will be matched when typing, displayed if no \", _jsx(_components.code, {\n              children: \"label\"\n            }), \" property is set, and used for classNames.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"onSelect\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"A function which is called when the slash menu item is selected.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"keywords\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Keywords are used to match the item for different texts typed after the '/'. E.g. you might want to show a horizontal rule item if you type both /hr, /separator, /horizontal etc. In addition to the keywords, the label and key will be used to find the right slash menu item.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Markdown Transformers#client-feature-markdown-transformers\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The Client Feature, just like the Server Feature, allows you to add markdown transformers. Markdown transformers on the client are used to create new nodes when a certain markdown pattern is typed in the editor.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { createClientFeature } from '@payloadcms/richtext-lexical/client'\\nimport type { ElementTransformer } from '@payloadcms/richtext-lexical/lexical/markdown'\\nimport { $createMyNode, $isMyNode, MyNode } from './nodes/MyNode'\\n\\nconst MyMarkdownTransformer: ElementTransformer = {\\n  type: 'element',\\n  dependencies: [MyNode],\\n  export: (node, exportChildren) => {\\n    if (!$isMyNode(node)) {\\n      return null\\n    }\\n    return '+++'\\n  },\\n  // match ---\\n  regExp: /^+++\\\\s*$/,\\n  replace: (parentNode) => {\\n    const node = $createMyNode()\\n    if (node) {\\n      parentNode.replace(node)\\n    }\\n  },\\n}\\n\\nexport const MyFeature = createClientFeature({\\n  markdownTransformers: [MyMarkdownTransformer],\\n})\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In this example, a new \", _jsx(_components.code, {\n        children: \"MyNode\"\n      }), \" will be inserted into the editor when \", _jsx(_components.code, {\n        children: \"+++ \"\n      }), \" is typed.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Providers\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can add providers to your client feature, which will be nested below the \", _jsx(_components.code, {\n        children: \"EditorConfigProvider\"\n      }), \". This can be useful if you want to provide some context to your nodes or other parts of your feature.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"'use client'\\n\\nimport { createClientFeature } from '@payloadcms/richtext-lexical/client'\\nimport { TableContext } from './context'\\n\\nexport const MyClientFeature = createClientFeature({\\n  providers: [TableContext],\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Props\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To accept props in your feature, type them as a generic.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Server Feature:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"createServerFeature<UnSanitizedProps, SanitizedProps, UnSanitizedClientProps>({\\n  //...\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Client Feature:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"createClientFeature<UnSanitizedClientProps, SanitizedClientProps>({\\n  //...\\n})\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The unSanitized props are what the user will pass to the feature when they call its provider function and add it to their editor config. You then have an option to sanitize those props.\\nTo sanitize those in the server feature, you can pass a function to \", _jsx(_components.code, {\n        children: \"feature\"\n      }), \" instead of an object:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"createServerFeature<UnSanitizedProps, SanitizedProps, UnSanitizedClientProps>({\\n  //...\\n  feature: async ({\\n    config,\\n    isRoot,\\n    props,\\n    resolvedFeatures,\\n    unSanitizedEditorConfig,\\n    featureProviderMap,\\n  }) => {\\n    const sanitizedProps = doSomethingWithProps(props)\\n\\n    return {\\n      sanitizedServerFeatureProps: sanitizedProps,\\n      //Actual server feature here...\\n    }\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Keep in mind that any sanitized props then have to be returned in the \", _jsx(_components.code, {\n        children: \"sanitizedServerFeatureProps\"\n      }), \" property.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In the client feature, it works similarly:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"createClientFeature<UnSanitizedClientProps, SanitizedClientProps>(\\n  ({\\n    clientFunctions,\\n    featureProviderMap,\\n    props,\\n    resolvedFeatures,\\n    unSanitizedEditorConfig,\\n  }) => {\\n    const sanitizedProps = doSomethingWithProps(props)\\n    return {\\n      sanitizedClientFeatureProps: sanitizedProps,\\n      //Actual client feature here...\\n    }\\n  },\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Bringing props from the server to the client\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"By default, the client feature will never receive any props from the server feature. In order to pass props from the server to the client, you can need to return those props in the server feature:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"type UnSanitizedClientProps = {\\n  test: string\\n}\\n\\ncreateServerFeature<UnSanitizedProps, SanitizedProps, UnSanitizedClientProps>({\\n  //...\\n  feature: {\\n    clientFeatureProps: {\\n      test: 'myValue',\\n    },\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The reason the client feature does not have the same props available as the server by default is because all client props need to be serializable. You can totally accept things like functions or Maps as props in your server feature, but you will not be able to send those to the client. In the end, those props are sent from the server to the client over the network, so they need to be serializable.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"More information\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Have a look at the \", _jsx(_components.a, {\n        href: \"https://github.com/payloadcms/payload/tree/main/packages/richtext-lexical/src/features\",\n        children: \"features we've already built\"\n      }), \" - understanding how they work will help you understand how to create your own. There is no difference between the features included by default and the ones you create yourself - since those features are all isolated from the \\\"core\\\", you have access to the same APIs, whether the feature is part of Payload or not!\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}},"__N_SSG":true}