{"pageProps":{"frontMatter":{"title":"Checkbox Field","label":"Checkbox","order":40,"desc":"Checkbox field types allow the developer to save a boolean value in the database. Learn how to use Checkbox fields, see examples and options.","keywords":"checkbox, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, nextjs"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    pre: \"pre\",\n    h2: \"h2\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    strong: \"strong\",\n    em: \"em\",\n    h3: \"h3\",\n    h4: \"h4\"\n  }, _provideComponents(), props.components), {LightDarkImage} = _components;\n  if (!LightDarkImage) _missingMdxReference(\"LightDarkImage\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"The Checkbox Field saves a boolean in the database.\"\n    }), \"\\n\", _jsx(LightDarkImage, {\n      srcLight: \"https://payloadcms.com/images/docs/fields/checkbox.png\",\n      srcDark: \"https://payloadcms.com/images/docs/fields/checkbox-dark.png\",\n      alt: \"Checkbox field with text field in Payload Admin Panel\",\n      caption: \"Admin Panel screenshot of Checkbox field with Text field below\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To add a Checkbox Field, set the \", _jsx(_components.code, {\n        children: \"type\"\n      }), \" to \", _jsx(_components.code, {\n        children: \"checkbox\"\n      }), \" in your \", _jsx(_components.a, {\n        href: \"./overview\",\n        children: \"Field Config\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { Field } from 'payload'\\n\\nexport const MyCheckboxField: Field = {\\n  // ...\\n  type: 'checkbox', // highlight-line\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Config Options\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"name\"\n              })\n            }), \" *\"]\n          }), _jsxs(_components.td, {\n            children: [\"To be used as the property name when stored and retrieved from the database. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-names\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"label\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Text used as a field label in the Admin Panel or an object with keys for each language.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"validate\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide a custom validation function that will be executed on both the Admin Panel and the backend. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#validation\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"index\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Build an \", _jsx(_components.a, {\n              href: \"/docs/database/overview\",\n              children: \"index\"\n            }), \" for this field to produce faster queries. Set this field to \", _jsx(_components.code, {\n              children: \"true\"\n            }), \" if your users will perform queries on this field's data often.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"saveToJWT\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"If this field is top-level and nested in a config supporting \", _jsx(_components.a, {\n              href: \"/docs/authentication/overview\",\n              children: \"Authentication\"\n            }), \", include its data in the user JWT.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hooks\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide Field Hooks to control logic for this field. \", _jsx(_components.a, {\n              href: \"../hooks/fields\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"access\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide Field Access Control to denote what users can see and do with this field's data. \", _jsx(_components.a, {\n              href: \"../access-control/fields\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hidden\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin Panel.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"defaultValue\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide data to be used for this field's default value, will default to false if field is also \", _jsx(_components.code, {\n              children: \"required\"\n            }), \". \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#default-values\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"localized\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Enable localization for this field. Requires \", _jsx(_components.a, {\n              href: \"/docs/configuration/localization\",\n              children: \"localization to be enabled\"\n            }), \" in the Base config.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"required\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Require this field to have a value.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"admin\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Admin-specific configuration. \", _jsx(_components.a, {\n              href: \"./overview#admin-options\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"custom\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Extension point for adding custom data (e.g. for plugins)\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"typescriptSchema\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Override field type generation with providing a JSON schema\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"virtual\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide \", _jsx(_components.code, {\n              children: \"true\"\n            }), \" to disable field in the database. See \", _jsx(_components.a, {\n              href: \"https://payloadcms.com/blog/learn-how-virtual-fields-can-help-solve-common-cms-challenges\",\n              children: \"Virtual Fields\"\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"* An asterisk denotes that a property is required.\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Example\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here is an example of a Checkbox Field in a Collection:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { CollectionConfig } from 'payload'\\n\\nexport const ExampleCollection: CollectionConfig = {\\n  slug: 'example-collection',\\n  fields: [\\n    {\\n      name: 'enableCoolStuff', // required\\n      type: 'checkbox', // required\\n      label: 'Click me to see fanciness',\\n      defaultValue: false,\\n    },\\n  ],\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Custom Components\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Field\"\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Server Component\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import type React from 'react'\\nimport { CheckboxField } from '@payloadcms/ui'\\nimport type { CheckboxFieldServerComponent } from 'payload'\\n\\nexport const CustomCheckboxFieldServer: CheckboxFieldServerComponent = ({\\n  clientField,\\n  path,\\n  schemaPath,\\n  permissions,\\n}) => {\\n  return (\\n    <CheckboxField\\n      field={clientField}\\n      path={path}\\n      schemaPath={schemaPath}\\n      permissions={permissions}\\n    />\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Client Component\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"'use client'\\nimport React from 'react'\\nimport { CheckboxField } from '@payloadcms/ui'\\nimport type { CheckboxFieldClientComponent } from 'payload'\\n\\nexport const CustomCheckboxFieldClient: CheckboxFieldClientComponent = (\\n  props,\\n) => {\\n  return <CheckboxField {...props} />\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Label\"\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Server Component\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import React from 'react'\\nimport { FieldLabel } from '@payloadcms/ui'\\nimport type { CheckboxFieldLabelServerComponent } from 'payload'\\n\\nexport const CustomCheckboxFieldLabelServer: CheckboxFieldLabelServerComponent =\\n  ({ clientField, path }) => {\\n    return (\\n      <FieldLabel\\n        label={clientField?.label || clientField?.name}\\n        path={path}\\n        required={clientField?.required}\\n      />\\n    )\\n  }\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Client Component\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"'use client'\\nimport React from 'react'\\nimport { FieldLabel } from '@payloadcms/ui'\\nimport type { CheckboxFieldLabelClientComponent } from 'payload'\\n\\nexport const CustomCheckboxFieldLabelClient: CheckboxFieldLabelClientComponent =\\n  ({ label, path, required }) => {\\n    return (\\n      <FieldLabel\\n        label={field?.label || field?.name}\\n        path={path}\\n        required={field?.required}\\n      />\\n    )\\n  }\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}},"__N_SSG":true}