{"pageProps":{"frontMatter":{"title":"Row Field","label":"Row","order":150,"desc":"With the Row field you can arrange fields next to each other in the Admin Panel to help you customize your Dashboard.","keywords":"row, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, nextjs"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    code: \"code\",\n    pre: \"pre\",\n    h2: \"h2\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    strong: \"strong\",\n    em: \"em\"\n  }, _provideComponents(), props.components), {LightDarkImage} = _components;\n  if (!LightDarkImage) _missingMdxReference(\"LightDarkImage\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"The Row Field is presentational-only and only affects the \", _jsx(_components.a, {\n        href: \"../admin/overview\",\n        children: \"Admin Panel\"\n      }), \". By using it, you can arrange \", _jsx(_components.a, {\n        href: \"./overview\",\n        children: \"Fields\"\n      }), \" next to each other horizontally.\"]\n    }), \"\\n\", _jsx(LightDarkImage, {\n      srcLight: \"https://payloadcms.com/images/docs/fields/row.png\",\n      srcDark: \"https://payloadcms.com/images/docs/fields/row-dark.png\",\n      alt: \"Shows a row field in the Payload Admin Panel\",\n      caption: \"Admin Panel screenshot of a Row field\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To add a Row Field, set the \", _jsx(_components.code, {\n        children: \"type\"\n      }), \" to \", _jsx(_components.code, {\n        children: \"row\"\n      }), \" in your \", _jsx(_components.a, {\n        href: \"./overview\",\n        children: \"Field Config\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { Field } from 'payload'\\n\\nexport const MyRowField: Field = {\\n  // ...\\n  // highlight-start\\n  type: 'row',\\n  fields: [\\n    // ...\\n  ],\\n  // highlight-end\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Config Options\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"fields\"\n              })\n            }), \" *\"]\n          }), _jsx(_components.td, {\n            children: \"Array of field types to nest within this Row.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"admin\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Admin-specific configuration excluding \", _jsx(_components.code, {\n              children: \"description\"\n            }), \", \", _jsx(_components.code, {\n              children: \"readOnly\"\n            }), \", and \", _jsx(_components.code, {\n              children: \"hidden\"\n            }), \". \", _jsx(_components.a, {\n              href: \"./overview#admin-options\",\n              children: \"More details\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"custom\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Extension point for adding custom data (e.g. for plugins)\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"* An asterisk denotes that a property is required.\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Example\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"collections/ExampleCollection.ts\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { CollectionConfig } from 'payload'\\n\\nexport const ExampleCollection: CollectionConfig = {\\n  slug: 'example-collection',\\n  fields: [\\n    {\\n      type: 'row', // required\\n      fields: [\\n        // required\\n        {\\n          name: 'label',\\n          type: 'text',\\n          required: true,\\n          admin: {\\n            width: '50%',\\n          },\\n        },\\n        {\\n          name: 'value',\\n          type: 'text',\\n          required: true,\\n          admin: {\\n            width: '50%',\\n          },\\n        },\\n      ],\\n    },\\n  ],\\n}\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}},"__N_SSG":true}