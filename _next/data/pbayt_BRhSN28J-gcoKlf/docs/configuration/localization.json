{"pageProps":{"frontMatter":{"title":"Localization","label":"Localization","order":50,"desc":"Add and maintain as many locales as you need by adding Localization to your Payload Config, set options for default locale, fallbacks, fields and more.","keywords":"localization, internationalization, i18n, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, nextjs"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    code: \"code\",\n    pre: \"pre\",\n    h2: \"h2\",\n    strong: \"strong\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    h3: \"h3\",\n    h4: \"h4\",\n    em: \"em\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"Localization is one of the most important features of a modern CMS. It allows you to manage content in multiple languages, then serve it to your users based on their requested language. This is similar to \", _jsx(_components.a, {\n        href: \"./i18n\",\n        children: \"I18n\"\n      }), \", but instead of managing translations for your application's interface, you are managing translations for the data itself.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"With Localization, you can begin to serve personalized content to your users based on their specific language preferences, such as a multilingual website or multi-site application. There are no limits to the number of locales you can add to your Payload project.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To configure Localization, use the \", _jsx(_components.code, {\n        children: \"localization\"\n      }), \" key in your \", _jsx(_components.a, {\n        href: \"./overview\",\n        children: \"Payload Config\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { buildConfig } from 'payload'\\n\\nexport default buildConfig({\\n  // ...\\n  localization: {\\n    // highlight-line\\n    // ...\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Config Options\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Add the \", _jsx(_components.code, {\n        children: \"localization\"\n      }), \" property to your Payload Config to enable Localization project-wide. You'll need to provide a list of all locales that you'd like to support as well as set a few other options.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To configure locales, use the \", _jsx(_components.code, {\n        children: \"localization.locales\"\n      }), \" property in your \", _jsx(_components.a, {\n        href: \"./overview\",\n        children: \"Payload Config\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { buildConfig } from 'payload'\\n\\nexport default buildConfig({\\n  // ...\\n  localization: {\\n    locales: ['en', 'es', 'de'], // required\\n    defaultLocale: 'en', // required\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can also define locales using \", _jsx(_components.a, {\n        href: \"#locale-object\",\n        children: \"full configuration objects\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { buildConfig } from 'payload'\\n\\nexport default buildConfig({\\n  collections: [\\n    // collections go here\\n  ],\\n  localization: {\\n    locales: [\\n      {\\n        label: 'English',\\n        code: 'en',\\n      },\\n      {\\n        label: 'Arabic',\\n        code: 'ar',\\n        // opt-in to setting default text-alignment on Input fields to rtl (right-to-left)\\n        // when current locale is rtl\\n        rtl: true,\\n      },\\n    ],\\n    defaultLocale: 'en', // required\\n    fallback: true, // defaults to true\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"success\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Tip:\"\n        }), \" Localization works very well alongside\\n\", _jsx(_components.a, {\n          href: \"/docs/configuration/i18n\",\n          children: \"I18n\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The following options are available:\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"locales\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Array of all the languages that you would like to support. \", _jsx(_components.a, {\n              href: \"#locales\",\n              children: \"More details\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"defaultLocale\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Required string that matches one of the locale codes from the array provided. By default, if no locale is specified, documents will be returned in this locale.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"fallback\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Boolean enabling \\\"fallback\\\" locale functionality. If a document is requested in a locale, but a field does not have a localized value corresponding to the requested locale, then if this property is enabled, the document will automatically fall back to the fallback locale value. If this property is not enabled, the value will not be populated unless a fallback is explicitly provided in the request. True by default.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"filterAvailableLocales\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"A function that is called with the array of \", _jsx(_components.code, {\n              children: \"locales\"\n            }), \" and the \", _jsx(_components.code, {\n              children: \"req\"\n            }), \", it should return locales to show in admin UI selector. \", _jsx(_components.a, {\n              href: \"#filter-available-options\",\n              children: \"See more\"\n            }), \".\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Locales\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The locales array is a list of all the languages that you would like to support. This can be strings for each language code, or \", _jsx(_components.a, {\n        href: \"#locale-object\",\n        children: \"full configuration objects\"\n      }), \" for more advanced options.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The locale codes do not need to be in any specific format. It's up to you to define how to represent your locales. Common patterns are to use two-letter ISO 639 language codes or four-letter language and country codes (ISO 3166â€‘1) such as \", _jsx(_components.code, {\n        children: \"en-US\"\n      }), \", \", _jsx(_components.code, {\n        children: \"en-UK\"\n      }), \", \", _jsx(_components.code, {\n        children: \"es-MX\"\n      }), \", etc.\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Locale Object\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"code\"\n              })\n            }), \" *\"]\n          }), _jsxs(_components.td, {\n            children: [\"Unique code to identify the language throughout the APIs for \", _jsx(_components.code, {\n              children: \"locale\"\n            }), \" and \", _jsx(_components.code, {\n              children: \"fallbackLocale\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"label\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"A string to use for the selector when choosing a language, or an object keyed on the i18n keys for different languages in use.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"rtl\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"A boolean that when true will make the admin UI display in Right-To-Left.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"fallbackLocale\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The code for this language to fallback to when properties of a document are not present.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"* An asterisk denotes that a property is required.\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Filter Available Options\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In some projects you may want to filter the available locales shown in the admin UI selector. You can do this by providing a \", _jsx(_components.code, {\n        children: \"filterAvailableLocales\"\n      }), \" function in your Payload Config. This is called on the server side and is passed the array of locales. This means that you can determine what locales are visible in the localizer selection menu at the top of the admin panel. You could do this per user, or implement a function that scopes these to tenants and more. Here is an example using request headers in a multi-tenant application:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"// ... rest of Payload config\\nlocalization: {\\n  defaultLocale: 'en',\\n  locales: ['en', 'es'],\\n  filterAvailableLocales: async ({ req, locales }) => {\\n    if (getTenantFromCookie(req.headers, 'text')) {\\n      const fullTenant = await req.payload.findByID({\\n        id: getTenantFromCookie(req.headers, 'text') as string,\\n        collection: 'tenants',\\n        req,\\n      })\\n      if (fullTenant && fullTenant.supportedLocales?.length) {\\n        return locales.filter((locale) => {\\n          return fullTenant.supportedLocales?.includes(locale.code as 'en' | 'es')\\n        })\\n      }\\n    }\\n    return locales\\n  },\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Since the filtering happens at the root level of the application and its result is not calculated every time you navigate to a new page, you may want to call \", _jsx(_components.code, {\n        children: \"router.refresh\"\n      }), \" in a custom component that watches when values that affect the result change. In the example above, you would want to do this when \", _jsx(_components.code, {\n        children: \"supportedLocales\"\n      }), \" changes on the tenant document.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Field Localization\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Payload Localization works on a \", _jsx(_components.strong, {\n        children: \"field\"\n      }), \" levelâ€”not a document level. In addition to configuring the base Payload Config to support Localization, you need to specify each field that you would like to localize.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Here is an example of how to enable Localization for a field:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"{\\n  name: 'title',\\n  type: 'text',\\n  // highlight-start\\n  localized: true,\\n  // highlight-end\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"With the above configuration, the \", _jsx(_components.code, {\n        children: \"title\"\n      }), \" field will now be saved in the database as an object of all locales instead of a single string.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"All field types with a \", _jsx(_components.code, {\n        children: \"name\"\n      }), \" property support the \", _jsx(_components.code, {\n        children: \"localized\"\n      }), \" propertyâ€”even the more complex field types like \", _jsx(_components.code, {\n        children: \"array\"\n      }), \"s and \", _jsx(_components.code, {\n        children: \"block\"\n      }), \"s.\"]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"info\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Note:\"\n        }), \" Enabling Localization for field types that support nested fields\\nwill automatically create localized \\\"sets\\\" of all fields contained within the\\nfield. For example, if you have a page layout using a blocks field type, you\\nhave the choice of either localizing the full layout, by enabling Localization\\non the top-level blocks field, or only certain fields within the layout.\"]\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Important:\"\n        }), \" When converting an existing field to or from \", _jsx(_components.code, {\n          children: \"localized: true\"\n        }), \"\\nthe data structure in the document will change for this field and so existing\\ndata for this field will be lost. Before changing the Localization setting on\\nfields with existing data, you may need to consider a field migration\\nstrategy.\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Retrieving Localized Docs\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When retrieving documents, you can specify which locale you'd like to receive as well as which fallback locale should be\\nused.\"\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"REST API\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"REST API locale functionality relies on URL query parameters.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"?locale=\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Specify your desired locale by providing the \", _jsx(_components.code, {\n        children: \"locale\"\n      }), \" query parameter directly in the endpoint URL.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"?fallback-locale=\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Specify fallback locale to be used by providing the \", _jsx(_components.code, {\n        children: \"fallback-locale\"\n      }), \" query parameter. This can be provided as either a\\nvalid locale as provided to your base Payload Config, or \", _jsx(_components.code, {\n        children: \"'null'\"\n      }), \", \", _jsx(_components.code, {\n        children: \"'false'\"\n      }), \", or \", _jsx(_components.code, {\n        children: \"'none'\"\n      }), \" to disable falling back.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"fetch('https://localhost:3000/api/pages?locale=es&fallback-locale=none');\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"GraphQL API\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In the GraphQL API, you can specify \", _jsx(_components.code, {\n        children: \"locale\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"fallbackLocale\"\n      }), \" args to all relevant queries and mutations.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"locale\"\n      }), \" arg will only accept valid locales, but locales will be formatted automatically as valid GraphQL enum\\nvalues (dashes or special characters will be converted to underscores, spaces will be removed, etc.). If you are curious\\nto see how locales are auto-formatted, you can use the \", _jsx(_components.a, {\n        href: \"/docs/graphql/overview#graphql-playground\",\n        children: \"GraphQL playground\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"fallbackLocale\"\n      }), \" arg will accept valid locales as well as \", _jsx(_components.code, {\n        children: \"none\"\n      }), \" to disable falling back.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-graphql\",\n        children: \"query {\\n  Posts(locale: de, fallbackLocale: none) {\\n    docs {\\n      title\\n    }\\n  }\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      children: _jsx(_components.p, {\n        children: \"In GraphQL, specifying the locale at the top level of a query will\\nautomatically apply it throughout all nested relationship fields. You can\\noverride this behavior by re-specifying locale arguments in nested related\\ndocument queries.\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Local API\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can specify \", _jsx(_components.code, {\n        children: \"locale\"\n      }), \" as well as \", _jsx(_components.code, {\n        children: \"fallbackLocale\"\n      }), \" within the Local API as well as properties on the \", _jsx(_components.code, {\n        children: \"options\"\n      }), \"\\nargument. The \", _jsx(_components.code, {\n        children: \"locale\"\n      }), \" property will accept any valid locale, and the \", _jsx(_components.code, {\n        children: \"fallbackLocale\"\n      }), \" property will accept any valid\\nlocale as well as \", _jsx(_components.code, {\n        children: \"'null'\"\n      }), \", \", _jsx(_components.code, {\n        children: \"'false'\"\n      }), \", \", _jsx(_components.code, {\n        children: \"false\"\n      }), \", and \", _jsx(_components.code, {\n        children: \"'none'\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"const posts = await payload.find({\\n  collection: 'posts',\\n  locale: 'es',\\n  fallbackLocale: false,\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"success\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Tip:\"\n        }), \" The REST and Local APIs can return all Localization data in one\\nrequest by passing 'all' or '*' as the \", _jsx(_components.strong, {\n          children: \"locale\"\n        }), \" parameter. The response will\\nbe structured so that field values come back as the full objects keyed for\\neach locale instead of the single, translated value.\"]\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}},"__N_SSG":true}