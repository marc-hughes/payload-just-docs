{"pageProps":{"frontMatter":{"title":"Production Deployment","label":"Deployment","order":10,"desc":"When your Payload based app is ready, tested, looking great, it is time to deploy. Learn how to deploy your app and what to consider before deployment.","keywords":"deployment, production, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, nextjs"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    ol: \"ol\",\n    li: \"li\",\n    a: \"a\",\n    em: \"em\",\n    h2: \"h2\",\n    code: \"code\",\n    h3: \"h3\",\n    ul: \"ul\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(Banner, {\n      type: \"success\",\n      children: _jsxs(_components.p, {\n        children: [\"So you've developed a Payload app, it's fully tested, and running great\\nlocally. Now it's time to launch. \", _jsx(_components.strong, {\n          children: \"Awesome! Great work!\"\n        }), \" Now, what's next?\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"There are many ways to deploy Payload to a production environment. When evaluating how you will deploy Payload, you need\\nto consider these main aspects:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#basics\",\n          children: \"Basics\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#security\",\n          children: \"Security\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#database\",\n          children: \"Your database\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#file-storage\",\n          children: \"Permanent File Storage\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#docker\",\n          children: \"Docker\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Payload can be deployed \", _jsx(_components.em, {\n        children: \"anywhere that Next.js can run\"\n      }), \" - including Vercel, Netlify, SST, DigitalOcean, AWS, and more. Because it's open source, you can self-host it.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"But it's important to remember that most Payload projects will also need a database, file storage, an email provider, and a CDN. Make sure you have all of the requirements that your project needs, no matter what deployment platform you choose.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Often, the easiest and fastest way to deploy Payload is to use \", _jsx(_components.a, {\n        href: \"https://payloadcms.com/new\",\n        children: \"Payload Cloud\"\n      }), \" â€” where you get everything you need out of the box, including:\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"A MongoDB Atlas database\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"S3 file storage\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Resend email service\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Cloudflare CDN\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Blue / green deployments\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Logs\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"And more\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Basics\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Payload runs fully in Next.js, so the \", _jsx(_components.a, {\n        href: \"https://nextjs.org/docs/app/building-your-application/deploying\",\n        children: \"Next.js build process\"\n      }), \" is used for building Payload. If you've used \", _jsx(_components.code, {\n        children: \"create-payload-app\"\n      }), \" to create your project, executing the \", _jsx(_components.code, {\n        children: \"build\"\n      }), \"\\nnpm script will build Payload for production.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Security\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Payload features a suite of security features that you can rely on to strengthen your application's security. When\\ndeploying to Production, it's a good idea to double-check that you are making proper use of each of them.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"The Secret Key\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When you initialize Payload, you provide it with a \", _jsx(_components.code, {\n        children: \"secret\"\n      }), \" property. This property should be impossible to guess and\\nextremely difficult for brute-force attacks to crack. Make sure your Production \", _jsx(_components.code, {\n        children: \"secret\"\n      }), \" is a long, complex string.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Double-check and thoroughly test all Access Control\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Because \", _jsx(_components.em, {\n        children: _jsx(_components.strong, {\n          children: \"you\"\n        })\n      }), \" are in complete control of who can do what with your data, you should double and triple-check that you\\nwield that power responsibly before deploying to Production.\"]\n    }), \"\\n\", _jsxs(Banner, {\n      type: \"error\",\n      children: [_jsx(_components.p, {\n        children: _jsx(_components.strong, {\n          children: \"By default, all Access Control functions require that a user is successfully logged in to Payload to create, read, update, or delete data.\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"But, if you allow public user registration, for example, you will want to make sure that your access control functions are more strict - permitting \", _jsx(_components.strong, {\n          children: \"only appropriate users\"\n        }), \" to perform appropriate actions.\"]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Running in Production\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Depending on where you deploy Payload, you may need to provide a start script to your deployment platform in order to start up Payload in production mode.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Note that this is different than running \", _jsx(_components.code, {\n        children: \"next dev\"\n      }), \". Generally, Next.js apps come configured with a \", _jsx(_components.code, {\n        children: \"start\"\n      }), \" script which runs \", _jsx(_components.code, {\n        children: \"next start\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Secure Cookie Settings\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You should be using an SSL certificate for production Payload instances, which means you\\ncan \", _jsx(_components.a, {\n        href: \"/docs/authentication/overview\",\n        children: \"enable secure cookies\"\n      }), \" in your Authentication-enabled Collection configs.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Preventing API Abuse\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Payload comes with a robust set of built-in anti-abuse measures, such as locking out users after X amount of failed\\nlogin attempts, GraphQL query complexity limits, max \", _jsx(_components.code, {\n        children: \"depth\"\n      }), \" settings, and\\nmore. \", _jsx(_components.a, {\n        href: \"/docs/production/preventing-abuse\",\n        children: \"Click here to learn more\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Database\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Payload can be used with any Postgres database or MongoDB-compatible database including AWS DocumentDB or Azure Cosmos DB. Make sure your production environment has access to the database that Payload uses.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Out of the box, Payload templates pass the \", _jsx(_components.code, {\n        children: \"process.env.DATABASE_URI\"\n      }), \" environment variable to its database adapters, so make sure you've got that environment variable (and all others that you use) assigned in your deployment platform.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"DocumentDB\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When using AWS DocumentDB, you will need to configure connection options for authentication in the \", _jsx(_components.code, {\n        children: \"connectOptions\"\n      }), \"\\npassed to the \", _jsx(_components.code, {\n        children: \"mongooseAdapter\"\n      }), \" . You also need to set \", _jsx(_components.code, {\n        children: \"connectOptions.useFacet\"\n      }), \" to \", _jsx(_components.code, {\n        children: \"false\"\n      }), \" to disable use of the\\nunsupported \", _jsx(_components.code, {\n        children: \"$facet\"\n      }), \" aggregation.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"CosmosDB\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When using Azure Cosmos DB, an index is needed for any field you may want to sort on. To add the sort index for all\\nfields that may be sorted in the admin UI use the \", _jsx(_components.a, {\n        href: \"/docs/configuration/overview\",\n        children: \"indexSortableFields\"\n      }), \" option.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"File storage\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you are using Payload to \", _jsx(_components.a, {\n        href: \"/docs/upload/overview\",\n        children: \"manage file uploads\"\n      }), \", you need to consider where your uploaded files\\nwill be permanently stored. If you do not use Payload for file uploads, then this section does not impact your app\\nwhatsoever.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Persistent vs Ephemeral Filesystems\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Some cloud app hosts such as \", _jsx(_components.a, {\n        href: \"https://heroku.com\",\n        children: \"Heroku\"\n      }), \" use \", _jsx(_components.code, {\n        children: \"ephemeral\"\n      }), \" file systems, which means that any files\\nuploaded to your server only last until the server restarts or shuts down. Heroku and similar providers schedule\\nrestarts and shutdowns without your control, meaning your uploads will accidentally disappear without any way to get\\nthem back.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Alternatively, persistent filesystems will never delete your files and can be trusted to reliably host uploads\\nperpetually.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Popular cloud providers with ephemeral filesystems:\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Heroku\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"DigitalOcean Apps\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Popular cloud providers with persistent filesystems:\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"DigitalOcean Droplets\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Amazon EC2\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"GoDaddy\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Many other more traditional web hosts\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(Banner, {\n      type: \"error\",\n      children: [_jsx(_components.p, {\n        children: _jsx(_components.strong, {\n          children: \"Warning:\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"If you rely on Payload's \", _jsx(_components.strong, {\n          children: \"Upload\"\n        }), \" functionality, make sure you either use a host\\nwith a persistent filesystem or have an integration with a third-party file host like Amazon S3.\"]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Using cloud storage providers\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you don't use Payload's \", _jsx(_components.code, {\n        children: \"upload\"\n      }), \" functionality, you can completely disregard this section.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"But, if you do, and you still want to use an ephemeral filesystem provider, you can use one of Payload's official cloud storage plugins or write your own to save the files your users upload to a more permanent storage solution like Amazon S3 or DigitalOcean Spaces.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Payload provides a list of official cloud storage adapters for you to use:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://github.com/payloadcms/payload/tree/main/packages/storage-azure\",\n          children: \"Azure Blob Storage\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://github.com/payloadcms/payload/tree/main/packages/storage-gcs\",\n          children: \"Google Cloud Storage\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://github.com/payloadcms/payload/tree/main/packages/storage-s3\",\n          children: \"AWS S3\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://github.com/payloadcms/payload/tree/main/packages/storage-uploadthing\",\n          children: \"Uploadthing\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://github.com/payloadcms/payload/tree/main/packages/storage-vercel-blob\",\n          children: \"Vercel Blob Storage\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Follow the docs to configure any one of these storage providers. For local development, it might be handy to simply store uploads on your own computer, and then when it comes to production, simply enable the plugin for the cloud storage vendor of your choice.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Docker\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This is an example of a multi-stage docker build of Payload for production. Ensure you are setting your environment\\nvariables on deployment, like \", _jsx(_components.code, {\n        children: \"PAYLOAD_SECRET\"\n      }), \", \", _jsx(_components.code, {\n        children: \"PAYLOAD_CONFIG_PATH\"\n      }), \", and \", _jsx(_components.code, {\n        children: \"DATABASE_URI\"\n      }), \" if needed.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In your Next.js config, set the \", _jsx(_components.code, {\n        children: \"output\"\n      }), \" property \", _jsx(_components.code, {\n        children: \"standalone\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"// next.config.js\\nconst nextConfig = {\\n  output: 'standalone',\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Dockerfile\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-dockerfile\",\n        children: \"# Dockerfile\\n# From https://github.com/vercel/next.js/blob/canary/examples/with-docker/Dockerfile\\n\\nFROM node:18-alpine AS base\\n\\n# Install dependencies only when needed\\nFROM base AS deps\\n# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.\\nRUN apk add --no-cache libc6-compat\\nWORKDIR /app\\n\\n# Install dependencies based on the preferred package manager\\nCOPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* ./\\nRUN \\\\\\n  if [ -f yarn.lock ]; then yarn --frozen-lockfile; \\\\\\n  elif [ -f package-lock.json ]; then npm ci; \\\\\\n  elif [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm i --frozen-lockfile; \\\\\\n  else echo \\\"Lockfile not found.\\\" && exit 1; \\\\\\n  fi\\n\\n\\n# Rebuild the source code only when needed\\nFROM base AS builder\\nWORKDIR /app\\nCOPY --from=deps /app/node_modules ./node_modules\\nCOPY . .\\n\\n# Next.js collects completely anonymous telemetry data about general usage.\\n# Learn more here: https://nextjs.org/telemetry\\n# Uncomment the following line in case you want to disable telemetry during the build.\\n# ENV NEXT_TELEMETRY_DISABLED 1\\n\\nRUN \\\\\\n  if [ -f yarn.lock ]; then yarn run build; \\\\\\n  elif [ -f package-lock.json ]; then npm run build; \\\\\\n  elif [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm run build; \\\\\\n  else echo \\\"Lockfile not found.\\\" && exit 1; \\\\\\n  fi\\n\\n# Production image, copy all the files and run next\\nFROM base AS runner\\nWORKDIR /app\\n\\nENV NODE_ENV production\\n# Uncomment the following line in case you want to disable telemetry during runtime.\\n# ENV NEXT_TELEMETRY_DISABLED 1\\n\\nRUN addgroup --system --gid 1001 nodejs\\nRUN adduser --system --uid 1001 nextjs\\n\\nCOPY --from=builder /app/public ./public\\n\\n# Set the correct permission for prerender cache\\nRUN mkdir .next\\nRUN chown nextjs:nodejs .next\\n\\n# Automatically leverage output traces to reduce image size\\n# https://nextjs.org/docs/advanced-features/output-file-tracing\\nCOPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./\\nCOPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static\\n\\nUSER nextjs\\n\\nEXPOSE 3000\\n\\nENV PORT 3000\\n\\n# server.js is created by next build from the standalone output\\n# https://nextjs.org/docs/pages/api-reference/next-config-js/output\\nCMD HOSTNAME=\\\"0.0.0.0\\\" node server.js\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Docker Compose\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here is an example of a docker-compose.yml file that can be used for development\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-yml\",\n        children: \"version: '3'\\n\\nservices:\\n  payload:\\n    image: node:18-alpine\\n    ports:\\n      - '3000:3000'\\n    volumes:\\n      - .:/home/node/app\\n      - node_modules:/home/node/app/node_modules\\n    working_dir: /home/node/app/\\n    command: sh -c \\\"corepack enable && corepack prepare pnpm@latest --activate && pnpm install && pnpm dev\\\"\\n    depends_on:\\n      - mongo\\n      # - postgres\\n    env_file:\\n      - .env\\n\\n  # Ensure your DATABASE_URI uses 'mongo' as the hostname ie. mongodb://mongo/my-db-name\\n  mongo:\\n    image: mongo:latest\\n    ports:\\n      - '27017:27017'\\n    command:\\n      - --storageEngine=wiredTiger\\n    volumes:\\n      - data:/data/db\\n    logging:\\n      driver: none\\n\\n  # Uncomment the following to use postgres\\n  # postgres:\\n  #   restart: always\\n  #   image: postgres:latest\\n  #   volumes:\\n  #     - pgdata:/var/lib/postgresql/data\\n  #   ports:\\n  #     - \\\"5432:5432\\\"\\n\\nvolumes:\\n  data:\\n  # pgdata:\\n  node_modules:\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}},"__N_SSG":true}