{"pageProps":{"frontMatter":{"title":"Preventing Production API Abuse","label":"Preventing Abuse","order":20,"desc":"Payload has built-in security that can be configured to combat production API abuse such as limiting login attempts and IP requests.","keywords":"abuse, production, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, nextjs"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Introduction\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Payload has built-in security best practices that can be configured to your application-specific needs.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Limit Failed Login Attempts\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Set the max number of failed login attempts before a user account is locked out for a period of time. Set the \", _jsx(_components.code, {\n        children: \"maxLoginAttempts\"\n      }), \" on the collections that feature Authentication to a reasonable but low number for your users to get in. Use the \", _jsx(_components.code, {\n        children: \"lockTime\"\n      }), \" to set a number in milliseconds from the time a user fails their last allowed attempt that a user must wait to try again.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Max Depth\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Querying a collection and automatically including related documents via \", _jsx(_components.code, {\n        children: \"depth\"\n      }), \" incurs a performance cost. Also, it's possible that your configs may have circular relationships, meaning scenarios where an infinite amount of relationships might populate back and forth until your server times out and crashes. You can prevent any potential of depth-related issues by setting a \", _jsx(_components.code, {\n        children: \"maxDepth\"\n      }), \" property on your Payload Config.. The maximum allowed depth should be as small as possible without interrupting dev experience, and it defaults to \", _jsx(_components.code, {\n        children: \"10\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Cross-Site Request Forgery (CSRF)\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"CSRF prevention will verify the authenticity of each request to your API to prevent a malicious action from another site from authorized users. See how to configure CSRF \", _jsx(_components.a, {\n        href: \"/docs/authentication/cookies#csrf-attacks\",\n        children: \"here\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Cross Origin Resource Sharing (CORS)\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To securely allow headless operation you will need to configure the allowed origins for requests to be able to use the Payload API. You can see how to set CORS as well as other Payload configuration settings \", _jsx(_components.a, {\n        href: \"/docs/configuration/overview\",\n        children: \"here\"\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Limiting GraphQL Complexity\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Because GraphQL gives the power of query writing outside a server's control, someone with bad intentions might write a maliciously complex query and bog down your server. To prevent resource-intensive GraphQL requests, Payload provides a way to specify complexity limits. These limits are based on a complexity score calculated for each request.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Any GraphQL request that is calculated to be too expensive is rejected. On the Payload Config, in \", _jsx(_components.code, {\n        children: \"graphQL\"\n      }), \" you can set the \", _jsx(_components.code, {\n        children: \"maxComplexity\"\n      }), \" value as an integer. For reference, the default complexity value for each added field is 1, and all \", _jsx(_components.code, {\n        children: \"relationship\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"upload\"\n      }), \" fields are assigned a value of 10.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you do not need GraphQL it is advised that you disable it altogether with the Payload Config by setting \", _jsx(_components.code, {\n        children: \"graphQL.disable: true\"\n      }), \". Should you wish to enable GraphQL again, you can remove this property or set it \", _jsx(_components.code, {\n        children: \"false\"\n      }), \", any time. By turning it off, Payload will bypass creating schemas from your collections and will not register the route.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Malicious File Uploads\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Payload does not execute uploaded files on the server, but depending on your setup it may be used to transmit and store potentially dangerous files. If your configuration allows file uploads there is the potential that a bad actor uploads a malicious file that is then served to other users. Consider the following ways to mitigate the risks.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"First, enable email \", _jsx(_components.a, {\n        href: \"/docs/authentication/email#email-verification\",\n        children: \"verification\"\n      }), \" when users are allowed to register new accounts and add other bot prevention services.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Review that \", _jsx(_components.code, {\n        children: \"create\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"update\"\n      }), \" access on file upload collections are as restrictive as your application needs allow. Consider limiting \", _jsx(_components.code, {\n        children: \"read\"\n      }), \" access of uploaded user's files and how you might limit user uploaded files from being served outside of Payload.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can also add a \", _jsx(_components.a, {\n        href: \"https://github.com/Cisco-Talos/clamav\",\n        children: \"3rd party library\"\n      }), \" to scan files in a \", _jsx(_components.a, {\n        href: \"/docs/hooks/collections\",\n        children: \"hook\"\n      }), \" or have antivirus software in place.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}