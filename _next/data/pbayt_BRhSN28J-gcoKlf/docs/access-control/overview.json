{"pageProps":{"frontMatter":{"title":"Access Control","label":"Overview","order":10,"desc":"Payload makes it simple to define and manage Access Control. By declaring roles, you can set permissions and restrict what your users can interact with.","keywords":"overview, access control, permissions, documentation, Content Management System, cms, headless, javascript, node, react, nextjs"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    em: \"em\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    pre: \"pre\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components), {YouTube, Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  if (!YouTube) _missingMdxReference(\"YouTube\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(YouTube, {\n      id: \"DoPLyXG26Dg\",\n      title: \"Overview of Payload Access Control\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Access Control determines what a user can and cannot do with any given Document, as well as what they can and cannot see within the \", _jsx(_components.a, {\n        href: \"../admin/overview\",\n        children: \"Admin Panel\"\n      }), \". By implementing Access Control, you can define granular restrictions based on the user, their roles (RBAC), Document data, or any other criteria your application requires.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Access Control functions are scoped to the \", _jsx(_components.em, {\n        children: \"operation\"\n      }), \", meaning you can have different rules for \", _jsx(_components.code, {\n        children: \"create\"\n      }), \", \", _jsx(_components.code, {\n        children: \"read\"\n      }), \", \", _jsx(_components.code, {\n        children: \"update\"\n      }), \", \", _jsx(_components.code, {\n        children: \"delete\"\n      }), \", etc. Access Control functions are executed \", _jsx(_components.em, {\n        children: \"before\"\n      }), \" any changes are made and \", _jsx(_components.em, {\n        children: \"before\"\n      }), \" any operations are completed. This allows you to determine if the user has the necessary permissions before fulfilling the request.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"There are many use cases for Access Control, including:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Allowing anyone \", _jsx(_components.code, {\n          children: \"read\"\n        }), \" access to all posts\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Only allowing public access to posts where a \", _jsx(_components.code, {\n          children: \"status\"\n        }), \" field is equal to \", _jsx(_components.code, {\n          children: \"published\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Giving only users with a \", _jsx(_components.code, {\n          children: \"role\"\n        }), \" field equal to \", _jsx(_components.code, {\n          children: \"admin\"\n        }), \" the ability to delete posts\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Allowing anyone to submit contact forms, but only logged in users to \", _jsx(_components.code, {\n          children: \"read\"\n        }), \", \", _jsx(_components.code, {\n          children: \"update\"\n        }), \" or \", _jsx(_components.code, {\n          children: \"delete\"\n        }), \" them\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Restricting a user to only be able to see their own orders, but no-one else's\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Allowing users that belong to a certain organization to access only that organization's resources\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"There are three main types of Access Control in Payload:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"./collections\",\n          children: \"Collection Access Control\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"./globals\",\n          children: \"Global Access Control\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"./fields\",\n          children: \"Field Access Control\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Default Access Control\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Payload provides default Access Control so that your data is secured behind \", _jsx(_components.a, {\n        href: \"../authentication/overview\",\n        children: \"Authentication\"\n      }), \" without additional configuration. To do this, Payload sets a default function that simply checks if a user is present on the request. You can override this default behavior by defining your own Access Control functions as needed.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here is the default Access Control that Payload provides:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const defaultPayloadAccess = ({ req: { user } }) => {\\n  // Return `true` if a user is found\\n  // and `false` if it is undefined or null\\n  return Boolean(user) // highlight-line\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Important:\"\n        }), \" In the \", _jsx(_components.a, {\n          href: \"../local-api/overview\",\n          children: \"Local API\"\n        }), \", all Access Control\\nis \", _jsx(_components.em, {\n          children: \"skipped\"\n        }), \" by default. This allows your server to have full control over\\nyour application. To opt back in, you can set the \", _jsx(_components.code, {\n          children: \"overrideAccess\"\n        }), \" option to\\n\", _jsx(_components.code, {\n          children: \"false\"\n        }), \" in your requests.\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"The Access Operation\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The Admin Panel responds dynamically to your changes to Access Control. For example, if you restrict editing \", _jsx(_components.code, {\n        children: \"ExampleCollection\"\n      }), \" to only users that feature an \\\"admin\\\" role, Payload will \", _jsx(_components.strong, {\n        children: \"hide\"\n      }), \" that Collection from the Admin Panel entirely. This is super powerful and allows you to control who can do what within your Admin Panel using the same functions that secure your APIs.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To accomplish this, Payload exposes the \", _jsx(_components.a, {\n        href: \"../authentication/operations#access\",\n        children: \"Access Operation\"\n      }), \". Upon login, Payload executes each Access Control function at the top level, across all Collections, Globals, and Fields, and returns a response that contains a reflection of what the currently authenticated user can do within your application.\"]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Important:\"\n        }), \" When your access control functions are executed via the \", _jsx(_components.a, {\n          href: \"../authentication/operations#access\",\n          children: \"Access\\nOperation\"\n        }), \", the \", _jsx(_components.code, {\n          children: \"id\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"data\"\n        }), \" arguments\\nwill be \", _jsx(_components.code, {\n          children: \"undefined\"\n        }), \". This is because Payload is executing your functions\\nwithout referencing a specific Document.\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you use \", _jsx(_components.code, {\n        children: \"id\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"data\"\n      }), \" within your access control functions, make sure to check that they are defined first. If they are not, then you can assume that your Access Control is being executed via the Access Operation to determine solely what the user can do within the Admin Panel.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Locale Specific Access Control\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To implement locale-specific access control, you can use the \", _jsx(_components.code, {\n        children: \"req.locale\"\n      }), \" argument in your access control functions. This argument allows you to evaluate the current locale of the request and determine access permissions accordingly.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here is an example:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const access = ({ req }) => {\\n  // Grant access if the locale is 'en'\\n  if (req.locale === 'en') {\\n    return true\\n  }\\n\\n  // Deny access for all other locales\\n  return false\\n}\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}},"__N_SSG":true}