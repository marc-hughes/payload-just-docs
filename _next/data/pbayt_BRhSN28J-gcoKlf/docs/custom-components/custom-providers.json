{"pageProps":{"frontMatter":{"title":"Swap in your own React Context providers","label":"Custom Providers","order":30,"desc":null,"keywords":"admin, components, custom, documentation, Content Management System, cms, headless, javascript, node, react, nextjs"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    code: \"code\",\n    pre: \"pre\",\n    em: \"em\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"As you add more and more \", _jsx(_components.a, {\n        href: \"./overview\",\n        children: \"Custom Components\"\n      }), \" to your \", _jsx(_components.a, {\n        href: \"../admin/overview\",\n        children: \"Admin Panel\"\n      }), \", you may find it helpful to add additional \", _jsx(_components.a, {\n        href: \"https://react.dev/learn/scaling-up-with-reducer-and-context\",\n        children: \"React Context\"\n      }), \"(s) to your app. Payload allows you to inject your own context providers where you can export your own custom hooks, etc.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To add a Custom Provider, use the \", _jsx(_components.code, {\n        children: \"admin.components.providers\"\n      }), \" property in your \", _jsx(_components.a, {\n        href: \"../configuration/overview\",\n        children: \"Payload Config\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { buildConfig } from 'payload'\\n\\nexport default buildConfig({\\n  // ...\\n  admin: {\\n    components: {\\n      providers: ['/path/to/MyProvider'], // highlight-line\\n    },\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Then build your Custom Provider as follows:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"'use client'\\nimport React, { createContext, use } from 'react'\\n\\nconst MyCustomContext = React.createContext(myCustomValue)\\n\\nexport function MyProvider({ children }: { children: React.ReactNode }) {\\n  return <MyCustomContext value={myCustomValue}>{children}</MyCustomContext>\\n}\\n\\nexport const useMyCustomContext = () => use(MyCustomContext)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsxs(_components.em, {\n        children: [\"For details on how to build Custom Components, see \", _jsx(_components.a, {\n          href: \"./overview#building-custom-components\",\n          children: \"Building Custom Components\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Reminder:\"\n        }), \" React Context exists only within Client Components. This means\\nthey must include the \", _jsx(_components.code, {\n          children: \"use client\"\n        }), \" directive at the top of their files and\\ncannot contain server-only code. To use a Server Component here, simply \", _jsx(_components.em, {\n          children: \"wrap\"\n        }), \"\\nyour Client Component with it.\"]\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}},"__N_SSG":true}